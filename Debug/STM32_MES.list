
STM32_MES.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000055fc  080001e0  080001e0  000101e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005d0  080057dc  080057dc  000157dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005dac  08005dac  00020060  2**0
                  CONTENTS
  4 .ARM          00000008  08005dac  08005dac  00015dac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005db4  08005db4  00020060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005db4  08005db4  00015db4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005db8  08005db8  00015db8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000060  20000000  08005dbc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000944  20000060  08005e1c  00020060  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200009a4  08005e1c  000209a4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020060  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 13 .debug_info   000152b1  00000000  00000000  000200d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002eea  00000000  00000000  00035384  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001268  00000000  00000000  00038270  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000e4b  00000000  00000000  000394d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00023c84  00000000  00000000  0003a323  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001693d  00000000  00000000  0005dfa7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000de7ac  00000000  00000000  000748e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004fa8  00000000  00000000  00153090  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000066  00000000  00000000  00158038  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000060 	.word	0x20000060
 80001fc:	00000000 	.word	0x00000000
 8000200:	080057c4 	.word	0x080057c4

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000064 	.word	0x20000064
 800021c:	080057c4 	.word	0x080057c4

08000220 <strlen>:
 8000220:	4603      	mov	r3, r0
 8000222:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000226:	2a00      	cmp	r2, #0
 8000228:	d1fb      	bne.n	8000222 <strlen+0x2>
 800022a:	1a18      	subs	r0, r3, r0
 800022c:	3801      	subs	r0, #1
 800022e:	4770      	bx	lr

08000230 <__aeabi_uldivmod>:
 8000230:	b953      	cbnz	r3, 8000248 <__aeabi_uldivmod+0x18>
 8000232:	b94a      	cbnz	r2, 8000248 <__aeabi_uldivmod+0x18>
 8000234:	2900      	cmp	r1, #0
 8000236:	bf08      	it	eq
 8000238:	2800      	cmpeq	r0, #0
 800023a:	bf1c      	itt	ne
 800023c:	f04f 31ff 	movne.w	r1, #4294967295
 8000240:	f04f 30ff 	movne.w	r0, #4294967295
 8000244:	f000 b970 	b.w	8000528 <__aeabi_idiv0>
 8000248:	f1ad 0c08 	sub.w	ip, sp, #8
 800024c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000250:	f000 f806 	bl	8000260 <__udivmoddi4>
 8000254:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000258:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800025c:	b004      	add	sp, #16
 800025e:	4770      	bx	lr

08000260 <__udivmoddi4>:
 8000260:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000264:	9e08      	ldr	r6, [sp, #32]
 8000266:	460d      	mov	r5, r1
 8000268:	4604      	mov	r4, r0
 800026a:	460f      	mov	r7, r1
 800026c:	2b00      	cmp	r3, #0
 800026e:	d14a      	bne.n	8000306 <__udivmoddi4+0xa6>
 8000270:	428a      	cmp	r2, r1
 8000272:	4694      	mov	ip, r2
 8000274:	d965      	bls.n	8000342 <__udivmoddi4+0xe2>
 8000276:	fab2 f382 	clz	r3, r2
 800027a:	b143      	cbz	r3, 800028e <__udivmoddi4+0x2e>
 800027c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000280:	f1c3 0220 	rsb	r2, r3, #32
 8000284:	409f      	lsls	r7, r3
 8000286:	fa20 f202 	lsr.w	r2, r0, r2
 800028a:	4317      	orrs	r7, r2
 800028c:	409c      	lsls	r4, r3
 800028e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000292:	fa1f f58c 	uxth.w	r5, ip
 8000296:	fbb7 f1fe 	udiv	r1, r7, lr
 800029a:	0c22      	lsrs	r2, r4, #16
 800029c:	fb0e 7711 	mls	r7, lr, r1, r7
 80002a0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002a4:	fb01 f005 	mul.w	r0, r1, r5
 80002a8:	4290      	cmp	r0, r2
 80002aa:	d90a      	bls.n	80002c2 <__udivmoddi4+0x62>
 80002ac:	eb1c 0202 	adds.w	r2, ip, r2
 80002b0:	f101 37ff 	add.w	r7, r1, #4294967295
 80002b4:	f080 811c 	bcs.w	80004f0 <__udivmoddi4+0x290>
 80002b8:	4290      	cmp	r0, r2
 80002ba:	f240 8119 	bls.w	80004f0 <__udivmoddi4+0x290>
 80002be:	3902      	subs	r1, #2
 80002c0:	4462      	add	r2, ip
 80002c2:	1a12      	subs	r2, r2, r0
 80002c4:	b2a4      	uxth	r4, r4
 80002c6:	fbb2 f0fe 	udiv	r0, r2, lr
 80002ca:	fb0e 2210 	mls	r2, lr, r0, r2
 80002ce:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002d2:	fb00 f505 	mul.w	r5, r0, r5
 80002d6:	42a5      	cmp	r5, r4
 80002d8:	d90a      	bls.n	80002f0 <__udivmoddi4+0x90>
 80002da:	eb1c 0404 	adds.w	r4, ip, r4
 80002de:	f100 32ff 	add.w	r2, r0, #4294967295
 80002e2:	f080 8107 	bcs.w	80004f4 <__udivmoddi4+0x294>
 80002e6:	42a5      	cmp	r5, r4
 80002e8:	f240 8104 	bls.w	80004f4 <__udivmoddi4+0x294>
 80002ec:	4464      	add	r4, ip
 80002ee:	3802      	subs	r0, #2
 80002f0:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002f4:	1b64      	subs	r4, r4, r5
 80002f6:	2100      	movs	r1, #0
 80002f8:	b11e      	cbz	r6, 8000302 <__udivmoddi4+0xa2>
 80002fa:	40dc      	lsrs	r4, r3
 80002fc:	2300      	movs	r3, #0
 80002fe:	e9c6 4300 	strd	r4, r3, [r6]
 8000302:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000306:	428b      	cmp	r3, r1
 8000308:	d908      	bls.n	800031c <__udivmoddi4+0xbc>
 800030a:	2e00      	cmp	r6, #0
 800030c:	f000 80ed 	beq.w	80004ea <__udivmoddi4+0x28a>
 8000310:	2100      	movs	r1, #0
 8000312:	e9c6 0500 	strd	r0, r5, [r6]
 8000316:	4608      	mov	r0, r1
 8000318:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800031c:	fab3 f183 	clz	r1, r3
 8000320:	2900      	cmp	r1, #0
 8000322:	d149      	bne.n	80003b8 <__udivmoddi4+0x158>
 8000324:	42ab      	cmp	r3, r5
 8000326:	d302      	bcc.n	800032e <__udivmoddi4+0xce>
 8000328:	4282      	cmp	r2, r0
 800032a:	f200 80f8 	bhi.w	800051e <__udivmoddi4+0x2be>
 800032e:	1a84      	subs	r4, r0, r2
 8000330:	eb65 0203 	sbc.w	r2, r5, r3
 8000334:	2001      	movs	r0, #1
 8000336:	4617      	mov	r7, r2
 8000338:	2e00      	cmp	r6, #0
 800033a:	d0e2      	beq.n	8000302 <__udivmoddi4+0xa2>
 800033c:	e9c6 4700 	strd	r4, r7, [r6]
 8000340:	e7df      	b.n	8000302 <__udivmoddi4+0xa2>
 8000342:	b902      	cbnz	r2, 8000346 <__udivmoddi4+0xe6>
 8000344:	deff      	udf	#255	; 0xff
 8000346:	fab2 f382 	clz	r3, r2
 800034a:	2b00      	cmp	r3, #0
 800034c:	f040 8090 	bne.w	8000470 <__udivmoddi4+0x210>
 8000350:	1a8a      	subs	r2, r1, r2
 8000352:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000356:	fa1f fe8c 	uxth.w	lr, ip
 800035a:	2101      	movs	r1, #1
 800035c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000360:	fb07 2015 	mls	r0, r7, r5, r2
 8000364:	0c22      	lsrs	r2, r4, #16
 8000366:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800036a:	fb0e f005 	mul.w	r0, lr, r5
 800036e:	4290      	cmp	r0, r2
 8000370:	d908      	bls.n	8000384 <__udivmoddi4+0x124>
 8000372:	eb1c 0202 	adds.w	r2, ip, r2
 8000376:	f105 38ff 	add.w	r8, r5, #4294967295
 800037a:	d202      	bcs.n	8000382 <__udivmoddi4+0x122>
 800037c:	4290      	cmp	r0, r2
 800037e:	f200 80cb 	bhi.w	8000518 <__udivmoddi4+0x2b8>
 8000382:	4645      	mov	r5, r8
 8000384:	1a12      	subs	r2, r2, r0
 8000386:	b2a4      	uxth	r4, r4
 8000388:	fbb2 f0f7 	udiv	r0, r2, r7
 800038c:	fb07 2210 	mls	r2, r7, r0, r2
 8000390:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000394:	fb0e fe00 	mul.w	lr, lr, r0
 8000398:	45a6      	cmp	lr, r4
 800039a:	d908      	bls.n	80003ae <__udivmoddi4+0x14e>
 800039c:	eb1c 0404 	adds.w	r4, ip, r4
 80003a0:	f100 32ff 	add.w	r2, r0, #4294967295
 80003a4:	d202      	bcs.n	80003ac <__udivmoddi4+0x14c>
 80003a6:	45a6      	cmp	lr, r4
 80003a8:	f200 80bb 	bhi.w	8000522 <__udivmoddi4+0x2c2>
 80003ac:	4610      	mov	r0, r2
 80003ae:	eba4 040e 	sub.w	r4, r4, lr
 80003b2:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80003b6:	e79f      	b.n	80002f8 <__udivmoddi4+0x98>
 80003b8:	f1c1 0720 	rsb	r7, r1, #32
 80003bc:	408b      	lsls	r3, r1
 80003be:	fa22 fc07 	lsr.w	ip, r2, r7
 80003c2:	ea4c 0c03 	orr.w	ip, ip, r3
 80003c6:	fa05 f401 	lsl.w	r4, r5, r1
 80003ca:	fa20 f307 	lsr.w	r3, r0, r7
 80003ce:	40fd      	lsrs	r5, r7
 80003d0:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003d4:	4323      	orrs	r3, r4
 80003d6:	fbb5 f8f9 	udiv	r8, r5, r9
 80003da:	fa1f fe8c 	uxth.w	lr, ip
 80003de:	fb09 5518 	mls	r5, r9, r8, r5
 80003e2:	0c1c      	lsrs	r4, r3, #16
 80003e4:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003e8:	fb08 f50e 	mul.w	r5, r8, lr
 80003ec:	42a5      	cmp	r5, r4
 80003ee:	fa02 f201 	lsl.w	r2, r2, r1
 80003f2:	fa00 f001 	lsl.w	r0, r0, r1
 80003f6:	d90b      	bls.n	8000410 <__udivmoddi4+0x1b0>
 80003f8:	eb1c 0404 	adds.w	r4, ip, r4
 80003fc:	f108 3aff 	add.w	sl, r8, #4294967295
 8000400:	f080 8088 	bcs.w	8000514 <__udivmoddi4+0x2b4>
 8000404:	42a5      	cmp	r5, r4
 8000406:	f240 8085 	bls.w	8000514 <__udivmoddi4+0x2b4>
 800040a:	f1a8 0802 	sub.w	r8, r8, #2
 800040e:	4464      	add	r4, ip
 8000410:	1b64      	subs	r4, r4, r5
 8000412:	b29d      	uxth	r5, r3
 8000414:	fbb4 f3f9 	udiv	r3, r4, r9
 8000418:	fb09 4413 	mls	r4, r9, r3, r4
 800041c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000420:	fb03 fe0e 	mul.w	lr, r3, lr
 8000424:	45a6      	cmp	lr, r4
 8000426:	d908      	bls.n	800043a <__udivmoddi4+0x1da>
 8000428:	eb1c 0404 	adds.w	r4, ip, r4
 800042c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000430:	d26c      	bcs.n	800050c <__udivmoddi4+0x2ac>
 8000432:	45a6      	cmp	lr, r4
 8000434:	d96a      	bls.n	800050c <__udivmoddi4+0x2ac>
 8000436:	3b02      	subs	r3, #2
 8000438:	4464      	add	r4, ip
 800043a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800043e:	fba3 9502 	umull	r9, r5, r3, r2
 8000442:	eba4 040e 	sub.w	r4, r4, lr
 8000446:	42ac      	cmp	r4, r5
 8000448:	46c8      	mov	r8, r9
 800044a:	46ae      	mov	lr, r5
 800044c:	d356      	bcc.n	80004fc <__udivmoddi4+0x29c>
 800044e:	d053      	beq.n	80004f8 <__udivmoddi4+0x298>
 8000450:	b156      	cbz	r6, 8000468 <__udivmoddi4+0x208>
 8000452:	ebb0 0208 	subs.w	r2, r0, r8
 8000456:	eb64 040e 	sbc.w	r4, r4, lr
 800045a:	fa04 f707 	lsl.w	r7, r4, r7
 800045e:	40ca      	lsrs	r2, r1
 8000460:	40cc      	lsrs	r4, r1
 8000462:	4317      	orrs	r7, r2
 8000464:	e9c6 7400 	strd	r7, r4, [r6]
 8000468:	4618      	mov	r0, r3
 800046a:	2100      	movs	r1, #0
 800046c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000470:	f1c3 0120 	rsb	r1, r3, #32
 8000474:	fa02 fc03 	lsl.w	ip, r2, r3
 8000478:	fa20 f201 	lsr.w	r2, r0, r1
 800047c:	fa25 f101 	lsr.w	r1, r5, r1
 8000480:	409d      	lsls	r5, r3
 8000482:	432a      	orrs	r2, r5
 8000484:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000488:	fa1f fe8c 	uxth.w	lr, ip
 800048c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000490:	fb07 1510 	mls	r5, r7, r0, r1
 8000494:	0c11      	lsrs	r1, r2, #16
 8000496:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800049a:	fb00 f50e 	mul.w	r5, r0, lr
 800049e:	428d      	cmp	r5, r1
 80004a0:	fa04 f403 	lsl.w	r4, r4, r3
 80004a4:	d908      	bls.n	80004b8 <__udivmoddi4+0x258>
 80004a6:	eb1c 0101 	adds.w	r1, ip, r1
 80004aa:	f100 38ff 	add.w	r8, r0, #4294967295
 80004ae:	d22f      	bcs.n	8000510 <__udivmoddi4+0x2b0>
 80004b0:	428d      	cmp	r5, r1
 80004b2:	d92d      	bls.n	8000510 <__udivmoddi4+0x2b0>
 80004b4:	3802      	subs	r0, #2
 80004b6:	4461      	add	r1, ip
 80004b8:	1b49      	subs	r1, r1, r5
 80004ba:	b292      	uxth	r2, r2
 80004bc:	fbb1 f5f7 	udiv	r5, r1, r7
 80004c0:	fb07 1115 	mls	r1, r7, r5, r1
 80004c4:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004c8:	fb05 f10e 	mul.w	r1, r5, lr
 80004cc:	4291      	cmp	r1, r2
 80004ce:	d908      	bls.n	80004e2 <__udivmoddi4+0x282>
 80004d0:	eb1c 0202 	adds.w	r2, ip, r2
 80004d4:	f105 38ff 	add.w	r8, r5, #4294967295
 80004d8:	d216      	bcs.n	8000508 <__udivmoddi4+0x2a8>
 80004da:	4291      	cmp	r1, r2
 80004dc:	d914      	bls.n	8000508 <__udivmoddi4+0x2a8>
 80004de:	3d02      	subs	r5, #2
 80004e0:	4462      	add	r2, ip
 80004e2:	1a52      	subs	r2, r2, r1
 80004e4:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004e8:	e738      	b.n	800035c <__udivmoddi4+0xfc>
 80004ea:	4631      	mov	r1, r6
 80004ec:	4630      	mov	r0, r6
 80004ee:	e708      	b.n	8000302 <__udivmoddi4+0xa2>
 80004f0:	4639      	mov	r1, r7
 80004f2:	e6e6      	b.n	80002c2 <__udivmoddi4+0x62>
 80004f4:	4610      	mov	r0, r2
 80004f6:	e6fb      	b.n	80002f0 <__udivmoddi4+0x90>
 80004f8:	4548      	cmp	r0, r9
 80004fa:	d2a9      	bcs.n	8000450 <__udivmoddi4+0x1f0>
 80004fc:	ebb9 0802 	subs.w	r8, r9, r2
 8000500:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000504:	3b01      	subs	r3, #1
 8000506:	e7a3      	b.n	8000450 <__udivmoddi4+0x1f0>
 8000508:	4645      	mov	r5, r8
 800050a:	e7ea      	b.n	80004e2 <__udivmoddi4+0x282>
 800050c:	462b      	mov	r3, r5
 800050e:	e794      	b.n	800043a <__udivmoddi4+0x1da>
 8000510:	4640      	mov	r0, r8
 8000512:	e7d1      	b.n	80004b8 <__udivmoddi4+0x258>
 8000514:	46d0      	mov	r8, sl
 8000516:	e77b      	b.n	8000410 <__udivmoddi4+0x1b0>
 8000518:	3d02      	subs	r5, #2
 800051a:	4462      	add	r2, ip
 800051c:	e732      	b.n	8000384 <__udivmoddi4+0x124>
 800051e:	4608      	mov	r0, r1
 8000520:	e70a      	b.n	8000338 <__udivmoddi4+0xd8>
 8000522:	4464      	add	r4, ip
 8000524:	3802      	subs	r0, #2
 8000526:	e742      	b.n	80003ae <__udivmoddi4+0x14e>

08000528 <__aeabi_idiv0>:
 8000528:	4770      	bx	lr
 800052a:	bf00      	nop

0800052c <ConsoleCommandMatch>:

// ConsoleCommandMatch
// Look to see if the data in the buffer matches the command name given that
// the strings are different lengths and we have parameter separators
static uint32_t ConsoleCommandMatch(const char* name, const char *buffer)
{
 800052c:	b480      	push	{r7}
 800052e:	b085      	sub	sp, #20
 8000530:	af00      	add	r7, sp, #0
 8000532:	6078      	str	r0, [r7, #4]
 8000534:	6039      	str	r1, [r7, #0]
	uint32_t i = 0u;
 8000536:	2300      	movs	r3, #0
 8000538:	60fb      	str	r3, [r7, #12]
	uint32_t result = 0u; // match
 800053a:	2300      	movs	r3, #0
 800053c:	60bb      	str	r3, [r7, #8]

	if ( buffer[i] == name [i] )
 800053e:	683a      	ldr	r2, [r7, #0]
 8000540:	68fb      	ldr	r3, [r7, #12]
 8000542:	4413      	add	r3, r2
 8000544:	781a      	ldrb	r2, [r3, #0]
 8000546:	6879      	ldr	r1, [r7, #4]
 8000548:	68fb      	ldr	r3, [r7, #12]
 800054a:	440b      	add	r3, r1
 800054c:	781b      	ldrb	r3, [r3, #0]
 800054e:	429a      	cmp	r2, r3
 8000550:	d114      	bne.n	800057c <ConsoleCommandMatch+0x50>
	{
		result = 1u;
 8000552:	2301      	movs	r3, #1
 8000554:	60bb      	str	r3, [r7, #8]
		i++;
 8000556:	68fb      	ldr	r3, [r7, #12]
 8000558:	3301      	adds	r3, #1
 800055a:	60fb      	str	r3, [r7, #12]
	}

	while ( ( 1u == result ) &&
 800055c:	e00e      	b.n	800057c <ConsoleCommandMatch+0x50>
		( buffer[i] != PARAMETER_SEPARATER ) &&
		( buffer[i] != LF_CHAR ) &&( buffer[i] != CR_CHAR ) &&
		( buffer[i] != (char) NULL_CHAR )
		)
	{
		if ( buffer[i] != name[i] )
 800055e:	683a      	ldr	r2, [r7, #0]
 8000560:	68fb      	ldr	r3, [r7, #12]
 8000562:	4413      	add	r3, r2
 8000564:	781a      	ldrb	r2, [r3, #0]
 8000566:	6879      	ldr	r1, [r7, #4]
 8000568:	68fb      	ldr	r3, [r7, #12]
 800056a:	440b      	add	r3, r1
 800056c:	781b      	ldrb	r3, [r3, #0]
 800056e:	429a      	cmp	r2, r3
 8000570:	d001      	beq.n	8000576 <ConsoleCommandMatch+0x4a>
		{
			result = 0u;
 8000572:	2300      	movs	r3, #0
 8000574:	60bb      	str	r3, [r7, #8]
		}
		i++;
 8000576:	68fb      	ldr	r3, [r7, #12]
 8000578:	3301      	adds	r3, #1
 800057a:	60fb      	str	r3, [r7, #12]
		( buffer[i] != LF_CHAR ) &&( buffer[i] != CR_CHAR ) &&
 800057c:	68bb      	ldr	r3, [r7, #8]
 800057e:	2b01      	cmp	r3, #1
 8000580:	d11a      	bne.n	80005b8 <ConsoleCommandMatch+0x8c>
	while ( ( 1u == result ) &&
 8000582:	68fb      	ldr	r3, [r7, #12]
 8000584:	2b09      	cmp	r3, #9
 8000586:	d817      	bhi.n	80005b8 <ConsoleCommandMatch+0x8c>
		( buffer[i] != PARAMETER_SEPARATER ) &&
 8000588:	683a      	ldr	r2, [r7, #0]
 800058a:	68fb      	ldr	r3, [r7, #12]
 800058c:	4413      	add	r3, r2
 800058e:	781b      	ldrb	r3, [r3, #0]
		( i < CONSOLE_COMMAND_MAX_COMMAND_LENGTH )  &&
 8000590:	2b20      	cmp	r3, #32
 8000592:	d011      	beq.n	80005b8 <ConsoleCommandMatch+0x8c>
		( buffer[i] != LF_CHAR ) &&( buffer[i] != CR_CHAR ) &&
 8000594:	683a      	ldr	r2, [r7, #0]
 8000596:	68fb      	ldr	r3, [r7, #12]
 8000598:	4413      	add	r3, r2
 800059a:	781b      	ldrb	r3, [r3, #0]
		( buffer[i] != PARAMETER_SEPARATER ) &&
 800059c:	2b0a      	cmp	r3, #10
 800059e:	d00b      	beq.n	80005b8 <ConsoleCommandMatch+0x8c>
		( buffer[i] != LF_CHAR ) &&( buffer[i] != CR_CHAR ) &&
 80005a0:	683a      	ldr	r2, [r7, #0]
 80005a2:	68fb      	ldr	r3, [r7, #12]
 80005a4:	4413      	add	r3, r2
 80005a6:	781b      	ldrb	r3, [r3, #0]
 80005a8:	2b0d      	cmp	r3, #13
 80005aa:	d005      	beq.n	80005b8 <ConsoleCommandMatch+0x8c>
		( buffer[i] != (char) NULL_CHAR )
 80005ac:	683a      	ldr	r2, [r7, #0]
 80005ae:	68fb      	ldr	r3, [r7, #12]
 80005b0:	4413      	add	r3, r2
 80005b2:	781b      	ldrb	r3, [r3, #0]
		( buffer[i] != LF_CHAR ) &&( buffer[i] != CR_CHAR ) &&
 80005b4:	2b00      	cmp	r3, #0
 80005b6:	d1d2      	bne.n	800055e <ConsoleCommandMatch+0x32>
	}

	return result;
 80005b8:	68bb      	ldr	r3, [r7, #8]
}
 80005ba:	4618      	mov	r0, r3
 80005bc:	3714      	adds	r7, #20
 80005be:	46bd      	mov	sp, r7
 80005c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c4:	4770      	bx	lr

080005c6 <ConsoleResetBuffer>:
// In an ideal world, this would just zero out the buffer. However, thre are times when the
// buffer may have data beyond what was used in the last command.
// We don't want to lose that data so we move it to the start of the command buffer and then zero
// the rest.
static uint32_t ConsoleResetBuffer(char receiveBuffer[], const uint32_t filledLength, uint32_t usedSoFar)
{
 80005c6:	b480      	push	{r7}
 80005c8:	b087      	sub	sp, #28
 80005ca:	af00      	add	r7, sp, #0
 80005cc:	60f8      	str	r0, [r7, #12]
 80005ce:	60b9      	str	r1, [r7, #8]
 80005d0:	607a      	str	r2, [r7, #4]
	uint32_t remaining = (filledLength - usedSoFar);
 80005d2:	68ba      	ldr	r2, [r7, #8]
 80005d4:	687b      	ldr	r3, [r7, #4]
 80005d6:	1ad3      	subs	r3, r2, r3
 80005d8:	613b      	str	r3, [r7, #16]
	uint32_t i = 0;
 80005da:	2300      	movs	r3, #0
 80005dc:	617b      	str	r3, [r7, #20]

	while (usedSoFar < filledLength)
 80005de:	e00d      	b.n	80005fc <ConsoleResetBuffer+0x36>
	{
		receiveBuffer[i] = receiveBuffer[usedSoFar]; // move the end to the start
 80005e0:	68fa      	ldr	r2, [r7, #12]
 80005e2:	687b      	ldr	r3, [r7, #4]
 80005e4:	441a      	add	r2, r3
 80005e6:	68f9      	ldr	r1, [r7, #12]
 80005e8:	697b      	ldr	r3, [r7, #20]
 80005ea:	440b      	add	r3, r1
 80005ec:	7812      	ldrb	r2, [r2, #0]
 80005ee:	701a      	strb	r2, [r3, #0]
		i++;
 80005f0:	697b      	ldr	r3, [r7, #20]
 80005f2:	3301      	adds	r3, #1
 80005f4:	617b      	str	r3, [r7, #20]
		usedSoFar++;
 80005f6:	687b      	ldr	r3, [r7, #4]
 80005f8:	3301      	adds	r3, #1
 80005fa:	607b      	str	r3, [r7, #4]
	while (usedSoFar < filledLength)
 80005fc:	687a      	ldr	r2, [r7, #4]
 80005fe:	68bb      	ldr	r3, [r7, #8]
 8000600:	429a      	cmp	r2, r3
 8000602:	d3ed      	bcc.n	80005e0 <ConsoleResetBuffer+0x1a>
	}
	for ( /* nothing */ ; i < CONSOLE_COMMAND_MAX_LENGTH ; i++)
 8000604:	e007      	b.n	8000616 <ConsoleResetBuffer+0x50>
	{
		receiveBuffer[i] =  NULL_CHAR;
 8000606:	68fa      	ldr	r2, [r7, #12]
 8000608:	697b      	ldr	r3, [r7, #20]
 800060a:	4413      	add	r3, r2
 800060c:	2200      	movs	r2, #0
 800060e:	701a      	strb	r2, [r3, #0]
	for ( /* nothing */ ; i < CONSOLE_COMMAND_MAX_LENGTH ; i++)
 8000610:	697b      	ldr	r3, [r7, #20]
 8000612:	3301      	adds	r3, #1
 8000614:	617b      	str	r3, [r7, #20]
 8000616:	697b      	ldr	r3, [r7, #20]
 8000618:	2bff      	cmp	r3, #255	; 0xff
 800061a:	d9f4      	bls.n	8000606 <ConsoleResetBuffer+0x40>
	}
	return remaining;
 800061c:	693b      	ldr	r3, [r7, #16]
}
 800061e:	4618      	mov	r0, r3
 8000620:	371c      	adds	r7, #28
 8000622:	46bd      	mov	sp, r7
 8000624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000628:	4770      	bx	lr

0800062a <ConsoleCommandEndline>:

// ConsoleCommandEndline
// Check to see where in the buffer stream the endline is; that is the end of the command and parameters
static int32_t ConsoleCommandEndline(const char receiveBuffer[], const  uint32_t filledLength)
{
 800062a:	b480      	push	{r7}
 800062c:	b085      	sub	sp, #20
 800062e:	af00      	add	r7, sp, #0
 8000630:	6078      	str	r0, [r7, #4]
 8000632:	6039      	str	r1, [r7, #0]
	uint32_t i = 0;
 8000634:	2300      	movs	r3, #0
 8000636:	60fb      	str	r3, [r7, #12]
	int32_t result = NOT_FOUND; // if no endline is found, then return -1 (NOT_FOUND)
 8000638:	f04f 33ff 	mov.w	r3, #4294967295
 800063c:	60bb      	str	r3, [r7, #8]

	while ( ( CR_CHAR != receiveBuffer[i])  && (LF_CHAR != receiveBuffer[i])
 800063e:	e002      	b.n	8000646 <ConsoleCommandEndline+0x1c>
			&& ( i < filledLength ) )
	{
		i++;
 8000640:	68fb      	ldr	r3, [r7, #12]
 8000642:	3301      	adds	r3, #1
 8000644:	60fb      	str	r3, [r7, #12]
	while ( ( CR_CHAR != receiveBuffer[i])  && (LF_CHAR != receiveBuffer[i])
 8000646:	687a      	ldr	r2, [r7, #4]
 8000648:	68fb      	ldr	r3, [r7, #12]
 800064a:	4413      	add	r3, r2
 800064c:	781b      	ldrb	r3, [r3, #0]
			&& ( i < filledLength ) )
 800064e:	2b0d      	cmp	r3, #13
 8000650:	d009      	beq.n	8000666 <ConsoleCommandEndline+0x3c>
	while ( ( CR_CHAR != receiveBuffer[i])  && (LF_CHAR != receiveBuffer[i])
 8000652:	687a      	ldr	r2, [r7, #4]
 8000654:	68fb      	ldr	r3, [r7, #12]
 8000656:	4413      	add	r3, r2
 8000658:	781b      	ldrb	r3, [r3, #0]
 800065a:	2b0a      	cmp	r3, #10
 800065c:	d003      	beq.n	8000666 <ConsoleCommandEndline+0x3c>
			&& ( i < filledLength ) )
 800065e:	68fa      	ldr	r2, [r7, #12]
 8000660:	683b      	ldr	r3, [r7, #0]
 8000662:	429a      	cmp	r2, r3
 8000664:	d3ec      	bcc.n	8000640 <ConsoleCommandEndline+0x16>
	}
	if ( i < filledLength )
 8000666:	68fa      	ldr	r2, [r7, #12]
 8000668:	683b      	ldr	r3, [r7, #0]
 800066a:	429a      	cmp	r2, r3
 800066c:	d201      	bcs.n	8000672 <ConsoleCommandEndline+0x48>
	{
		result = i;
 800066e:	68fb      	ldr	r3, [r7, #12]
 8000670:	60bb      	str	r3, [r7, #8]
	}
	return result;
 8000672:	68bb      	ldr	r3, [r7, #8]
}
 8000674:	4618      	mov	r0, r3
 8000676:	3714      	adds	r7, #20
 8000678:	46bd      	mov	sp, r7
 800067a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800067e:	4770      	bx	lr

08000680 <ConsoleInit>:

// ConsoleInit
// Initialize the console interface and all it depends on
void ConsoleInit(void)
{
 8000680:	b580      	push	{r7, lr}
 8000682:	b082      	sub	sp, #8
 8000684:	af00      	add	r7, sp, #0
	uint32_t i;

	ConsoleIoInit();
 8000686:	f000 fbfb 	bl	8000e80 <ConsoleIoInit>
	ConsoleIoSendString("Welcome to Sandeep's console.");
 800068a:	480f      	ldr	r0, [pc, #60]	; (80006c8 <ConsoleInit+0x48>)
 800068c:	f000 fc7c 	bl	8000f88 <ConsoleIoSendString>
	ConsoleIoSendString(STR_ENDLINE);
 8000690:	480e      	ldr	r0, [pc, #56]	; (80006cc <ConsoleInit+0x4c>)
 8000692:	f000 fc79 	bl	8000f88 <ConsoleIoSendString>
	ConsoleIoSendString(CONSOLE_PROMPT);
 8000696:	480e      	ldr	r0, [pc, #56]	; (80006d0 <ConsoleInit+0x50>)
 8000698:	f000 fc76 	bl	8000f88 <ConsoleIoSendString>
	mReceivedSoFar = 0u;
 800069c:	4b0d      	ldr	r3, [pc, #52]	; (80006d4 <ConsoleInit+0x54>)
 800069e:	2200      	movs	r2, #0
 80006a0:	601a      	str	r2, [r3, #0]

	for ( i = 0u ; i < CONSOLE_COMMAND_MAX_LENGTH ; i++)
 80006a2:	2300      	movs	r3, #0
 80006a4:	607b      	str	r3, [r7, #4]
 80006a6:	e007      	b.n	80006b8 <ConsoleInit+0x38>
	{
		mReceiveBuffer[i] = NULL_CHAR;
 80006a8:	4a0b      	ldr	r2, [pc, #44]	; (80006d8 <ConsoleInit+0x58>)
 80006aa:	687b      	ldr	r3, [r7, #4]
 80006ac:	4413      	add	r3, r2
 80006ae:	2200      	movs	r2, #0
 80006b0:	701a      	strb	r2, [r3, #0]
	for ( i = 0u ; i < CONSOLE_COMMAND_MAX_LENGTH ; i++)
 80006b2:	687b      	ldr	r3, [r7, #4]
 80006b4:	3301      	adds	r3, #1
 80006b6:	607b      	str	r3, [r7, #4]
 80006b8:	687b      	ldr	r3, [r7, #4]
 80006ba:	2bff      	cmp	r3, #255	; 0xff
 80006bc:	d9f4      	bls.n	80006a8 <ConsoleInit+0x28>
	}

}
 80006be:	bf00      	nop
 80006c0:	bf00      	nop
 80006c2:	3708      	adds	r7, #8
 80006c4:	46bd      	mov	sp, r7
 80006c6:	bd80      	pop	{r7, pc}
 80006c8:	080057dc 	.word	0x080057dc
 80006cc:	080057fc 	.word	0x080057fc
 80006d0:	08005800 	.word	0x08005800
 80006d4:	2000017c 	.word	0x2000017c
 80006d8:	2000007c 	.word	0x2000007c

080006dc <ConsoleProcess>:

// ConsoleProcess
// Looks for new inputs, checks for endline, then runs the matching command.
// Call ConsoleProcess from a loop, it will handle commands as they become available
void ConsoleProcess(void)
{
 80006dc:	b580      	push	{r7, lr}
 80006de:	b086      	sub	sp, #24
 80006e0:	af00      	add	r7, sp, #0
	uint32_t cmdIndex;
	int32_t  cmdEndline;
	int32_t  found;
	eCommandResult_T result;

	ConsoleIoReceive((uint8_t*)&(mReceiveBuffer[mReceivedSoFar]), ( CONSOLE_COMMAND_MAX_LENGTH - mReceivedSoFar ), &received);
 80006e2:	4b54      	ldr	r3, [pc, #336]	; (8000834 <ConsoleProcess+0x158>)
 80006e4:	681b      	ldr	r3, [r3, #0]
 80006e6:	4a54      	ldr	r2, [pc, #336]	; (8000838 <ConsoleProcess+0x15c>)
 80006e8:	1898      	adds	r0, r3, r2
 80006ea:	4b52      	ldr	r3, [pc, #328]	; (8000834 <ConsoleProcess+0x158>)
 80006ec:	681b      	ldr	r3, [r3, #0]
 80006ee:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 80006f2:	463a      	mov	r2, r7
 80006f4:	4619      	mov	r1, r3
 80006f6:	f000 fc13 	bl	8000f20 <ConsoleIoReceive>
	if ( received > 0u || mReceiveBufferNeedsChecking)
 80006fa:	683b      	ldr	r3, [r7, #0]
 80006fc:	2b00      	cmp	r3, #0
 80006fe:	d104      	bne.n	800070a <ConsoleProcess+0x2e>
 8000700:	4b4e      	ldr	r3, [pc, #312]	; (800083c <ConsoleProcess+0x160>)
 8000702:	781b      	ldrb	r3, [r3, #0]
 8000704:	2b00      	cmp	r3, #0
 8000706:	f000 8091 	beq.w	800082c <ConsoleProcess+0x150>
	{
		mReceiveBufferNeedsChecking = false;
 800070a:	4b4c      	ldr	r3, [pc, #304]	; (800083c <ConsoleProcess+0x160>)
 800070c:	2200      	movs	r2, #0
 800070e:	701a      	strb	r2, [r3, #0]
		mReceivedSoFar += received;
 8000710:	4b48      	ldr	r3, [pc, #288]	; (8000834 <ConsoleProcess+0x158>)
 8000712:	681a      	ldr	r2, [r3, #0]
 8000714:	683b      	ldr	r3, [r7, #0]
 8000716:	4413      	add	r3, r2
 8000718:	4a46      	ldr	r2, [pc, #280]	; (8000834 <ConsoleProcess+0x158>)
 800071a:	6013      	str	r3, [r2, #0]
		cmdEndline = ConsoleCommandEndline(mReceiveBuffer, mReceivedSoFar);
 800071c:	4b45      	ldr	r3, [pc, #276]	; (8000834 <ConsoleProcess+0x158>)
 800071e:	681b      	ldr	r3, [r3, #0]
 8000720:	4619      	mov	r1, r3
 8000722:	4845      	ldr	r0, [pc, #276]	; (8000838 <ConsoleProcess+0x15c>)
 8000724:	f7ff ff81 	bl	800062a <ConsoleCommandEndline>
 8000728:	60f8      	str	r0, [r7, #12]
		if ( cmdEndline >= 0 )  // have complete string, find command
 800072a:	68fb      	ldr	r3, [r7, #12]
 800072c:	2b00      	cmp	r3, #0
 800072e:	db7d      	blt.n	800082c <ConsoleProcess+0x150>
		{
			commandTable = ConsoleCommandsGetTable();
 8000730:	f000 fb9c 	bl	8000e6c <ConsoleCommandsGetTable>
 8000734:	60b8      	str	r0, [r7, #8]
			cmdIndex = 0u;
 8000736:	2300      	movs	r3, #0
 8000738:	617b      	str	r3, [r7, #20]
			found = NOT_FOUND;
 800073a:	f04f 33ff 	mov.w	r3, #4294967295
 800073e:	613b      	str	r3, [r7, #16]
			while ( ( NULL != commandTable[cmdIndex].name ) && ( NOT_FOUND == found ) )
 8000740:	e03d      	b.n	80007be <ConsoleProcess+0xe2>
			{
				if ( ConsoleCommandMatch(commandTable[cmdIndex].name, mReceiveBuffer) )
 8000742:	697a      	ldr	r2, [r7, #20]
 8000744:	4613      	mov	r3, r2
 8000746:	00db      	lsls	r3, r3, #3
 8000748:	4413      	add	r3, r2
 800074a:	00db      	lsls	r3, r3, #3
 800074c:	461a      	mov	r2, r3
 800074e:	68bb      	ldr	r3, [r7, #8]
 8000750:	4413      	add	r3, r2
 8000752:	681b      	ldr	r3, [r3, #0]
 8000754:	4938      	ldr	r1, [pc, #224]	; (8000838 <ConsoleProcess+0x15c>)
 8000756:	4618      	mov	r0, r3
 8000758:	f7ff fee8 	bl	800052c <ConsoleCommandMatch>
 800075c:	4603      	mov	r3, r0
 800075e:	2b00      	cmp	r3, #0
 8000760:	d02a      	beq.n	80007b8 <ConsoleProcess+0xdc>
				{
					result = commandTable[cmdIndex].execute(mReceiveBuffer);
 8000762:	697a      	ldr	r2, [r7, #20]
 8000764:	4613      	mov	r3, r2
 8000766:	00db      	lsls	r3, r3, #3
 8000768:	4413      	add	r3, r2
 800076a:	00db      	lsls	r3, r3, #3
 800076c:	461a      	mov	r2, r3
 800076e:	68bb      	ldr	r3, [r7, #8]
 8000770:	4413      	add	r3, r2
 8000772:	685b      	ldr	r3, [r3, #4]
 8000774:	4830      	ldr	r0, [pc, #192]	; (8000838 <ConsoleProcess+0x15c>)
 8000776:	4798      	blx	r3
 8000778:	4603      	mov	r3, r0
 800077a:	71fb      	strb	r3, [r7, #7]
					if ( COMMAND_SUCCESS != result )
 800077c:	79fb      	ldrb	r3, [r7, #7]
 800077e:	2b00      	cmp	r3, #0
 8000780:	d017      	beq.n	80007b2 <ConsoleProcess+0xd6>
					{
						ConsoleIoSendString("Error: ");
 8000782:	482f      	ldr	r0, [pc, #188]	; (8000840 <ConsoleProcess+0x164>)
 8000784:	f000 fc00 	bl	8000f88 <ConsoleIoSendString>
						ConsoleIoSendString(mReceiveBuffer);
 8000788:	482b      	ldr	r0, [pc, #172]	; (8000838 <ConsoleProcess+0x15c>)
 800078a:	f000 fbfd 	bl	8000f88 <ConsoleIoSendString>

						ConsoleIoSendString("Help: ");
 800078e:	482d      	ldr	r0, [pc, #180]	; (8000844 <ConsoleProcess+0x168>)
 8000790:	f000 fbfa 	bl	8000f88 <ConsoleIoSendString>
						ConsoleIoSendString(commandTable[cmdIndex].help);
 8000794:	697a      	ldr	r2, [r7, #20]
 8000796:	4613      	mov	r3, r2
 8000798:	00db      	lsls	r3, r3, #3
 800079a:	4413      	add	r3, r2
 800079c:	00db      	lsls	r3, r3, #3
 800079e:	461a      	mov	r2, r3
 80007a0:	68bb      	ldr	r3, [r7, #8]
 80007a2:	4413      	add	r3, r2
 80007a4:	3308      	adds	r3, #8
 80007a6:	4618      	mov	r0, r3
 80007a8:	f000 fbee 	bl	8000f88 <ConsoleIoSendString>
						ConsoleIoSendString(STR_ENDLINE);
 80007ac:	4826      	ldr	r0, [pc, #152]	; (8000848 <ConsoleProcess+0x16c>)
 80007ae:	f000 fbeb 	bl	8000f88 <ConsoleIoSendString>

					}
					found = cmdIndex;
 80007b2:	697b      	ldr	r3, [r7, #20]
 80007b4:	613b      	str	r3, [r7, #16]
 80007b6:	e002      	b.n	80007be <ConsoleProcess+0xe2>
				}
				else
				{
					cmdIndex++;
 80007b8:	697b      	ldr	r3, [r7, #20]
 80007ba:	3301      	adds	r3, #1
 80007bc:	617b      	str	r3, [r7, #20]
			while ( ( NULL != commandTable[cmdIndex].name ) && ( NOT_FOUND == found ) )
 80007be:	697a      	ldr	r2, [r7, #20]
 80007c0:	4613      	mov	r3, r2
 80007c2:	00db      	lsls	r3, r3, #3
 80007c4:	4413      	add	r3, r2
 80007c6:	00db      	lsls	r3, r3, #3
 80007c8:	461a      	mov	r2, r3
 80007ca:	68bb      	ldr	r3, [r7, #8]
 80007cc:	4413      	add	r3, r2
 80007ce:	681b      	ldr	r3, [r3, #0]
 80007d0:	2b00      	cmp	r3, #0
 80007d2:	d003      	beq.n	80007dc <ConsoleProcess+0x100>
 80007d4:	693b      	ldr	r3, [r7, #16]
 80007d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80007da:	d0b2      	beq.n	8000742 <ConsoleProcess+0x66>

				}
			}
			if ( ( cmdEndline != 0 ) && ( NOT_FOUND == found ) )
 80007dc:	68fb      	ldr	r3, [r7, #12]
 80007de:	2b00      	cmp	r3, #0
 80007e0:	d00d      	beq.n	80007fe <ConsoleProcess+0x122>
 80007e2:	693b      	ldr	r3, [r7, #16]
 80007e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80007e8:	d109      	bne.n	80007fe <ConsoleProcess+0x122>
			{
				if (mReceivedSoFar > 2) /// shorter than that, it is probably nothing
 80007ea:	4b12      	ldr	r3, [pc, #72]	; (8000834 <ConsoleProcess+0x158>)
 80007ec:	681b      	ldr	r3, [r3, #0]
 80007ee:	2b02      	cmp	r3, #2
 80007f0:	d905      	bls.n	80007fe <ConsoleProcess+0x122>
				{
					ConsoleIoSendString("Command not found.");
 80007f2:	4816      	ldr	r0, [pc, #88]	; (800084c <ConsoleProcess+0x170>)
 80007f4:	f000 fbc8 	bl	8000f88 <ConsoleIoSendString>
					ConsoleIoSendString(STR_ENDLINE);
 80007f8:	4813      	ldr	r0, [pc, #76]	; (8000848 <ConsoleProcess+0x16c>)
 80007fa:	f000 fbc5 	bl	8000f88 <ConsoleIoSendString>
				}
			}
			//reset the buffer by moving over any leftovers and nulling the rest
			// clear up to and including the found end line character
			mReceivedSoFar = ConsoleResetBuffer(mReceiveBuffer, mReceivedSoFar, cmdEndline + 1);
 80007fe:	4b0d      	ldr	r3, [pc, #52]	; (8000834 <ConsoleProcess+0x158>)
 8000800:	6819      	ldr	r1, [r3, #0]
 8000802:	68fb      	ldr	r3, [r7, #12]
 8000804:	3301      	adds	r3, #1
 8000806:	461a      	mov	r2, r3
 8000808:	480b      	ldr	r0, [pc, #44]	; (8000838 <ConsoleProcess+0x15c>)
 800080a:	f7ff fedc 	bl	80005c6 <ConsoleResetBuffer>
 800080e:	4603      	mov	r3, r0
 8000810:	4a08      	ldr	r2, [pc, #32]	; (8000834 <ConsoleProcess+0x158>)
 8000812:	6013      	str	r3, [r2, #0]
			mReceiveBufferNeedsChecking = mReceivedSoFar > 0 ? true : false;
 8000814:	4b07      	ldr	r3, [pc, #28]	; (8000834 <ConsoleProcess+0x158>)
 8000816:	681b      	ldr	r3, [r3, #0]
 8000818:	2b00      	cmp	r3, #0
 800081a:	bf14      	ite	ne
 800081c:	2301      	movne	r3, #1
 800081e:	2300      	moveq	r3, #0
 8000820:	b2da      	uxtb	r2, r3
 8000822:	4b06      	ldr	r3, [pc, #24]	; (800083c <ConsoleProcess+0x160>)
 8000824:	701a      	strb	r2, [r3, #0]
			ConsoleIoSendString(CONSOLE_PROMPT);
 8000826:	480a      	ldr	r0, [pc, #40]	; (8000850 <ConsoleProcess+0x174>)
 8000828:	f000 fbae 	bl	8000f88 <ConsoleIoSendString>
		}
	}
}
 800082c:	bf00      	nop
 800082e:	3718      	adds	r7, #24
 8000830:	46bd      	mov	sp, r7
 8000832:	bd80      	pop	{r7, pc}
 8000834:	2000017c 	.word	0x2000017c
 8000838:	2000007c 	.word	0x2000007c
 800083c:	20000180 	.word	0x20000180
 8000840:	08005804 	.word	0x08005804
 8000844:	0800580c 	.word	0x0800580c
 8000848:	080057fc 	.word	0x080057fc
 800084c:	08005814 	.word	0x08005814
 8000850:	08005800 	.word	0x08005800

08000854 <ConsoleParamFindN>:

// ConsoleParamFindN
// Find the start location of the nth parametr in the buffer where the command itself is parameter 0
static eCommandResult_T ConsoleParamFindN(const char * buffer, const uint8_t parameterNumber, uint32_t *startLocation)
{
 8000854:	b480      	push	{r7}
 8000856:	b089      	sub	sp, #36	; 0x24
 8000858:	af00      	add	r7, sp, #0
 800085a:	60f8      	str	r0, [r7, #12]
 800085c:	460b      	mov	r3, r1
 800085e:	607a      	str	r2, [r7, #4]
 8000860:	72fb      	strb	r3, [r7, #11]
	uint32_t bufferIndex = 0;
 8000862:	2300      	movs	r3, #0
 8000864:	61fb      	str	r3, [r7, #28]
	uint32_t parameterIndex = 0;
 8000866:	2300      	movs	r3, #0
 8000868:	61bb      	str	r3, [r7, #24]
	eCommandResult_T result = COMMAND_SUCCESS;
 800086a:	2300      	movs	r3, #0
 800086c:	75fb      	strb	r3, [r7, #23]


	while ( ( parameterNumber != parameterIndex ) && ( bufferIndex < CONSOLE_COMMAND_MAX_LENGTH ) )
 800086e:	e00b      	b.n	8000888 <ConsoleParamFindN+0x34>
	{
		if ( PARAMETER_SEPARATER == buffer[bufferIndex] )
 8000870:	68fa      	ldr	r2, [r7, #12]
 8000872:	69fb      	ldr	r3, [r7, #28]
 8000874:	4413      	add	r3, r2
 8000876:	781b      	ldrb	r3, [r3, #0]
 8000878:	2b20      	cmp	r3, #32
 800087a:	d102      	bne.n	8000882 <ConsoleParamFindN+0x2e>
		{
			parameterIndex++;
 800087c:	69bb      	ldr	r3, [r7, #24]
 800087e:	3301      	adds	r3, #1
 8000880:	61bb      	str	r3, [r7, #24]
		}
		bufferIndex++;
 8000882:	69fb      	ldr	r3, [r7, #28]
 8000884:	3301      	adds	r3, #1
 8000886:	61fb      	str	r3, [r7, #28]
	while ( ( parameterNumber != parameterIndex ) && ( bufferIndex < CONSOLE_COMMAND_MAX_LENGTH ) )
 8000888:	7afb      	ldrb	r3, [r7, #11]
 800088a:	69ba      	ldr	r2, [r7, #24]
 800088c:	429a      	cmp	r2, r3
 800088e:	d002      	beq.n	8000896 <ConsoleParamFindN+0x42>
 8000890:	69fb      	ldr	r3, [r7, #28]
 8000892:	2bff      	cmp	r3, #255	; 0xff
 8000894:	d9ec      	bls.n	8000870 <ConsoleParamFindN+0x1c>
	}
	if  ( CONSOLE_COMMAND_MAX_LENGTH == bufferIndex )
 8000896:	69fb      	ldr	r3, [r7, #28]
 8000898:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800089c:	d102      	bne.n	80008a4 <ConsoleParamFindN+0x50>
	{
		result = COMMAND_PARAMETER_ERROR;
 800089e:	2310      	movs	r3, #16
 80008a0:	75fb      	strb	r3, [r7, #23]
 80008a2:	e002      	b.n	80008aa <ConsoleParamFindN+0x56>
	}
	else
	{
		*startLocation = bufferIndex;
 80008a4:	687b      	ldr	r3, [r7, #4]
 80008a6:	69fa      	ldr	r2, [r7, #28]
 80008a8:	601a      	str	r2, [r3, #0]
	}
	return result;
 80008aa:	7dfb      	ldrb	r3, [r7, #23]
}
 80008ac:	4618      	mov	r0, r3
 80008ae:	3724      	adds	r7, #36	; 0x24
 80008b0:	46bd      	mov	sp, r7
 80008b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b6:	4770      	bx	lr

080008b8 <ConsoleReceiveParamInt16>:
// ConsoleReceiveParamInt16
// Identify and obtain a parameter of type int16_t, sent in in decimal, possibly with a negative sign.
// Note that this uses atoi, a somewhat costly function. You may want to replace it, see ConsoleReceiveParamHexUint16
// for some ideas on how to do that.
eCommandResult_T ConsoleReceiveParamInt16(const char * buffer, const uint8_t parameterNumber, int16_t* parameterInt)
{
 80008b8:	b580      	push	{r7, lr}
 80008ba:	b08a      	sub	sp, #40	; 0x28
 80008bc:	af00      	add	r7, sp, #0
 80008be:	60f8      	str	r0, [r7, #12]
 80008c0:	460b      	mov	r3, r1
 80008c2:	607a      	str	r2, [r7, #4]
 80008c4:	72fb      	strb	r3, [r7, #11]
	uint32_t startIndex = 0;
 80008c6:	2300      	movs	r3, #0
 80008c8:	61fb      	str	r3, [r7, #28]
	uint32_t i;
	eCommandResult_T result;
	char charVal;
	char str[INT16_MAX_STR_LENGTH];

	result = ConsoleParamFindN(buffer, parameterNumber, &startIndex);
 80008ca:	f107 021c 	add.w	r2, r7, #28
 80008ce:	7afb      	ldrb	r3, [r7, #11]
 80008d0:	4619      	mov	r1, r3
 80008d2:	68f8      	ldr	r0, [r7, #12]
 80008d4:	f7ff ffbe 	bl	8000854 <ConsoleParamFindN>
 80008d8:	4603      	mov	r3, r0
 80008da:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

	i = 0;
 80008de:	2300      	movs	r3, #0
 80008e0:	627b      	str	r3, [r7, #36]	; 0x24
	charVal = buffer[startIndex + i];
 80008e2:	69fa      	ldr	r2, [r7, #28]
 80008e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008e6:	4413      	add	r3, r2
 80008e8:	68fa      	ldr	r2, [r7, #12]
 80008ea:	4413      	add	r3, r2
 80008ec:	781b      	ldrb	r3, [r3, #0]
 80008ee:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
	while ( ( LF_CHAR != charVal ) && ( CR_CHAR != charVal )
 80008f2:	e011      	b.n	8000918 <ConsoleReceiveParamInt16+0x60>
			&& ( PARAMETER_SEPARATER != charVal )
		&& ( i < INT16_MAX_STR_LENGTH ) )
	{
		str[i] = charVal;					// copy the relevant part
 80008f4:	f107 0214 	add.w	r2, r7, #20
 80008f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008fa:	4413      	add	r3, r2
 80008fc:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8000900:	701a      	strb	r2, [r3, #0]
		i++;
 8000902:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000904:	3301      	adds	r3, #1
 8000906:	627b      	str	r3, [r7, #36]	; 0x24
		charVal = buffer[startIndex + i];
 8000908:	69fa      	ldr	r2, [r7, #28]
 800090a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800090c:	4413      	add	r3, r2
 800090e:	68fa      	ldr	r2, [r7, #12]
 8000910:	4413      	add	r3, r2
 8000912:	781b      	ldrb	r3, [r3, #0]
 8000914:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
		&& ( i < INT16_MAX_STR_LENGTH ) )
 8000918:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800091c:	2b0a      	cmp	r3, #10
 800091e:	d00a      	beq.n	8000936 <ConsoleReceiveParamInt16+0x7e>
	while ( ( LF_CHAR != charVal ) && ( CR_CHAR != charVal )
 8000920:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8000924:	2b0d      	cmp	r3, #13
 8000926:	d006      	beq.n	8000936 <ConsoleReceiveParamInt16+0x7e>
			&& ( PARAMETER_SEPARATER != charVal )
 8000928:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800092c:	2b20      	cmp	r3, #32
 800092e:	d002      	beq.n	8000936 <ConsoleReceiveParamInt16+0x7e>
		&& ( i < INT16_MAX_STR_LENGTH ) )
 8000930:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000932:	2b07      	cmp	r3, #7
 8000934:	d9de      	bls.n	80008f4 <ConsoleReceiveParamInt16+0x3c>
	}
	if ( i == INT16_MAX_STR_LENGTH)
 8000936:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000938:	2b08      	cmp	r3, #8
 800093a:	d102      	bne.n	8000942 <ConsoleReceiveParamInt16+0x8a>
	{
		result = COMMAND_PARAMETER_ERROR;
 800093c:	2310      	movs	r3, #16
 800093e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	}
	if ( COMMAND_SUCCESS == result )
 8000942:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000946:	2b00      	cmp	r3, #0
 8000948:	d10e      	bne.n	8000968 <ConsoleReceiveParamInt16+0xb0>
	{
		str[i] = NULL_CHAR;
 800094a:	f107 0214 	add.w	r2, r7, #20
 800094e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000950:	4413      	add	r3, r2
 8000952:	2200      	movs	r2, #0
 8000954:	701a      	strb	r2, [r3, #0]
		*parameterInt = atoi(str);
 8000956:	f107 0314 	add.w	r3, r7, #20
 800095a:	4618      	mov	r0, r3
 800095c:	f004 fe62 	bl	8005624 <atoi>
 8000960:	4603      	mov	r3, r0
 8000962:	b21a      	sxth	r2, r3
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	801a      	strh	r2, [r3, #0]
	}
	return result;
 8000968:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 800096c:	4618      	mov	r0, r3
 800096e:	3728      	adds	r7, #40	; 0x28
 8000970:	46bd      	mov	sp, r7
 8000972:	bd80      	pop	{r7, pc}

08000974 <ConsoleReceiveParamHexUint16>:

// ConsoleReceiveParamHexUint16
// Identify and obtain a parameter of type uint16, sent in as hex. This parses the number and does not use
// a library function to do it.
eCommandResult_T ConsoleReceiveParamHexUint16(const char * buffer, const uint8_t parameterNumber, uint16_t* parameterUint16)
{
 8000974:	b580      	push	{r7, lr}
 8000976:	b08a      	sub	sp, #40	; 0x28
 8000978:	af00      	add	r7, sp, #0
 800097a:	60f8      	str	r0, [r7, #12]
 800097c:	460b      	mov	r3, r1
 800097e:	607a      	str	r2, [r7, #4]
 8000980:	72fb      	strb	r3, [r7, #11]
	uint32_t startIndex = 0;
 8000982:	2300      	movs	r3, #0
 8000984:	61bb      	str	r3, [r7, #24]
	uint16_t value = 0;
 8000986:	2300      	movs	r3, #0
 8000988:	84fb      	strh	r3, [r7, #38]	; 0x26
	uint32_t i;
	eCommandResult_T result;
	uint8_t tmpUint8;

	result = ConsoleParamFindN(buffer, parameterNumber, &startIndex);
 800098a:	f107 0218 	add.w	r2, r7, #24
 800098e:	7afb      	ldrb	r3, [r7, #11]
 8000990:	4619      	mov	r1, r3
 8000992:	68f8      	ldr	r0, [r7, #12]
 8000994:	f7ff ff5e 	bl	8000854 <ConsoleParamFindN>
 8000998:	4603      	mov	r3, r0
 800099a:	77fb      	strb	r3, [r7, #31]
	if ( COMMAND_SUCCESS == result )
 800099c:	7ffb      	ldrb	r3, [r7, #31]
 800099e:	2b00      	cmp	r3, #0
 80009a0:	d12c      	bne.n	80009fc <ConsoleReceiveParamHexUint16+0x88>
	{
		// bufferIndex points to start of integer
		// next separator or newline or NULL indicates end of parameter
		for ( i = 0u ; i < 4u ; i ++)   // U16 must be less than 4 hex digits: 0xFFFF
 80009a2:	2300      	movs	r3, #0
 80009a4:	623b      	str	r3, [r7, #32]
 80009a6:	e01e      	b.n	80009e6 <ConsoleReceiveParamHexUint16+0x72>
		{
			if ( COMMAND_SUCCESS == result )
 80009a8:	7ffb      	ldrb	r3, [r7, #31]
 80009aa:	2b00      	cmp	r3, #0
 80009ac:	d10d      	bne.n	80009ca <ConsoleReceiveParamHexUint16+0x56>
			{
				result = ConsoleUtilHexCharToInt(buffer[startIndex + i], &tmpUint8);
 80009ae:	69ba      	ldr	r2, [r7, #24]
 80009b0:	6a3b      	ldr	r3, [r7, #32]
 80009b2:	4413      	add	r3, r2
 80009b4:	68fa      	ldr	r2, [r7, #12]
 80009b6:	4413      	add	r3, r2
 80009b8:	781b      	ldrb	r3, [r3, #0]
 80009ba:	f107 0217 	add.w	r2, r7, #23
 80009be:	4611      	mov	r1, r2
 80009c0:	4618      	mov	r0, r3
 80009c2:	f000 f8c5 	bl	8000b50 <ConsoleUtilHexCharToInt>
 80009c6:	4603      	mov	r3, r0
 80009c8:	77fb      	strb	r3, [r7, #31]
			}
			if ( COMMAND_SUCCESS == result )
 80009ca:	7ffb      	ldrb	r3, [r7, #31]
 80009cc:	2b00      	cmp	r3, #0
 80009ce:	d107      	bne.n	80009e0 <ConsoleReceiveParamHexUint16+0x6c>
			{
				value = (value << 4u);
 80009d0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80009d2:	011b      	lsls	r3, r3, #4
 80009d4:	84fb      	strh	r3, [r7, #38]	; 0x26
				value += tmpUint8;
 80009d6:	7dfb      	ldrb	r3, [r7, #23]
 80009d8:	b29a      	uxth	r2, r3
 80009da:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80009dc:	4413      	add	r3, r2
 80009de:	84fb      	strh	r3, [r7, #38]	; 0x26
		for ( i = 0u ; i < 4u ; i ++)   // U16 must be less than 4 hex digits: 0xFFFF
 80009e0:	6a3b      	ldr	r3, [r7, #32]
 80009e2:	3301      	adds	r3, #1
 80009e4:	623b      	str	r3, [r7, #32]
 80009e6:	6a3b      	ldr	r3, [r7, #32]
 80009e8:	2b03      	cmp	r3, #3
 80009ea:	d9dd      	bls.n	80009a8 <ConsoleReceiveParamHexUint16+0x34>
			}
		}
		if  ( COMMAND_PARAMETER_END == result )
 80009ec:	7ffb      	ldrb	r3, [r7, #31]
 80009ee:	2b11      	cmp	r3, #17
 80009f0:	d101      	bne.n	80009f6 <ConsoleReceiveParamHexUint16+0x82>
		{
			result = COMMAND_SUCCESS;
 80009f2:	2300      	movs	r3, #0
 80009f4:	77fb      	strb	r3, [r7, #31]
		}
		*parameterUint16 = value;
 80009f6:	687b      	ldr	r3, [r7, #4]
 80009f8:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80009fa:	801a      	strh	r2, [r3, #0]
	}
	return result;
 80009fc:	7ffb      	ldrb	r3, [r7, #31]
}
 80009fe:	4618      	mov	r0, r3
 8000a00:	3728      	adds	r7, #40	; 0x28
 8000a02:	46bd      	mov	sp, r7
 8000a04:	bd80      	pop	{r7, pc}

08000a06 <ConsoleSendParamHexUint16>:
// ConsoleSendParamHexUint16
// Send a parameter of type uint16 as hex.
// This does not use a library function to do it (though you could
// do itoa (parameterUint16, out, 16);  instead of building it up
eCommandResult_T ConsoleSendParamHexUint16(uint16_t parameterUint16)
{
 8000a06:	b580      	push	{r7, lr}
 8000a08:	b086      	sub	sp, #24
 8000a0a:	af00      	add	r7, sp, #0
 8000a0c:	4603      	mov	r3, r0
 8000a0e:	80fb      	strh	r3, [r7, #6]
	uint32_t i;
	char out[4u + 1u];  // U16 must be less than 4 hex digits: 0xFFFF, end buffer with a NULL
	eCommandResult_T result = COMMAND_SUCCESS;
 8000a10:	2300      	movs	r3, #0
 8000a12:	74fb      	strb	r3, [r7, #19]
	uint8_t tmpUint8;

	for ( i = 0u ; i < 4u ; i ++)   // U16 must be less than 4 hex digits: 0xFFFF
 8000a14:	2300      	movs	r3, #0
 8000a16:	617b      	str	r3, [r7, #20]
 8000a18:	e01b      	b.n	8000a52 <ConsoleSendParamHexUint16+0x4c>
	{
		if ( COMMAND_SUCCESS == result )
 8000a1a:	7cfb      	ldrb	r3, [r7, #19]
 8000a1c:	2b00      	cmp	r3, #0
 8000a1e:	d115      	bne.n	8000a4c <ConsoleSendParamHexUint16+0x46>
		{
			tmpUint8 = ( parameterUint16 >> (12u - (i*4u)) & 0xF);
 8000a20:	88fa      	ldrh	r2, [r7, #6]
 8000a22:	697b      	ldr	r3, [r7, #20]
 8000a24:	f1c3 0303 	rsb	r3, r3, #3
 8000a28:	009b      	lsls	r3, r3, #2
 8000a2a:	fa42 f303 	asr.w	r3, r2, r3
 8000a2e:	b2db      	uxtb	r3, r3
 8000a30:	f003 030f 	and.w	r3, r3, #15
 8000a34:	74bb      	strb	r3, [r7, #18]
			result = ConsoleUtilsIntToHexChar(tmpUint8, &(out[i]));
 8000a36:	f107 020c 	add.w	r2, r7, #12
 8000a3a:	697b      	ldr	r3, [r7, #20]
 8000a3c:	441a      	add	r2, r3
 8000a3e:	7cbb      	ldrb	r3, [r7, #18]
 8000a40:	4611      	mov	r1, r2
 8000a42:	4618      	mov	r0, r3
 8000a44:	f000 f8c5 	bl	8000bd2 <ConsoleUtilsIntToHexChar>
 8000a48:	4603      	mov	r3, r0
 8000a4a:	74fb      	strb	r3, [r7, #19]
	for ( i = 0u ; i < 4u ; i ++)   // U16 must be less than 4 hex digits: 0xFFFF
 8000a4c:	697b      	ldr	r3, [r7, #20]
 8000a4e:	3301      	adds	r3, #1
 8000a50:	617b      	str	r3, [r7, #20]
 8000a52:	697b      	ldr	r3, [r7, #20]
 8000a54:	2b03      	cmp	r3, #3
 8000a56:	d9e0      	bls.n	8000a1a <ConsoleSendParamHexUint16+0x14>
		}
	}
	out[i] = NULL_CHAR;
 8000a58:	f107 020c 	add.w	r2, r7, #12
 8000a5c:	697b      	ldr	r3, [r7, #20]
 8000a5e:	4413      	add	r3, r2
 8000a60:	2200      	movs	r2, #0
 8000a62:	701a      	strb	r2, [r3, #0]
	ConsoleIoSendString(out);
 8000a64:	f107 030c 	add.w	r3, r7, #12
 8000a68:	4618      	mov	r0, r3
 8000a6a:	f000 fa8d 	bl	8000f88 <ConsoleIoSendString>

	return COMMAND_SUCCESS;
 8000a6e:	2300      	movs	r3, #0
}
 8000a70:	4618      	mov	r0, r3
 8000a72:	3718      	adds	r7, #24
 8000a74:	46bd      	mov	sp, r7
 8000a76:	bd80      	pop	{r7, pc}

08000a78 <smallItoa>:
#if CONSOLE_USE_BUILTIN_ITOA
#define itoa smallItoa
// The C library itoa is sometimes a complicated function and the library costs aren't worth it
// so this is implements the parts of the function needed for console.
static void smallItoa(int in, char* outBuffer, int radix)
{
 8000a78:	b480      	push	{r7}
 8000a7a:	b089      	sub	sp, #36	; 0x24
 8000a7c:	af00      	add	r7, sp, #0
 8000a7e:	60f8      	str	r0, [r7, #12]
 8000a80:	60b9      	str	r1, [r7, #8]
 8000a82:	607a      	str	r2, [r7, #4]
	bool isNegative = false;
 8000a84:	2300      	movs	r3, #0
 8000a86:	77fb      	strb	r3, [r7, #31]
	int tmpIn;
	int stringLen = 1u; // it will be at least as long as the NULL character
 8000a88:	2301      	movs	r3, #1
 8000a8a:	617b      	str	r3, [r7, #20]

	if (in < 0) {
 8000a8c:	68fb      	ldr	r3, [r7, #12]
 8000a8e:	2b00      	cmp	r3, #0
 8000a90:	da07      	bge.n	8000aa2 <smallItoa+0x2a>
		isNegative = true;
 8000a92:	2301      	movs	r3, #1
 8000a94:	77fb      	strb	r3, [r7, #31]
		in = -in;
 8000a96:	68fb      	ldr	r3, [r7, #12]
 8000a98:	425b      	negs	r3, r3
 8000a9a:	60fb      	str	r3, [r7, #12]
		stringLen++;
 8000a9c:	697b      	ldr	r3, [r7, #20]
 8000a9e:	3301      	adds	r3, #1
 8000aa0:	617b      	str	r3, [r7, #20]
	}

	tmpIn = in;
 8000aa2:	68fb      	ldr	r3, [r7, #12]
 8000aa4:	61bb      	str	r3, [r7, #24]
	while ((int)tmpIn/radix != 0) {
 8000aa6:	e007      	b.n	8000ab8 <smallItoa+0x40>
		tmpIn = (int)tmpIn/radix;
 8000aa8:	69ba      	ldr	r2, [r7, #24]
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	fb92 f3f3 	sdiv	r3, r2, r3
 8000ab0:	61bb      	str	r3, [r7, #24]
		stringLen++;
 8000ab2:	697b      	ldr	r3, [r7, #20]
 8000ab4:	3301      	adds	r3, #1
 8000ab6:	617b      	str	r3, [r7, #20]
	while ((int)tmpIn/radix != 0) {
 8000ab8:	69ba      	ldr	r2, [r7, #24]
 8000aba:	687b      	ldr	r3, [r7, #4]
 8000abc:	fb92 f3f3 	sdiv	r3, r2, r3
 8000ac0:	2b00      	cmp	r3, #0
 8000ac2:	d1f1      	bne.n	8000aa8 <smallItoa+0x30>
	}
    
    // Now fill it in backwards, starting with the NULL at the end
    *(outBuffer + stringLen) = NULL_CHAR;
 8000ac4:	697b      	ldr	r3, [r7, #20]
 8000ac6:	68ba      	ldr	r2, [r7, #8]
 8000ac8:	4413      	add	r3, r2
 8000aca:	2200      	movs	r2, #0
 8000acc:	701a      	strb	r2, [r3, #0]
    stringLen--;
 8000ace:	697b      	ldr	r3, [r7, #20]
 8000ad0:	3b01      	subs	r3, #1
 8000ad2:	617b      	str	r3, [r7, #20]

	tmpIn = in;
 8000ad4:	68fb      	ldr	r3, [r7, #12]
 8000ad6:	61bb      	str	r3, [r7, #24]
	do {
		*(outBuffer+stringLen) = (tmpIn%radix)+'0';
 8000ad8:	69bb      	ldr	r3, [r7, #24]
 8000ada:	687a      	ldr	r2, [r7, #4]
 8000adc:	fb93 f2f2 	sdiv	r2, r3, r2
 8000ae0:	6879      	ldr	r1, [r7, #4]
 8000ae2:	fb01 f202 	mul.w	r2, r1, r2
 8000ae6:	1a9b      	subs	r3, r3, r2
 8000ae8:	b2da      	uxtb	r2, r3
 8000aea:	697b      	ldr	r3, [r7, #20]
 8000aec:	68b9      	ldr	r1, [r7, #8]
 8000aee:	440b      	add	r3, r1
 8000af0:	3230      	adds	r2, #48	; 0x30
 8000af2:	b2d2      	uxtb	r2, r2
 8000af4:	701a      	strb	r2, [r3, #0]
		tmpIn = (int) tmpIn / radix;
 8000af6:	69ba      	ldr	r2, [r7, #24]
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	fb92 f3f3 	sdiv	r3, r2, r3
 8000afe:	61bb      	str	r3, [r7, #24]
	} while(stringLen--);
 8000b00:	697b      	ldr	r3, [r7, #20]
 8000b02:	1e5a      	subs	r2, r3, #1
 8000b04:	617a      	str	r2, [r7, #20]
 8000b06:	2b00      	cmp	r3, #0
 8000b08:	d1e6      	bne.n	8000ad8 <smallItoa+0x60>

	if (isNegative) {
 8000b0a:	7ffb      	ldrb	r3, [r7, #31]
 8000b0c:	2b00      	cmp	r3, #0
 8000b0e:	d002      	beq.n	8000b16 <smallItoa+0x9e>
		*(outBuffer) = '-';
 8000b10:	68bb      	ldr	r3, [r7, #8]
 8000b12:	222d      	movs	r2, #45	; 0x2d
 8000b14:	701a      	strb	r2, [r3, #0]
	}
}
 8000b16:	bf00      	nop
 8000b18:	3724      	adds	r7, #36	; 0x24
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b20:	4770      	bx	lr

08000b22 <ConsoleSendParamInt16>:

// ConsoleSendParamInt16
// Send a parameter of type int16 using the (unsafe) C library function
// itoa to translate from integer to string.
eCommandResult_T ConsoleSendParamInt16(int16_t parameterInt)
{
 8000b22:	b580      	push	{r7, lr}
 8000b24:	b084      	sub	sp, #16
 8000b26:	af00      	add	r7, sp, #0
 8000b28:	4603      	mov	r3, r0
 8000b2a:	80fb      	strh	r3, [r7, #6]
	char out[INT16_MAX_STR_LENGTH];
//	memset(out, 0, INT16_MAX_STR_LENGTH);

	itoa (parameterInt, out, 10);
 8000b2c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000b30:	f107 0108 	add.w	r1, r7, #8
 8000b34:	220a      	movs	r2, #10
 8000b36:	4618      	mov	r0, r3
 8000b38:	f7ff ff9e 	bl	8000a78 <smallItoa>
	ConsoleIoSendString(out);
 8000b3c:	f107 0308 	add.w	r3, r7, #8
 8000b40:	4618      	mov	r0, r3
 8000b42:	f000 fa21 	bl	8000f88 <ConsoleIoSendString>

	return COMMAND_SUCCESS;
 8000b46:	2300      	movs	r3, #0
}
 8000b48:	4618      	mov	r0, r3
 8000b4a:	3710      	adds	r7, #16
 8000b4c:	46bd      	mov	sp, r7
 8000b4e:	bd80      	pop	{r7, pc}

08000b50 <ConsoleUtilHexCharToInt>:
	return COMMAND_SUCCESS;
}
// ConsoleUtilHexCharToInt
// Converts a single hex character (0-9,A-F) to an integer (0-15)
static eCommandResult_T ConsoleUtilHexCharToInt(char charVal, uint8_t* pInt)
{
 8000b50:	b480      	push	{r7}
 8000b52:	b085      	sub	sp, #20
 8000b54:	af00      	add	r7, sp, #0
 8000b56:	4603      	mov	r3, r0
 8000b58:	6039      	str	r1, [r7, #0]
 8000b5a:	71fb      	strb	r3, [r7, #7]
    eCommandResult_T result = COMMAND_SUCCESS;
 8000b5c:	2300      	movs	r3, #0
 8000b5e:	73fb      	strb	r3, [r7, #15]

    if ( ( '0' <= charVal ) && ( charVal <= '9' ) )
 8000b60:	79fb      	ldrb	r3, [r7, #7]
 8000b62:	2b2f      	cmp	r3, #47	; 0x2f
 8000b64:	d908      	bls.n	8000b78 <ConsoleUtilHexCharToInt+0x28>
 8000b66:	79fb      	ldrb	r3, [r7, #7]
 8000b68:	2b39      	cmp	r3, #57	; 0x39
 8000b6a:	d805      	bhi.n	8000b78 <ConsoleUtilHexCharToInt+0x28>
    {
        *pInt = charVal - '0';
 8000b6c:	79fb      	ldrb	r3, [r7, #7]
 8000b6e:	3b30      	subs	r3, #48	; 0x30
 8000b70:	b2da      	uxtb	r2, r3
 8000b72:	683b      	ldr	r3, [r7, #0]
 8000b74:	701a      	strb	r2, [r3, #0]
 8000b76:	e025      	b.n	8000bc4 <ConsoleUtilHexCharToInt+0x74>
    }
    else if ( ( 'A' <= charVal ) && ( charVal <= 'F' ) )
 8000b78:	79fb      	ldrb	r3, [r7, #7]
 8000b7a:	2b40      	cmp	r3, #64	; 0x40
 8000b7c:	d908      	bls.n	8000b90 <ConsoleUtilHexCharToInt+0x40>
 8000b7e:	79fb      	ldrb	r3, [r7, #7]
 8000b80:	2b46      	cmp	r3, #70	; 0x46
 8000b82:	d805      	bhi.n	8000b90 <ConsoleUtilHexCharToInt+0x40>
    {
        *pInt = 10u + charVal - 'A';
 8000b84:	79fb      	ldrb	r3, [r7, #7]
 8000b86:	3b37      	subs	r3, #55	; 0x37
 8000b88:	b2da      	uxtb	r2, r3
 8000b8a:	683b      	ldr	r3, [r7, #0]
 8000b8c:	701a      	strb	r2, [r3, #0]
 8000b8e:	e019      	b.n	8000bc4 <ConsoleUtilHexCharToInt+0x74>
    }
    else if( ( 'a' <= charVal ) && ( charVal <= 'f' ) )
 8000b90:	79fb      	ldrb	r3, [r7, #7]
 8000b92:	2b60      	cmp	r3, #96	; 0x60
 8000b94:	d908      	bls.n	8000ba8 <ConsoleUtilHexCharToInt+0x58>
 8000b96:	79fb      	ldrb	r3, [r7, #7]
 8000b98:	2b66      	cmp	r3, #102	; 0x66
 8000b9a:	d805      	bhi.n	8000ba8 <ConsoleUtilHexCharToInt+0x58>
    {
        *pInt = 10u + charVal - 'a';
 8000b9c:	79fb      	ldrb	r3, [r7, #7]
 8000b9e:	3b57      	subs	r3, #87	; 0x57
 8000ba0:	b2da      	uxtb	r2, r3
 8000ba2:	683b      	ldr	r3, [r7, #0]
 8000ba4:	701a      	strb	r2, [r3, #0]
 8000ba6:	e00d      	b.n	8000bc4 <ConsoleUtilHexCharToInt+0x74>
    }
	else if ( ( LF_CHAR != charVal ) || ( CR_CHAR != charVal )
 8000ba8:	79fb      	ldrb	r3, [r7, #7]
 8000baa:	2b0a      	cmp	r3, #10
 8000bac:	d105      	bne.n	8000bba <ConsoleUtilHexCharToInt+0x6a>
 8000bae:	79fb      	ldrb	r3, [r7, #7]
 8000bb0:	2b0d      	cmp	r3, #13
 8000bb2:	d102      	bne.n	8000bba <ConsoleUtilHexCharToInt+0x6a>
			|| ( PARAMETER_SEPARATER == charVal ) )
 8000bb4:	79fb      	ldrb	r3, [r7, #7]
 8000bb6:	2b20      	cmp	r3, #32
 8000bb8:	d102      	bne.n	8000bc0 <ConsoleUtilHexCharToInt+0x70>
	{
		result = COMMAND_PARAMETER_END;
 8000bba:	2311      	movs	r3, #17
 8000bbc:	73fb      	strb	r3, [r7, #15]
 8000bbe:	e001      	b.n	8000bc4 <ConsoleUtilHexCharToInt+0x74>

	}
    else
    {
        result = COMMAND_PARAMETER_ERROR;
 8000bc0:	2310      	movs	r3, #16
 8000bc2:	73fb      	strb	r3, [r7, #15]
    }

    return result;
 8000bc4:	7bfb      	ldrb	r3, [r7, #15]
}
 8000bc6:	4618      	mov	r0, r3
 8000bc8:	3714      	adds	r7, #20
 8000bca:	46bd      	mov	sp, r7
 8000bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd0:	4770      	bx	lr

08000bd2 <ConsoleUtilsIntToHexChar>:
// ConsoleUtilsIntToHexChar
// Converts an integer nibble (0-15) to a hex character (0-9,A-F)
static eCommandResult_T ConsoleUtilsIntToHexChar(uint8_t intVal, char* pChar)
{
 8000bd2:	b480      	push	{r7}
 8000bd4:	b085      	sub	sp, #20
 8000bd6:	af00      	add	r7, sp, #0
 8000bd8:	4603      	mov	r3, r0
 8000bda:	6039      	str	r1, [r7, #0]
 8000bdc:	71fb      	strb	r3, [r7, #7]
    eCommandResult_T result = COMMAND_SUCCESS;
 8000bde:	2300      	movs	r3, #0
 8000be0:	73fb      	strb	r3, [r7, #15]

    if ( intVal <= 9u )
 8000be2:	79fb      	ldrb	r3, [r7, #7]
 8000be4:	2b09      	cmp	r3, #9
 8000be6:	d805      	bhi.n	8000bf4 <ConsoleUtilsIntToHexChar+0x22>
    {
        *pChar = intVal + '0';
 8000be8:	79fb      	ldrb	r3, [r7, #7]
 8000bea:	3330      	adds	r3, #48	; 0x30
 8000bec:	b2da      	uxtb	r2, r3
 8000bee:	683b      	ldr	r3, [r7, #0]
 8000bf0:	701a      	strb	r2, [r3, #0]
 8000bf2:	e00d      	b.n	8000c10 <ConsoleUtilsIntToHexChar+0x3e>
    }
    else if ( ( 10u <= intVal ) && ( intVal <= 15u ) )
 8000bf4:	79fb      	ldrb	r3, [r7, #7]
 8000bf6:	2b09      	cmp	r3, #9
 8000bf8:	d908      	bls.n	8000c0c <ConsoleUtilsIntToHexChar+0x3a>
 8000bfa:	79fb      	ldrb	r3, [r7, #7]
 8000bfc:	2b0f      	cmp	r3, #15
 8000bfe:	d805      	bhi.n	8000c0c <ConsoleUtilsIntToHexChar+0x3a>
    {
        *pChar = intVal - 10u + 'A';
 8000c00:	79fb      	ldrb	r3, [r7, #7]
 8000c02:	3337      	adds	r3, #55	; 0x37
 8000c04:	b2da      	uxtb	r2, r3
 8000c06:	683b      	ldr	r3, [r7, #0]
 8000c08:	701a      	strb	r2, [r3, #0]
 8000c0a:	e001      	b.n	8000c10 <ConsoleUtilsIntToHexChar+0x3e>
    }
    else
    {
        result = COMMAND_PARAMETER_ERROR;
 8000c0c:	2310      	movs	r3, #16
 8000c0e:	73fb      	strb	r3, [r7, #15]
    }

    return result;
 8000c10:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c12:	4618      	mov	r0, r3
 8000c14:	3714      	adds	r7, #20
 8000c16:	46bd      	mov	sp, r7
 8000c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c1c:	4770      	bx	lr

08000c1e <ConsoleCommandComment>:
	{"buts",&ConsoleCommandButtonState, HELP("Prints the present state of the Blue user button")},
	CONSOLE_COMMAND_TABLE_END // must be LAST
};

static eCommandResult_T ConsoleCommandComment(const char buffer[])
{
 8000c1e:	b480      	push	{r7}
 8000c20:	b083      	sub	sp, #12
 8000c22:	af00      	add	r7, sp, #0
 8000c24:	6078      	str	r0, [r7, #4]
	// do nothing
	IGNORE_UNUSED_VARIABLE(buffer);
	return COMMAND_SUCCESS;
 8000c26:	2300      	movs	r3, #0
}
 8000c28:	4618      	mov	r0, r3
 8000c2a:	370c      	adds	r7, #12
 8000c2c:	46bd      	mov	sp, r7
 8000c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c32:	4770      	bx	lr

08000c34 <ConsoleCommandHelp>:

static eCommandResult_T ConsoleCommandHelp(const char buffer[])
{
 8000c34:	b580      	push	{r7, lr}
 8000c36:	b086      	sub	sp, #24
 8000c38:	af00      	add	r7, sp, #0
 8000c3a:	6078      	str	r0, [r7, #4]
	uint32_t i;
	uint32_t tableLength;
	eCommandResult_T result = COMMAND_SUCCESS;
 8000c3c:	2300      	movs	r3, #0
 8000c3e:	74fb      	strb	r3, [r7, #19]

    IGNORE_UNUSED_VARIABLE(buffer);

	tableLength = sizeof(mConsoleCommandTable) / sizeof(mConsoleCommandTable[0]);
 8000c40:	230b      	movs	r3, #11
 8000c42:	60fb      	str	r3, [r7, #12]
	for ( i = 0u ; i < tableLength - 1u ; i++ )
 8000c44:	2300      	movs	r3, #0
 8000c46:	617b      	str	r3, [r7, #20]
 8000c48:	e01e      	b.n	8000c88 <ConsoleCommandHelp+0x54>
	{
		ConsoleIoSendString(mConsoleCommandTable[i].name);
 8000c4a:	4914      	ldr	r1, [pc, #80]	; (8000c9c <ConsoleCommandHelp+0x68>)
 8000c4c:	697a      	ldr	r2, [r7, #20]
 8000c4e:	4613      	mov	r3, r2
 8000c50:	00db      	lsls	r3, r3, #3
 8000c52:	4413      	add	r3, r2
 8000c54:	00db      	lsls	r3, r3, #3
 8000c56:	440b      	add	r3, r1
 8000c58:	681b      	ldr	r3, [r3, #0]
 8000c5a:	4618      	mov	r0, r3
 8000c5c:	f000 f994 	bl	8000f88 <ConsoleIoSendString>
#if CONSOLE_COMMAND_MAX_HELP_LENGTH > 0
		ConsoleIoSendString(" : ");
 8000c60:	480f      	ldr	r0, [pc, #60]	; (8000ca0 <ConsoleCommandHelp+0x6c>)
 8000c62:	f000 f991 	bl	8000f88 <ConsoleIoSendString>
		ConsoleIoSendString(mConsoleCommandTable[i].help);
 8000c66:	697a      	ldr	r2, [r7, #20]
 8000c68:	4613      	mov	r3, r2
 8000c6a:	00db      	lsls	r3, r3, #3
 8000c6c:	4413      	add	r3, r2
 8000c6e:	00db      	lsls	r3, r3, #3
 8000c70:	3308      	adds	r3, #8
 8000c72:	4a0a      	ldr	r2, [pc, #40]	; (8000c9c <ConsoleCommandHelp+0x68>)
 8000c74:	4413      	add	r3, r2
 8000c76:	4618      	mov	r0, r3
 8000c78:	f000 f986 	bl	8000f88 <ConsoleIoSendString>
#endif // CONSOLE_COMMAND_MAX_HELP_LENGTH > 0
		ConsoleIoSendString(STR_ENDLINE);
 8000c7c:	4809      	ldr	r0, [pc, #36]	; (8000ca4 <ConsoleCommandHelp+0x70>)
 8000c7e:	f000 f983 	bl	8000f88 <ConsoleIoSendString>
	for ( i = 0u ; i < tableLength - 1u ; i++ )
 8000c82:	697b      	ldr	r3, [r7, #20]
 8000c84:	3301      	adds	r3, #1
 8000c86:	617b      	str	r3, [r7, #20]
 8000c88:	68fb      	ldr	r3, [r7, #12]
 8000c8a:	3b01      	subs	r3, #1
 8000c8c:	697a      	ldr	r2, [r7, #20]
 8000c8e:	429a      	cmp	r2, r3
 8000c90:	d3db      	bcc.n	8000c4a <ConsoleCommandHelp+0x16>
	}
	return result;
 8000c92:	7cfb      	ldrb	r3, [r7, #19]
}
 8000c94:	4618      	mov	r0, r3
 8000c96:	3718      	adds	r7, #24
 8000c98:	46bd      	mov	sp, r7
 8000c9a:	bd80      	pop	{r7, pc}
 8000c9c:	08005978 	.word	0x08005978
 8000ca0:	08005860 	.word	0x08005860
 8000ca4:	08005864 	.word	0x08005864

08000ca8 <ConsoleCommandParamExampleInt16>:

static eCommandResult_T ConsoleCommandParamExampleInt16(const char buffer[])
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	b084      	sub	sp, #16
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	6078      	str	r0, [r7, #4]
	int16_t parameterInt;
	eCommandResult_T result;
	result = ConsoleReceiveParamInt16(buffer, 1, &parameterInt);
 8000cb0:	f107 030c 	add.w	r3, r7, #12
 8000cb4:	461a      	mov	r2, r3
 8000cb6:	2101      	movs	r1, #1
 8000cb8:	6878      	ldr	r0, [r7, #4]
 8000cba:	f7ff fdfd 	bl	80008b8 <ConsoleReceiveParamInt16>
 8000cbe:	4603      	mov	r3, r0
 8000cc0:	73fb      	strb	r3, [r7, #15]
	if ( COMMAND_SUCCESS == result )
 8000cc2:	7bfb      	ldrb	r3, [r7, #15]
 8000cc4:	2b00      	cmp	r3, #0
 8000cc6:	d116      	bne.n	8000cf6 <ConsoleCommandParamExampleInt16+0x4e>
	{
		ConsoleIoSendString("Parameter is ");
 8000cc8:	480d      	ldr	r0, [pc, #52]	; (8000d00 <ConsoleCommandParamExampleInt16+0x58>)
 8000cca:	f000 f95d 	bl	8000f88 <ConsoleIoSendString>
		ConsoleSendParamInt16(parameterInt);
 8000cce:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8000cd2:	4618      	mov	r0, r3
 8000cd4:	f7ff ff25 	bl	8000b22 <ConsoleSendParamInt16>
		ConsoleIoSendString(" (0x");
 8000cd8:	480a      	ldr	r0, [pc, #40]	; (8000d04 <ConsoleCommandParamExampleInt16+0x5c>)
 8000cda:	f000 f955 	bl	8000f88 <ConsoleIoSendString>
		ConsoleSendParamHexUint16((uint16_t)parameterInt);
 8000cde:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8000ce2:	b29b      	uxth	r3, r3
 8000ce4:	4618      	mov	r0, r3
 8000ce6:	f7ff fe8e 	bl	8000a06 <ConsoleSendParamHexUint16>
		ConsoleIoSendString(")");
 8000cea:	4807      	ldr	r0, [pc, #28]	; (8000d08 <ConsoleCommandParamExampleInt16+0x60>)
 8000cec:	f000 f94c 	bl	8000f88 <ConsoleIoSendString>
		ConsoleIoSendString(STR_ENDLINE);
 8000cf0:	4806      	ldr	r0, [pc, #24]	; (8000d0c <ConsoleCommandParamExampleInt16+0x64>)
 8000cf2:	f000 f949 	bl	8000f88 <ConsoleIoSendString>
	}
	return result;
 8000cf6:	7bfb      	ldrb	r3, [r7, #15]
}
 8000cf8:	4618      	mov	r0, r3
 8000cfa:	3710      	adds	r7, #16
 8000cfc:	46bd      	mov	sp, r7
 8000cfe:	bd80      	pop	{r7, pc}
 8000d00:	08005868 	.word	0x08005868
 8000d04:	08005878 	.word	0x08005878
 8000d08:	08005880 	.word	0x08005880
 8000d0c:	08005864 	.word	0x08005864

08000d10 <ConsoleCommandParamExampleHexUint16>:
static eCommandResult_T ConsoleCommandParamExampleHexUint16(const char buffer[])
{
 8000d10:	b580      	push	{r7, lr}
 8000d12:	b084      	sub	sp, #16
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	6078      	str	r0, [r7, #4]
	uint16_t parameterUint16;
	eCommandResult_T result;
	result = ConsoleReceiveParamHexUint16(buffer, 1, &parameterUint16);
 8000d18:	f107 030c 	add.w	r3, r7, #12
 8000d1c:	461a      	mov	r2, r3
 8000d1e:	2101      	movs	r1, #1
 8000d20:	6878      	ldr	r0, [r7, #4]
 8000d22:	f7ff fe27 	bl	8000974 <ConsoleReceiveParamHexUint16>
 8000d26:	4603      	mov	r3, r0
 8000d28:	73fb      	strb	r3, [r7, #15]
	if ( COMMAND_SUCCESS == result )
 8000d2a:	7bfb      	ldrb	r3, [r7, #15]
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	d109      	bne.n	8000d44 <ConsoleCommandParamExampleHexUint16+0x34>
	{
		ConsoleIoSendString("Parameter is 0x");
 8000d30:	4807      	ldr	r0, [pc, #28]	; (8000d50 <ConsoleCommandParamExampleHexUint16+0x40>)
 8000d32:	f000 f929 	bl	8000f88 <ConsoleIoSendString>
		ConsoleSendParamHexUint16(parameterUint16);
 8000d36:	89bb      	ldrh	r3, [r7, #12]
 8000d38:	4618      	mov	r0, r3
 8000d3a:	f7ff fe64 	bl	8000a06 <ConsoleSendParamHexUint16>
		ConsoleIoSendString(STR_ENDLINE);
 8000d3e:	4805      	ldr	r0, [pc, #20]	; (8000d54 <ConsoleCommandParamExampleHexUint16+0x44>)
 8000d40:	f000 f922 	bl	8000f88 <ConsoleIoSendString>
	}
	return result;
 8000d44:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d46:	4618      	mov	r0, r3
 8000d48:	3710      	adds	r7, #16
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	bd80      	pop	{r7, pc}
 8000d4e:	bf00      	nop
 8000d50:	08005884 	.word	0x08005884
 8000d54:	08005864 	.word	0x08005864

08000d58 <ConsoleCommandVer>:

static eCommandResult_T ConsoleCommandVer(const char buffer[])
{
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	b084      	sub	sp, #16
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	6078      	str	r0, [r7, #4]
	eCommandResult_T result = COMMAND_SUCCESS;
 8000d60:	2300      	movs	r3, #0
 8000d62:	73fb      	strb	r3, [r7, #15]
    IGNORE_UNUSED_VARIABLE(buffer);
	ConsoleIoSendString(VERSION_STRING);
 8000d64:	4805      	ldr	r0, [pc, #20]	; (8000d7c <ConsoleCommandVer+0x24>)
 8000d66:	f000 f90f 	bl	8000f88 <ConsoleIoSendString>
	ConsoleIoSendString(STR_ENDLINE);
 8000d6a:	4805      	ldr	r0, [pc, #20]	; (8000d80 <ConsoleCommandVer+0x28>)
 8000d6c:	f000 f90c 	bl	8000f88 <ConsoleIoSendString>
	return result;
 8000d70:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d72:	4618      	mov	r0, r3
 8000d74:	3710      	adds	r7, #16
 8000d76:	46bd      	mov	sp, r7
 8000d78:	bd80      	pop	{r7, pc}
 8000d7a:	bf00      	nop
 8000d7c:	08005894 	.word	0x08005894
 8000d80:	08005864 	.word	0x08005864

08000d84 <ConsoleCommandReadAccelX>:

static eCommandResult_T ConsoleCommandReadAccelX(const char buffer[])
{
 8000d84:	b580      	push	{r7, lr}
 8000d86:	b084      	sub	sp, #16
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	6078      	str	r0, [r7, #4]
	eCommandResult_T result = COMMAND_SUCCESS;
 8000d8c:	2300      	movs	r3, #0
 8000d8e:	73fb      	strb	r3, [r7, #15]
	IGNORE_UNUSED_VARIABLE(buffer);
	ConsoleIoSendString("x = 1");
 8000d90:	4805      	ldr	r0, [pc, #20]	; (8000da8 <ConsoleCommandReadAccelX+0x24>)
 8000d92:	f000 f8f9 	bl	8000f88 <ConsoleIoSendString>
	ConsoleIoSendString(STR_ENDLINE);
 8000d96:	4805      	ldr	r0, [pc, #20]	; (8000dac <ConsoleCommandReadAccelX+0x28>)
 8000d98:	f000 f8f6 	bl	8000f88 <ConsoleIoSendString>
	return result;
 8000d9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d9e:	4618      	mov	r0, r3
 8000da0:	3710      	adds	r7, #16
 8000da2:	46bd      	mov	sp, r7
 8000da4:	bd80      	pop	{r7, pc}
 8000da6:	bf00      	nop
 8000da8:	080058ac 	.word	0x080058ac
 8000dac:	08005864 	.word	0x08005864

08000db0 <ConsoleCommandReadAccelY>:

static eCommandResult_T ConsoleCommandReadAccelY(const char buffer[])
{
 8000db0:	b580      	push	{r7, lr}
 8000db2:	b084      	sub	sp, #16
 8000db4:	af00      	add	r7, sp, #0
 8000db6:	6078      	str	r0, [r7, #4]
	eCommandResult_T result = COMMAND_SUCCESS;
 8000db8:	2300      	movs	r3, #0
 8000dba:	73fb      	strb	r3, [r7, #15]
	IGNORE_UNUSED_VARIABLE(buffer);
	ConsoleIoSendString("y = 2");
 8000dbc:	4805      	ldr	r0, [pc, #20]	; (8000dd4 <ConsoleCommandReadAccelY+0x24>)
 8000dbe:	f000 f8e3 	bl	8000f88 <ConsoleIoSendString>
	ConsoleIoSendString(STR_ENDLINE);
 8000dc2:	4805      	ldr	r0, [pc, #20]	; (8000dd8 <ConsoleCommandReadAccelY+0x28>)
 8000dc4:	f000 f8e0 	bl	8000f88 <ConsoleIoSendString>
	return result;
 8000dc8:	7bfb      	ldrb	r3, [r7, #15]
}
 8000dca:	4618      	mov	r0, r3
 8000dcc:	3710      	adds	r7, #16
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	bd80      	pop	{r7, pc}
 8000dd2:	bf00      	nop
 8000dd4:	080058b4 	.word	0x080058b4
 8000dd8:	08005864 	.word	0x08005864

08000ddc <ConsoleCommandReadAccelZ>:

static eCommandResult_T ConsoleCommandReadAccelZ(const char buffer[])
{
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	b084      	sub	sp, #16
 8000de0:	af00      	add	r7, sp, #0
 8000de2:	6078      	str	r0, [r7, #4]
	eCommandResult_T result = COMMAND_SUCCESS;
 8000de4:	2300      	movs	r3, #0
 8000de6:	73fb      	strb	r3, [r7, #15]
	IGNORE_UNUSED_VARIABLE(buffer);
	ConsoleIoSendString("z = 3 ");
 8000de8:	4805      	ldr	r0, [pc, #20]	; (8000e00 <ConsoleCommandReadAccelZ+0x24>)
 8000dea:	f000 f8cd 	bl	8000f88 <ConsoleIoSendString>
	ConsoleIoSendString(STR_ENDLINE);
 8000dee:	4805      	ldr	r0, [pc, #20]	; (8000e04 <ConsoleCommandReadAccelZ+0x28>)
 8000df0:	f000 f8ca 	bl	8000f88 <ConsoleIoSendString>
	return result;
 8000df4:	7bfb      	ldrb	r3, [r7, #15]
}
 8000df6:	4618      	mov	r0, r3
 8000df8:	3710      	adds	r7, #16
 8000dfa:	46bd      	mov	sp, r7
 8000dfc:	bd80      	pop	{r7, pc}
 8000dfe:	bf00      	nop
 8000e00:	080058bc 	.word	0x080058bc
 8000e04:	08005864 	.word	0x08005864

08000e08 <ConsoleCommandLedsRose>:

static eCommandResult_T ConsoleCommandLedsRose(const char buffer[])
{
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	b084      	sub	sp, #16
 8000e0c:	af00      	add	r7, sp, #0
 8000e0e:	6078      	str	r0, [r7, #4]
	eCommandResult_T result = COMMAND_SUCCESS;
 8000e10:	2300      	movs	r3, #0
 8000e12:	73fb      	strb	r3, [r7, #15]
	IGNORE_UNUSED_VARIABLE(buffer);
	ConsoleIoSendString("LEDs should light in a circular pattern and then extinguish the same way ");
 8000e14:	4806      	ldr	r0, [pc, #24]	; (8000e30 <ConsoleCommandLedsRose+0x28>)
 8000e16:	f000 f8b7 	bl	8000f88 <ConsoleIoSendString>
	//LedRoseSet();
	HAL_Delay(50);
 8000e1a:	2032      	movs	r0, #50	; 0x32
 8000e1c:	f000 fd24 	bl	8001868 <HAL_Delay>
	//LedRoseToggle();
	ConsoleIoSendString(STR_ENDLINE);
 8000e20:	4804      	ldr	r0, [pc, #16]	; (8000e34 <ConsoleCommandLedsRose+0x2c>)
 8000e22:	f000 f8b1 	bl	8000f88 <ConsoleIoSendString>
	return result;
 8000e26:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e28:	4618      	mov	r0, r3
 8000e2a:	3710      	adds	r7, #16
 8000e2c:	46bd      	mov	sp, r7
 8000e2e:	bd80      	pop	{r7, pc}
 8000e30:	080058c4 	.word	0x080058c4
 8000e34:	08005864 	.word	0x08005864

08000e38 <ConsoleCommandButtonState>:


static eCommandResult_T ConsoleCommandButtonState(const char buffer[])
{
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	b084      	sub	sp, #16
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	6078      	str	r0, [r7, #4]
	eCommandResult_T result = COMMAND_SUCCESS;
 8000e40:	2300      	movs	r3, #0
 8000e42:	73fb      	strb	r3, [r7, #15]
	IGNORE_UNUSED_VARIABLE(buffer);
	ConsoleIoSendString("the present state of the Blue user button is: ");
 8000e44:	4806      	ldr	r0, [pc, #24]	; (8000e60 <ConsoleCommandButtonState+0x28>)
 8000e46:	f000 f89f 	bl	8000f88 <ConsoleIoSendString>
	if (1) {
		ConsoleIoSendString("DOWN, Depressed ");
 8000e4a:	4806      	ldr	r0, [pc, #24]	; (8000e64 <ConsoleCommandButtonState+0x2c>)
 8000e4c:	f000 f89c 	bl	8000f88 <ConsoleIoSendString>
	}
	else {
		ConsoleIoSendString("UP, Unpressed ");
	}
	ConsoleIoSendString(STR_ENDLINE);
 8000e50:	4805      	ldr	r0, [pc, #20]	; (8000e68 <ConsoleCommandButtonState+0x30>)
 8000e52:	f000 f899 	bl	8000f88 <ConsoleIoSendString>
	return result;
 8000e56:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e58:	4618      	mov	r0, r3
 8000e5a:	3710      	adds	r7, #16
 8000e5c:	46bd      	mov	sp, r7
 8000e5e:	bd80      	pop	{r7, pc}
 8000e60:	08005910 	.word	0x08005910
 8000e64:	08005940 	.word	0x08005940
 8000e68:	08005864 	.word	0x08005864

08000e6c <ConsoleCommandsGetTable>:

const sConsoleCommandTable_T* ConsoleCommandsGetTable(void)
{
 8000e6c:	b480      	push	{r7}
 8000e6e:	af00      	add	r7, sp, #0
	return (mConsoleCommandTable);
 8000e70:	4b02      	ldr	r3, [pc, #8]	; (8000e7c <ConsoleCommandsGetTable+0x10>)
}
 8000e72:	4618      	mov	r0, r3
 8000e74:	46bd      	mov	sp, r7
 8000e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e7a:	4770      	bx	lr
 8000e7c:	08005978 	.word	0x08005978

08000e80 <ConsoleIoInit>:
        return EOF;
}*/


eConsoleError ConsoleIoInit(void)
{
 8000e80:	b580      	push	{r7, lr}
 8000e82:	af00      	add	r7, sp, #0
	HAL_UART_Receive_IT(&huart3, &ch, 1); // initiate reception
 8000e84:	2201      	movs	r2, #1
 8000e86:	4903      	ldr	r1, [pc, #12]	; (8000e94 <ConsoleIoInit+0x14>)
 8000e88:	4803      	ldr	r0, [pc, #12]	; (8000e98 <ConsoleIoInit+0x18>)
 8000e8a:	f002 fddb 	bl	8003a44 <HAL_UART_Receive_IT>
	return CONSOLE_SUCCESS;
 8000e8e:	2300      	movs	r3, #0
}
 8000e90:	4618      	mov	r0, r3
 8000e92:	bd80      	pop	{r7, pc}
 8000e94:	20000181 	.word	0x20000181
 8000e98:	200002d4 	.word	0x200002d4

08000e9c <HAL_UART_RxCpltCallback>:

/* This RX interrupt gets triggered once x number of bytes are recieved*/
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	b082      	sub	sp, #8
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	6078      	str	r0, [r7, #4]

	HAL_UART_Transmit_IT(&huart3,&ch,1); // echo
 8000ea4:	2201      	movs	r2, #1
 8000ea6:	4911      	ldr	r1, [pc, #68]	; (8000eec <HAL_UART_RxCpltCallback+0x50>)
 8000ea8:	4811      	ldr	r0, [pc, #68]	; (8000ef0 <HAL_UART_RxCpltCallback+0x54>)
 8000eaa:	f002 fd6d 	bl	8003988 <HAL_UART_Transmit_IT>

    //TODO: handle cases of buffer overflow gracefully
	rx_bufferio[rx_counter++] = ch; // load each character to buffer
 8000eae:	4b11      	ldr	r3, [pc, #68]	; (8000ef4 <HAL_UART_RxCpltCallback+0x58>)
 8000eb0:	781b      	ldrb	r3, [r3, #0]
 8000eb2:	1c5a      	adds	r2, r3, #1
 8000eb4:	b2d1      	uxtb	r1, r2
 8000eb6:	4a0f      	ldr	r2, [pc, #60]	; (8000ef4 <HAL_UART_RxCpltCallback+0x58>)
 8000eb8:	7011      	strb	r1, [r2, #0]
 8000eba:	461a      	mov	r2, r3
 8000ebc:	4b0b      	ldr	r3, [pc, #44]	; (8000eec <HAL_UART_RxCpltCallback+0x50>)
 8000ebe:	7819      	ldrb	r1, [r3, #0]
 8000ec0:	4b0d      	ldr	r3, [pc, #52]	; (8000ef8 <HAL_UART_RxCpltCallback+0x5c>)
 8000ec2:	5499      	strb	r1, [r3, r2]
    if(ch == '\r' || ch == '\n')
 8000ec4:	4b09      	ldr	r3, [pc, #36]	; (8000eec <HAL_UART_RxCpltCallback+0x50>)
 8000ec6:	781b      	ldrb	r3, [r3, #0]
 8000ec8:	2b0d      	cmp	r3, #13
 8000eca:	d003      	beq.n	8000ed4 <HAL_UART_RxCpltCallback+0x38>
 8000ecc:	4b07      	ldr	r3, [pc, #28]	; (8000eec <HAL_UART_RxCpltCallback+0x50>)
 8000ece:	781b      	ldrb	r3, [r3, #0]
 8000ed0:	2b0a      	cmp	r3, #10
 8000ed2:	d102      	bne.n	8000eda <HAL_UART_RxCpltCallback+0x3e>
        buffer_ready = 1; // if a new-line character or a carriage return character is received, set the relevant flag
 8000ed4:	4b09      	ldr	r3, [pc, #36]	; (8000efc <HAL_UART_RxCpltCallback+0x60>)
 8000ed6:	2201      	movs	r2, #1
 8000ed8:	701a      	strb	r2, [r3, #0]

    HAL_UART_Receive_IT(huart, &ch, 1); // continue receiving character(s)
 8000eda:	2201      	movs	r2, #1
 8000edc:	4903      	ldr	r1, [pc, #12]	; (8000eec <HAL_UART_RxCpltCallback+0x50>)
 8000ede:	6878      	ldr	r0, [r7, #4]
 8000ee0:	f002 fdb0 	bl	8003a44 <HAL_UART_Receive_IT>
}
 8000ee4:	bf00      	nop
 8000ee6:	3708      	adds	r7, #8
 8000ee8:	46bd      	mov	sp, r7
 8000eea:	bd80      	pop	{r7, pc}
 8000eec:	20000181 	.word	0x20000181
 8000ef0:	200002d4 	.word	0x200002d4
 8000ef4:	20000284 	.word	0x20000284
 8000ef8:	20000184 	.word	0x20000184
 8000efc:	20000285 	.word	0x20000285

08000f00 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8000f00:	b480      	push	{r7}
 8000f02:	b083      	sub	sp, #12
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	6078      	str	r0, [r7, #4]
	uart_tx_complete =1;
 8000f08:	4b04      	ldr	r3, [pc, #16]	; (8000f1c <HAL_UART_TxCpltCallback+0x1c>)
 8000f0a:	2201      	movs	r2, #1
 8000f0c:	701a      	strb	r2, [r3, #0]
}
 8000f0e:	bf00      	nop
 8000f10:	370c      	adds	r7, #12
 8000f12:	46bd      	mov	sp, r7
 8000f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f18:	4770      	bx	lr
 8000f1a:	bf00      	nop
 8000f1c:	20000000 	.word	0x20000000

08000f20 <ConsoleIoReceive>:

//this is where the main edits went to make this code portable to STM32:
eConsoleError ConsoleIoReceive(uint8_t* buffer, const uint32_t bufferLength, uint32_t *readLength)
{
 8000f20:	b580      	push	{r7, lr}
 8000f22:	b084      	sub	sp, #16
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	60f8      	str	r0, [r7, #12]
 8000f28:	60b9      	str	r1, [r7, #8]
 8000f2a:	607a      	str	r2, [r7, #4]
    if(buffer_ready) { // if a complete command is received
 8000f2c:	4b13      	ldr	r3, [pc, #76]	; (8000f7c <ConsoleIoReceive+0x5c>)
 8000f2e:	781b      	ldrb	r3, [r3, #0]
 8000f30:	2b00      	cmp	r3, #0
 8000f32:	d018      	beq.n	8000f66 <ConsoleIoReceive+0x46>
        buffer_ready = 0; // unset flag
 8000f34:	4b11      	ldr	r3, [pc, #68]	; (8000f7c <ConsoleIoReceive+0x5c>)
 8000f36:	2200      	movs	r2, #0
 8000f38:	701a      	strb	r2, [r3, #0]
        memcpy(buffer,rx_bufferio,rx_counter); // copy the received command to library buffer
 8000f3a:	4b11      	ldr	r3, [pc, #68]	; (8000f80 <ConsoleIoReceive+0x60>)
 8000f3c:	781b      	ldrb	r3, [r3, #0]
 8000f3e:	461a      	mov	r2, r3
 8000f40:	4910      	ldr	r1, [pc, #64]	; (8000f84 <ConsoleIoReceive+0x64>)
 8000f42:	68f8      	ldr	r0, [r7, #12]
 8000f44:	f004 fc30 	bl	80057a8 <memcpy>
        *readLength = rx_counter; // set appropriate length
 8000f48:	4b0d      	ldr	r3, [pc, #52]	; (8000f80 <ConsoleIoReceive+0x60>)
 8000f4a:	781b      	ldrb	r3, [r3, #0]
 8000f4c:	461a      	mov	r2, r3
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	601a      	str	r2, [r3, #0]

        memset(rx_bufferio,0,256); // clear receive buffer
 8000f52:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000f56:	2100      	movs	r1, #0
 8000f58:	480a      	ldr	r0, [pc, #40]	; (8000f84 <ConsoleIoReceive+0x64>)
 8000f5a:	f004 fbf3 	bl	8005744 <memset>
        rx_counter = 0; // clear pointer so we can start from the beginning next time around
 8000f5e:	4b08      	ldr	r3, [pc, #32]	; (8000f80 <ConsoleIoReceive+0x60>)
 8000f60:	2200      	movs	r2, #0
 8000f62:	701a      	strb	r2, [r3, #0]
 8000f64:	e005      	b.n	8000f72 <ConsoleIoReceive+0x52>
    } else {
        buffer[0] = '\n'; // if no command is received, send the '>'
 8000f66:	68fb      	ldr	r3, [r7, #12]
 8000f68:	220a      	movs	r2, #10
 8000f6a:	701a      	strb	r2, [r3, #0]
        *readLength = 0;
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	2200      	movs	r2, #0
 8000f70:	601a      	str	r2, [r3, #0]
    }

    return CONSOLE_SUCCESS;
 8000f72:	2300      	movs	r3, #0
}
 8000f74:	4618      	mov	r0, r3
 8000f76:	3710      	adds	r7, #16
 8000f78:	46bd      	mov	sp, r7
 8000f7a:	bd80      	pop	{r7, pc}
 8000f7c:	20000285 	.word	0x20000285
 8000f80:	20000284 	.word	0x20000284
 8000f84:	20000184 	.word	0x20000184

08000f88 <ConsoleIoSendString>:

eConsoleError ConsoleIoSendString(const char *buffer)
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	b082      	sub	sp, #8
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	6078      	str	r0, [r7, #4]
	while (uart_tx_complete==0);
 8000f90:	bf00      	nop
 8000f92:	4b0b      	ldr	r3, [pc, #44]	; (8000fc0 <ConsoleIoSendString+0x38>)
 8000f94:	781b      	ldrb	r3, [r3, #0]
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	d0fb      	beq.n	8000f92 <ConsoleIoSendString+0xa>
	uart_tx_complete = 0;
 8000f9a:	4b09      	ldr	r3, [pc, #36]	; (8000fc0 <ConsoleIoSendString+0x38>)
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit_IT(&huart3, buffer, strlen(buffer));
 8000fa0:	6878      	ldr	r0, [r7, #4]
 8000fa2:	f7ff f93d 	bl	8000220 <strlen>
 8000fa6:	4603      	mov	r3, r0
 8000fa8:	b29b      	uxth	r3, r3
 8000faa:	461a      	mov	r2, r3
 8000fac:	6879      	ldr	r1, [r7, #4]
 8000fae:	4805      	ldr	r0, [pc, #20]	; (8000fc4 <ConsoleIoSendString+0x3c>)
 8000fb0:	f002 fcea 	bl	8003988 <HAL_UART_Transmit_IT>
	return CONSOLE_SUCCESS;
 8000fb4:	2300      	movs	r3, #0
}
 8000fb6:	4618      	mov	r0, r3
 8000fb8:	3708      	adds	r7, #8
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	bd80      	pop	{r7, pc}
 8000fbe:	bf00      	nop
 8000fc0:	20000000 	.word	0x20000000
 8000fc4:	200002d4 	.word	0x200002d4

08000fc8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000fcc:	f000 fbef 	bl	80017ae <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000fd0:	f000 f854 	bl	800107c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000fd4:	f000 f944 	bl	8001260 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8000fd8:	f000 f8e2 	bl	80011a0 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000fdc:	f000 f910 	bl	8001200 <MX_USB_OTG_FS_PCD_Init>
  MX_TIM13_Init();
 8000fe0:	f000 f8ba 	bl	8001158 <MX_TIM13_Init>
  /* USER CODE BEGIN 2 */

  // Start timer
  HAL_TIM_Base_Start_IT(&htim13);
 8000fe4:	4820      	ldr	r0, [pc, #128]	; (8001068 <main+0xa0>)
 8000fe6:	f002 fa03 	bl	80033f0 <HAL_TIM_Base_Start_IT>
  HAL_UART_Transmit_IT(&huart3, "Main function\n\r" , strlen("Main function\n\r"));
 8000fea:	220f      	movs	r2, #15
 8000fec:	491f      	ldr	r1, [pc, #124]	; (800106c <main+0xa4>)
 8000fee:	4820      	ldr	r0, [pc, #128]	; (8001070 <main+0xa8>)
 8000ff0:	f002 fcca 	bl	8003988 <HAL_UART_Transmit_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  ConsoleInit();
 8000ff4:	f7ff fb44 	bl	8000680 <ConsoleInit>
  while (1)
  {
	  //HAL_UART_Receive(&huart3, rx_buffer, 10, 1000000); /*Blocking fucnction for UART RX*/
	                                                       /* It stays blocked untill 10 bytes are recieved*/
	  //while(1);
	  ConsoleProcess();
 8000ff8:	f7ff fb70 	bl	80006dc <ConsoleProcess>
	  if(BlinkSpeed == 0)
 8000ffc:	4b1d      	ldr	r3, [pc, #116]	; (8001074 <main+0xac>)
 8000ffe:	781b      	ldrb	r3, [r3, #0]
 8001000:	2b00      	cmp	r3, #0
 8001002:	d10a      	bne.n	800101a <main+0x52>
	  {
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, 1);
 8001004:	2201      	movs	r2, #1
 8001006:	2101      	movs	r1, #1
 8001008:	481b      	ldr	r0, [pc, #108]	; (8001078 <main+0xb0>)
 800100a:	f000 ffa9 	bl	8001f60 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, 0);
 800100e:	2200      	movs	r2, #0
 8001010:	2180      	movs	r1, #128	; 0x80
 8001012:	4819      	ldr	r0, [pc, #100]	; (8001078 <main+0xb0>)
 8001014:	f000 ffa4 	bl	8001f60 <HAL_GPIO_WritePin>
 8001018:	e01c      	b.n	8001054 <main+0x8c>
		  //HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, 0);
		  //HAL_UART_Transmit(&huart3, (uint8_t *)"Hello Green\n", 15, 1000);
		  //HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0);//green
		  //HAL_Delay(500);/*comment*/
	  }
	  else if(BlinkSpeed == 1)
 800101a:	4b16      	ldr	r3, [pc, #88]	; (8001074 <main+0xac>)
 800101c:	781b      	ldrb	r3, [r3, #0]
 800101e:	2b01      	cmp	r3, #1
 8001020:	d10a      	bne.n	8001038 <main+0x70>
	  {
		  //HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_7);//blue
		  //HAL_Delay(100);
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, 0);
 8001022:	2200      	movs	r2, #0
 8001024:	2101      	movs	r1, #1
 8001026:	4814      	ldr	r0, [pc, #80]	; (8001078 <main+0xb0>)
 8001028:	f000 ff9a 	bl	8001f60 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, 1);
 800102c:	2201      	movs	r2, #1
 800102e:	2180      	movs	r1, #128	; 0x80
 8001030:	4811      	ldr	r0, [pc, #68]	; (8001078 <main+0xb0>)
 8001032:	f000 ff95 	bl	8001f60 <HAL_GPIO_WritePin>
 8001036:	e00d      	b.n	8001054 <main+0x8c>
		  //HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, 0);
		  //HAL_UART_Transmit(&huart3, (uint8_t *)"Hello Blue\n", 15, 1000);
	  }
	  else if(BlinkSpeed == 2)
 8001038:	4b0e      	ldr	r3, [pc, #56]	; (8001074 <main+0xac>)
 800103a:	781b      	ldrb	r3, [r3, #0]
 800103c:	2b02      	cmp	r3, #2
 800103e:	d109      	bne.n	8001054 <main+0x8c>
	  {
		  //HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14);//red
		  //HAL_Delay(50);
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, 0);
 8001040:	2200      	movs	r2, #0
 8001042:	2101      	movs	r1, #1
 8001044:	480c      	ldr	r0, [pc, #48]	; (8001078 <main+0xb0>)
 8001046:	f000 ff8b 	bl	8001f60 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, 0);
 800104a:	2200      	movs	r2, #0
 800104c:	2180      	movs	r1, #128	; 0x80
 800104e:	480a      	ldr	r0, [pc, #40]	; (8001078 <main+0xb0>)
 8001050:	f000 ff86 	bl	8001f60 <HAL_GPIO_WritePin>
		  //HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, 0);
		  //HAL_UART_Transmit(&huart3, (uint8_t *)"Hello Red\n", 15, 1000);
		  //test
	  }
	  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14);//red
 8001054:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001058:	4807      	ldr	r0, [pc, #28]	; (8001078 <main+0xb0>)
 800105a:	f000 ff9a 	bl	8001f92 <HAL_GPIO_TogglePin>
	  HAL_Delay(50);
 800105e:	2032      	movs	r0, #50	; 0x32
 8001060:	f000 fc02 	bl	8001868 <HAL_Delay>
	  ConsoleProcess();
 8001064:	e7c8      	b.n	8000ff8 <main+0x30>
 8001066:	bf00      	nop
 8001068:	20000288 	.word	0x20000288
 800106c:	08005954 	.word	0x08005954
 8001070:	200002d4 	.word	0x200002d4
 8001074:	20000864 	.word	0x20000864
 8001078:	40020400 	.word	0x40020400

0800107c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	b094      	sub	sp, #80	; 0x50
 8001080:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001082:	f107 0320 	add.w	r3, r7, #32
 8001086:	2230      	movs	r2, #48	; 0x30
 8001088:	2100      	movs	r1, #0
 800108a:	4618      	mov	r0, r3
 800108c:	f004 fb5a 	bl	8005744 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001090:	f107 030c 	add.w	r3, r7, #12
 8001094:	2200      	movs	r2, #0
 8001096:	601a      	str	r2, [r3, #0]
 8001098:	605a      	str	r2, [r3, #4]
 800109a:	609a      	str	r2, [r3, #8]
 800109c:	60da      	str	r2, [r3, #12]
 800109e:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80010a0:	f001 f8da 	bl	8002258 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80010a4:	4b2a      	ldr	r3, [pc, #168]	; (8001150 <SystemClock_Config+0xd4>)
 80010a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010a8:	4a29      	ldr	r2, [pc, #164]	; (8001150 <SystemClock_Config+0xd4>)
 80010aa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80010ae:	6413      	str	r3, [r2, #64]	; 0x40
 80010b0:	4b27      	ldr	r3, [pc, #156]	; (8001150 <SystemClock_Config+0xd4>)
 80010b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010b8:	60bb      	str	r3, [r7, #8]
 80010ba:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80010bc:	4b25      	ldr	r3, [pc, #148]	; (8001154 <SystemClock_Config+0xd8>)
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	4a24      	ldr	r2, [pc, #144]	; (8001154 <SystemClock_Config+0xd8>)
 80010c2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80010c6:	6013      	str	r3, [r2, #0]
 80010c8:	4b22      	ldr	r3, [pc, #136]	; (8001154 <SystemClock_Config+0xd8>)
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80010d0:	607b      	str	r3, [r7, #4]
 80010d2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80010d4:	2301      	movs	r3, #1
 80010d6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80010d8:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80010dc:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80010de:	2302      	movs	r3, #2
 80010e0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80010e2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80010e6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80010e8:	2304      	movs	r3, #4
 80010ea:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 216;
 80010ec:	23d8      	movs	r3, #216	; 0xd8
 80010ee:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80010f0:	2302      	movs	r3, #2
 80010f2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 9;
 80010f4:	2309      	movs	r3, #9
 80010f6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80010f8:	f107 0320 	add.w	r3, r7, #32
 80010fc:	4618      	mov	r0, r3
 80010fe:	f001 f90b 	bl	8002318 <HAL_RCC_OscConfig>
 8001102:	4603      	mov	r3, r0
 8001104:	2b00      	cmp	r3, #0
 8001106:	d001      	beq.n	800110c <SystemClock_Config+0x90>
  {
    Error_Handler();
 8001108:	f000 f9a6 	bl	8001458 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 800110c:	f001 f8b4 	bl	8002278 <HAL_PWREx_EnableOverDrive>
 8001110:	4603      	mov	r3, r0
 8001112:	2b00      	cmp	r3, #0
 8001114:	d001      	beq.n	800111a <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8001116:	f000 f99f 	bl	8001458 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800111a:	230f      	movs	r3, #15
 800111c:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800111e:	2302      	movs	r3, #2
 8001120:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001122:	2300      	movs	r3, #0
 8001124:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001126:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800112a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800112c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001130:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8001132:	f107 030c 	add.w	r3, r7, #12
 8001136:	2107      	movs	r1, #7
 8001138:	4618      	mov	r0, r3
 800113a:	f001 fb91 	bl	8002860 <HAL_RCC_ClockConfig>
 800113e:	4603      	mov	r3, r0
 8001140:	2b00      	cmp	r3, #0
 8001142:	d001      	beq.n	8001148 <SystemClock_Config+0xcc>
  {
    Error_Handler();
 8001144:	f000 f988 	bl	8001458 <Error_Handler>
  }
}
 8001148:	bf00      	nop
 800114a:	3750      	adds	r7, #80	; 0x50
 800114c:	46bd      	mov	sp, r7
 800114e:	bd80      	pop	{r7, pc}
 8001150:	40023800 	.word	0x40023800
 8001154:	40007000 	.word	0x40007000

08001158 <MX_TIM13_Init>:
  * @brief TIM13 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM13_Init(void)
{
 8001158:	b580      	push	{r7, lr}
 800115a:	af00      	add	r7, sp, #0
  /* USER CODE END TIM13_Init 0 */

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 800115c:	4b0e      	ldr	r3, [pc, #56]	; (8001198 <MX_TIM13_Init+0x40>)
 800115e:	4a0f      	ldr	r2, [pc, #60]	; (800119c <MX_TIM13_Init+0x44>)
 8001160:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 108-1;
 8001162:	4b0d      	ldr	r3, [pc, #52]	; (8001198 <MX_TIM13_Init+0x40>)
 8001164:	226b      	movs	r2, #107	; 0x6b
 8001166:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001168:	4b0b      	ldr	r3, [pc, #44]	; (8001198 <MX_TIM13_Init+0x40>)
 800116a:	2200      	movs	r2, #0
 800116c:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 10000-1;
 800116e:	4b0a      	ldr	r3, [pc, #40]	; (8001198 <MX_TIM13_Init+0x40>)
 8001170:	f242 720f 	movw	r2, #9999	; 0x270f
 8001174:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001176:	4b08      	ldr	r3, [pc, #32]	; (8001198 <MX_TIM13_Init+0x40>)
 8001178:	2200      	movs	r2, #0
 800117a:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800117c:	4b06      	ldr	r3, [pc, #24]	; (8001198 <MX_TIM13_Init+0x40>)
 800117e:	2200      	movs	r2, #0
 8001180:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 8001182:	4805      	ldr	r0, [pc, #20]	; (8001198 <MX_TIM13_Init+0x40>)
 8001184:	f002 f8dc 	bl	8003340 <HAL_TIM_Base_Init>
 8001188:	4603      	mov	r3, r0
 800118a:	2b00      	cmp	r3, #0
 800118c:	d001      	beq.n	8001192 <MX_TIM13_Init+0x3a>
  {
    Error_Handler();
 800118e:	f000 f963 	bl	8001458 <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */

}
 8001192:	bf00      	nop
 8001194:	bd80      	pop	{r7, pc}
 8001196:	bf00      	nop
 8001198:	20000288 	.word	0x20000288
 800119c:	40001c00 	.word	0x40001c00

080011a0 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80011a4:	4b14      	ldr	r3, [pc, #80]	; (80011f8 <MX_USART3_UART_Init+0x58>)
 80011a6:	4a15      	ldr	r2, [pc, #84]	; (80011fc <MX_USART3_UART_Init+0x5c>)
 80011a8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80011aa:	4b13      	ldr	r3, [pc, #76]	; (80011f8 <MX_USART3_UART_Init+0x58>)
 80011ac:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80011b0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80011b2:	4b11      	ldr	r3, [pc, #68]	; (80011f8 <MX_USART3_UART_Init+0x58>)
 80011b4:	2200      	movs	r2, #0
 80011b6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80011b8:	4b0f      	ldr	r3, [pc, #60]	; (80011f8 <MX_USART3_UART_Init+0x58>)
 80011ba:	2200      	movs	r2, #0
 80011bc:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80011be:	4b0e      	ldr	r3, [pc, #56]	; (80011f8 <MX_USART3_UART_Init+0x58>)
 80011c0:	2200      	movs	r2, #0
 80011c2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80011c4:	4b0c      	ldr	r3, [pc, #48]	; (80011f8 <MX_USART3_UART_Init+0x58>)
 80011c6:	220c      	movs	r2, #12
 80011c8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80011ca:	4b0b      	ldr	r3, [pc, #44]	; (80011f8 <MX_USART3_UART_Init+0x58>)
 80011cc:	2200      	movs	r2, #0
 80011ce:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80011d0:	4b09      	ldr	r3, [pc, #36]	; (80011f8 <MX_USART3_UART_Init+0x58>)
 80011d2:	2200      	movs	r2, #0
 80011d4:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80011d6:	4b08      	ldr	r3, [pc, #32]	; (80011f8 <MX_USART3_UART_Init+0x58>)
 80011d8:	2200      	movs	r2, #0
 80011da:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80011dc:	4b06      	ldr	r3, [pc, #24]	; (80011f8 <MX_USART3_UART_Init+0x58>)
 80011de:	2200      	movs	r2, #0
 80011e0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80011e2:	4805      	ldr	r0, [pc, #20]	; (80011f8 <MX_USART3_UART_Init+0x58>)
 80011e4:	f002 fb82 	bl	80038ec <HAL_UART_Init>
 80011e8:	4603      	mov	r3, r0
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d001      	beq.n	80011f2 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 80011ee:	f000 f933 	bl	8001458 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80011f2:	bf00      	nop
 80011f4:	bd80      	pop	{r7, pc}
 80011f6:	bf00      	nop
 80011f8:	200002d4 	.word	0x200002d4
 80011fc:	40004800 	.word	0x40004800

08001200 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8001200:	b580      	push	{r7, lr}
 8001202:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8001204:	4b15      	ldr	r3, [pc, #84]	; (800125c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001206:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800120a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 800120c:	4b13      	ldr	r3, [pc, #76]	; (800125c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800120e:	2206      	movs	r2, #6
 8001210:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8001212:	4b12      	ldr	r3, [pc, #72]	; (800125c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001214:	2202      	movs	r2, #2
 8001216:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8001218:	4b10      	ldr	r3, [pc, #64]	; (800125c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800121a:	2200      	movs	r2, #0
 800121c:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800121e:	4b0f      	ldr	r3, [pc, #60]	; (800125c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001220:	2202      	movs	r2, #2
 8001222:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8001224:	4b0d      	ldr	r3, [pc, #52]	; (800125c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001226:	2201      	movs	r2, #1
 8001228:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800122a:	4b0c      	ldr	r3, [pc, #48]	; (800125c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800122c:	2200      	movs	r2, #0
 800122e:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8001230:	4b0a      	ldr	r3, [pc, #40]	; (800125c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001232:	2200      	movs	r2, #0
 8001234:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 8001236:	4b09      	ldr	r3, [pc, #36]	; (800125c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001238:	2201      	movs	r2, #1
 800123a:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 800123c:	4b07      	ldr	r3, [pc, #28]	; (800125c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800123e:	2201      	movs	r2, #1
 8001240:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8001242:	4b06      	ldr	r3, [pc, #24]	; (800125c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001244:	2200      	movs	r2, #0
 8001246:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8001248:	4804      	ldr	r0, [pc, #16]	; (800125c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800124a:	f000 febc 	bl	8001fc6 <HAL_PCD_Init>
 800124e:	4603      	mov	r3, r0
 8001250:	2b00      	cmp	r3, #0
 8001252:	d001      	beq.n	8001258 <MX_USB_OTG_FS_PCD_Init+0x58>
  {
    Error_Handler();
 8001254:	f000 f900 	bl	8001458 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8001258:	bf00      	nop
 800125a:	bd80      	pop	{r7, pc}
 800125c:	2000035c 	.word	0x2000035c

08001260 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001260:	b580      	push	{r7, lr}
 8001262:	b08c      	sub	sp, #48	; 0x30
 8001264:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001266:	f107 031c 	add.w	r3, r7, #28
 800126a:	2200      	movs	r2, #0
 800126c:	601a      	str	r2, [r3, #0]
 800126e:	605a      	str	r2, [r3, #4]
 8001270:	609a      	str	r2, [r3, #8]
 8001272:	60da      	str	r2, [r3, #12]
 8001274:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001276:	4b47      	ldr	r3, [pc, #284]	; (8001394 <MX_GPIO_Init+0x134>)
 8001278:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800127a:	4a46      	ldr	r2, [pc, #280]	; (8001394 <MX_GPIO_Init+0x134>)
 800127c:	f043 0304 	orr.w	r3, r3, #4
 8001280:	6313      	str	r3, [r2, #48]	; 0x30
 8001282:	4b44      	ldr	r3, [pc, #272]	; (8001394 <MX_GPIO_Init+0x134>)
 8001284:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001286:	f003 0304 	and.w	r3, r3, #4
 800128a:	61bb      	str	r3, [r7, #24]
 800128c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800128e:	4b41      	ldr	r3, [pc, #260]	; (8001394 <MX_GPIO_Init+0x134>)
 8001290:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001292:	4a40      	ldr	r2, [pc, #256]	; (8001394 <MX_GPIO_Init+0x134>)
 8001294:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001298:	6313      	str	r3, [r2, #48]	; 0x30
 800129a:	4b3e      	ldr	r3, [pc, #248]	; (8001394 <MX_GPIO_Init+0x134>)
 800129c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800129e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80012a2:	617b      	str	r3, [r7, #20]
 80012a4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80012a6:	4b3b      	ldr	r3, [pc, #236]	; (8001394 <MX_GPIO_Init+0x134>)
 80012a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012aa:	4a3a      	ldr	r2, [pc, #232]	; (8001394 <MX_GPIO_Init+0x134>)
 80012ac:	f043 0302 	orr.w	r3, r3, #2
 80012b0:	6313      	str	r3, [r2, #48]	; 0x30
 80012b2:	4b38      	ldr	r3, [pc, #224]	; (8001394 <MX_GPIO_Init+0x134>)
 80012b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012b6:	f003 0302 	and.w	r3, r3, #2
 80012ba:	613b      	str	r3, [r7, #16]
 80012bc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80012be:	4b35      	ldr	r3, [pc, #212]	; (8001394 <MX_GPIO_Init+0x134>)
 80012c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012c2:	4a34      	ldr	r2, [pc, #208]	; (8001394 <MX_GPIO_Init+0x134>)
 80012c4:	f043 0308 	orr.w	r3, r3, #8
 80012c8:	6313      	str	r3, [r2, #48]	; 0x30
 80012ca:	4b32      	ldr	r3, [pc, #200]	; (8001394 <MX_GPIO_Init+0x134>)
 80012cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ce:	f003 0308 	and.w	r3, r3, #8
 80012d2:	60fb      	str	r3, [r7, #12]
 80012d4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80012d6:	4b2f      	ldr	r3, [pc, #188]	; (8001394 <MX_GPIO_Init+0x134>)
 80012d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012da:	4a2e      	ldr	r2, [pc, #184]	; (8001394 <MX_GPIO_Init+0x134>)
 80012dc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80012e0:	6313      	str	r3, [r2, #48]	; 0x30
 80012e2:	4b2c      	ldr	r3, [pc, #176]	; (8001394 <MX_GPIO_Init+0x134>)
 80012e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80012ea:	60bb      	str	r3, [r7, #8]
 80012ec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80012ee:	4b29      	ldr	r3, [pc, #164]	; (8001394 <MX_GPIO_Init+0x134>)
 80012f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012f2:	4a28      	ldr	r2, [pc, #160]	; (8001394 <MX_GPIO_Init+0x134>)
 80012f4:	f043 0301 	orr.w	r3, r3, #1
 80012f8:	6313      	str	r3, [r2, #48]	; 0x30
 80012fa:	4b26      	ldr	r3, [pc, #152]	; (8001394 <MX_GPIO_Init+0x134>)
 80012fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012fe:	f003 0301 	and.w	r3, r3, #1
 8001302:	607b      	str	r3, [r7, #4]
 8001304:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8001306:	2200      	movs	r2, #0
 8001308:	f244 0181 	movw	r1, #16513	; 0x4081
 800130c:	4822      	ldr	r0, [pc, #136]	; (8001398 <MX_GPIO_Init+0x138>)
 800130e:	f000 fe27 	bl	8001f60 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8001312:	2200      	movs	r2, #0
 8001314:	2140      	movs	r1, #64	; 0x40
 8001316:	4821      	ldr	r0, [pc, #132]	; (800139c <MX_GPIO_Init+0x13c>)
 8001318:	f000 fe22 	bl	8001f60 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 800131c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001320:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001322:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001326:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001328:	2300      	movs	r3, #0
 800132a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 800132c:	f107 031c 	add.w	r3, r7, #28
 8001330:	4619      	mov	r1, r3
 8001332:	481b      	ldr	r0, [pc, #108]	; (80013a0 <MX_GPIO_Init+0x140>)
 8001334:	f000 fc60 	bl	8001bf8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8001338:	f244 0381 	movw	r3, #16513	; 0x4081
 800133c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800133e:	2301      	movs	r3, #1
 8001340:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001342:	2300      	movs	r3, #0
 8001344:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001346:	2300      	movs	r3, #0
 8001348:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800134a:	f107 031c 	add.w	r3, r7, #28
 800134e:	4619      	mov	r1, r3
 8001350:	4811      	ldr	r0, [pc, #68]	; (8001398 <MX_GPIO_Init+0x138>)
 8001352:	f000 fc51 	bl	8001bf8 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8001356:	2340      	movs	r3, #64	; 0x40
 8001358:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800135a:	2301      	movs	r3, #1
 800135c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800135e:	2300      	movs	r3, #0
 8001360:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001362:	2300      	movs	r3, #0
 8001364:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8001366:	f107 031c 	add.w	r3, r7, #28
 800136a:	4619      	mov	r1, r3
 800136c:	480b      	ldr	r0, [pc, #44]	; (800139c <MX_GPIO_Init+0x13c>)
 800136e:	f000 fc43 	bl	8001bf8 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8001372:	2380      	movs	r3, #128	; 0x80
 8001374:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001376:	2300      	movs	r3, #0
 8001378:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800137a:	2300      	movs	r3, #0
 800137c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800137e:	f107 031c 	add.w	r3, r7, #28
 8001382:	4619      	mov	r1, r3
 8001384:	4805      	ldr	r0, [pc, #20]	; (800139c <MX_GPIO_Init+0x13c>)
 8001386:	f000 fc37 	bl	8001bf8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800138a:	bf00      	nop
 800138c:	3730      	adds	r7, #48	; 0x30
 800138e:	46bd      	mov	sp, r7
 8001390:	bd80      	pop	{r7, pc}
 8001392:	bf00      	nop
 8001394:	40023800 	.word	0x40023800
 8001398:	40020400 	.word	0x40020400
 800139c:	40021800 	.word	0x40021800
 80013a0:	40020800 	.word	0x40020800

080013a4 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
/* Timer13 interupt that fires every 5 ms to check push button press and handle debouncing*/
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80013a4:	b580      	push	{r7, lr}
 80013a6:	b082      	sub	sp, #8
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	6078      	str	r0, [r7, #4]

	if (htim == &htim13 )
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	4a23      	ldr	r2, [pc, #140]	; (800143c <HAL_TIM_PeriodElapsedCallback+0x98>)
 80013b0:	4293      	cmp	r3, r2
 80013b2:	d13e      	bne.n	8001432 <HAL_TIM_PeriodElapsedCallback+0x8e>
	{
		if (!debounceRequest)
 80013b4:	4b22      	ldr	r3, [pc, #136]	; (8001440 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 80013b6:	781b      	ldrb	r3, [r3, #0]
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d11e      	bne.n	80013fa <HAL_TIM_PeriodElapsedCallback+0x56>
		{
			if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13) == 1)
 80013bc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80013c0:	4820      	ldr	r0, [pc, #128]	; (8001444 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 80013c2:	f000 fdb5 	bl	8001f30 <HAL_GPIO_ReadPin>
 80013c6:	4603      	mov	r3, r0
 80013c8:	2b01      	cmp	r3, #1
 80013ca:	d132      	bne.n	8001432 <HAL_TIM_PeriodElapsedCallback+0x8e>
			{
				HAL_UART_Transmit_IT(&huart3, "Button Pressed\n\r" , strlen("Button Pressed\n\r"));
 80013cc:	2210      	movs	r2, #16
 80013ce:	491e      	ldr	r1, [pc, #120]	; (8001448 <HAL_TIM_PeriodElapsedCallback+0xa4>)
 80013d0:	481e      	ldr	r0, [pc, #120]	; (800144c <HAL_TIM_PeriodElapsedCallback+0xa8>)
 80013d2:	f002 fad9 	bl	8003988 <HAL_UART_Transmit_IT>
				if(BlinkSpeed == 2)
 80013d6:	4b1e      	ldr	r3, [pc, #120]	; (8001450 <HAL_TIM_PeriodElapsedCallback+0xac>)
 80013d8:	781b      	ldrb	r3, [r3, #0]
 80013da:	2b02      	cmp	r3, #2
 80013dc:	d103      	bne.n	80013e6 <HAL_TIM_PeriodElapsedCallback+0x42>
				{
					BlinkSpeed = 0;
 80013de:	4b1c      	ldr	r3, [pc, #112]	; (8001450 <HAL_TIM_PeriodElapsedCallback+0xac>)
 80013e0:	2200      	movs	r2, #0
 80013e2:	701a      	strb	r2, [r3, #0]
 80013e4:	e005      	b.n	80013f2 <HAL_TIM_PeriodElapsedCallback+0x4e>
				}
				else
				{
					BlinkSpeed ++;
 80013e6:	4b1a      	ldr	r3, [pc, #104]	; (8001450 <HAL_TIM_PeriodElapsedCallback+0xac>)
 80013e8:	781b      	ldrb	r3, [r3, #0]
 80013ea:	3301      	adds	r3, #1
 80013ec:	b2da      	uxtb	r2, r3
 80013ee:	4b18      	ldr	r3, [pc, #96]	; (8001450 <HAL_TIM_PeriodElapsedCallback+0xac>)
 80013f0:	701a      	strb	r2, [r3, #0]

				}
				debounceRequest = 1;
 80013f2:	4b13      	ldr	r3, [pc, #76]	; (8001440 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 80013f4:	2201      	movs	r2, #1
 80013f6:	701a      	strb	r2, [r3, #0]
			}
		}
	}


}
 80013f8:	e01b      	b.n	8001432 <HAL_TIM_PeriodElapsedCallback+0x8e>
			if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13) == 1)
 80013fa:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80013fe:	4811      	ldr	r0, [pc, #68]	; (8001444 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8001400:	f000 fd96 	bl	8001f30 <HAL_GPIO_ReadPin>
 8001404:	4603      	mov	r3, r0
 8001406:	2b01      	cmp	r3, #1
 8001408:	d103      	bne.n	8001412 <HAL_TIM_PeriodElapsedCallback+0x6e>
				debounceCount = 0;
 800140a:	4b12      	ldr	r3, [pc, #72]	; (8001454 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 800140c:	2200      	movs	r2, #0
 800140e:	701a      	strb	r2, [r3, #0]
}
 8001410:	e00f      	b.n	8001432 <HAL_TIM_PeriodElapsedCallback+0x8e>
				debounceCount ++;
 8001412:	4b10      	ldr	r3, [pc, #64]	; (8001454 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 8001414:	781b      	ldrb	r3, [r3, #0]
 8001416:	3301      	adds	r3, #1
 8001418:	b2da      	uxtb	r2, r3
 800141a:	4b0e      	ldr	r3, [pc, #56]	; (8001454 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 800141c:	701a      	strb	r2, [r3, #0]
				if (debounceCount == 10)
 800141e:	4b0d      	ldr	r3, [pc, #52]	; (8001454 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 8001420:	781b      	ldrb	r3, [r3, #0]
 8001422:	2b0a      	cmp	r3, #10
 8001424:	d105      	bne.n	8001432 <HAL_TIM_PeriodElapsedCallback+0x8e>
					debounceCount = 0;
 8001426:	4b0b      	ldr	r3, [pc, #44]	; (8001454 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 8001428:	2200      	movs	r2, #0
 800142a:	701a      	strb	r2, [r3, #0]
					debounceRequest = 0;
 800142c:	4b04      	ldr	r3, [pc, #16]	; (8001440 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 800142e:	2200      	movs	r2, #0
 8001430:	701a      	strb	r2, [r3, #0]
}
 8001432:	bf00      	nop
 8001434:	3708      	adds	r7, #8
 8001436:	46bd      	mov	sp, r7
 8001438:	bd80      	pop	{r7, pc}
 800143a:	bf00      	nop
 800143c:	20000288 	.word	0x20000288
 8001440:	20000865 	.word	0x20000865
 8001444:	40020800 	.word	0x40020800
 8001448:	08005964 	.word	0x08005964
 800144c:	200002d4 	.word	0x200002d4
 8001450:	20000864 	.word	0x20000864
 8001454:	20000866 	.word	0x20000866

08001458 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001458:	b480      	push	{r7}
 800145a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800145c:	b672      	cpsid	i
}
 800145e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001460:	e7fe      	b.n	8001460 <Error_Handler+0x8>
	...

08001464 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001464:	b480      	push	{r7}
 8001466:	b083      	sub	sp, #12
 8001468:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800146a:	4b0f      	ldr	r3, [pc, #60]	; (80014a8 <HAL_MspInit+0x44>)
 800146c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800146e:	4a0e      	ldr	r2, [pc, #56]	; (80014a8 <HAL_MspInit+0x44>)
 8001470:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001474:	6413      	str	r3, [r2, #64]	; 0x40
 8001476:	4b0c      	ldr	r3, [pc, #48]	; (80014a8 <HAL_MspInit+0x44>)
 8001478:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800147a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800147e:	607b      	str	r3, [r7, #4]
 8001480:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001482:	4b09      	ldr	r3, [pc, #36]	; (80014a8 <HAL_MspInit+0x44>)
 8001484:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001486:	4a08      	ldr	r2, [pc, #32]	; (80014a8 <HAL_MspInit+0x44>)
 8001488:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800148c:	6453      	str	r3, [r2, #68]	; 0x44
 800148e:	4b06      	ldr	r3, [pc, #24]	; (80014a8 <HAL_MspInit+0x44>)
 8001490:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001492:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001496:	603b      	str	r3, [r7, #0]
 8001498:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800149a:	bf00      	nop
 800149c:	370c      	adds	r7, #12
 800149e:	46bd      	mov	sp, r7
 80014a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a4:	4770      	bx	lr
 80014a6:	bf00      	nop
 80014a8:	40023800 	.word	0x40023800

080014ac <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80014ac:	b580      	push	{r7, lr}
 80014ae:	b084      	sub	sp, #16
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM13)
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	4a0d      	ldr	r2, [pc, #52]	; (80014f0 <HAL_TIM_Base_MspInit+0x44>)
 80014ba:	4293      	cmp	r3, r2
 80014bc:	d113      	bne.n	80014e6 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM13_MspInit 0 */

  /* USER CODE END TIM13_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM13_CLK_ENABLE();
 80014be:	4b0d      	ldr	r3, [pc, #52]	; (80014f4 <HAL_TIM_Base_MspInit+0x48>)
 80014c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014c2:	4a0c      	ldr	r2, [pc, #48]	; (80014f4 <HAL_TIM_Base_MspInit+0x48>)
 80014c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80014c8:	6413      	str	r3, [r2, #64]	; 0x40
 80014ca:	4b0a      	ldr	r3, [pc, #40]	; (80014f4 <HAL_TIM_Base_MspInit+0x48>)
 80014cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80014d2:	60fb      	str	r3, [r7, #12]
 80014d4:	68fb      	ldr	r3, [r7, #12]
    /* TIM13 interrupt Init */
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 0, 0);
 80014d6:	2200      	movs	r2, #0
 80014d8:	2100      	movs	r1, #0
 80014da:	202c      	movs	r0, #44	; 0x2c
 80014dc:	f000 fac3 	bl	8001a66 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 80014e0:	202c      	movs	r0, #44	; 0x2c
 80014e2:	f000 fadc 	bl	8001a9e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM13_MspInit 1 */

  /* USER CODE END TIM13_MspInit 1 */
  }

}
 80014e6:	bf00      	nop
 80014e8:	3710      	adds	r7, #16
 80014ea:	46bd      	mov	sp, r7
 80014ec:	bd80      	pop	{r7, pc}
 80014ee:	bf00      	nop
 80014f0:	40001c00 	.word	0x40001c00
 80014f4:	40023800 	.word	0x40023800

080014f8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80014f8:	b580      	push	{r7, lr}
 80014fa:	b0aa      	sub	sp, #168	; 0xa8
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001500:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001504:	2200      	movs	r2, #0
 8001506:	601a      	str	r2, [r3, #0]
 8001508:	605a      	str	r2, [r3, #4]
 800150a:	609a      	str	r2, [r3, #8]
 800150c:	60da      	str	r2, [r3, #12]
 800150e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001510:	f107 0314 	add.w	r3, r7, #20
 8001514:	2280      	movs	r2, #128	; 0x80
 8001516:	2100      	movs	r1, #0
 8001518:	4618      	mov	r0, r3
 800151a:	f004 f913 	bl	8005744 <memset>
  if(huart->Instance==USART3)
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	4a26      	ldr	r2, [pc, #152]	; (80015bc <HAL_UART_MspInit+0xc4>)
 8001524:	4293      	cmp	r3, r2
 8001526:	d144      	bne.n	80015b2 <HAL_UART_MspInit+0xba>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001528:	f44f 7380 	mov.w	r3, #256	; 0x100
 800152c:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 800152e:	2300      	movs	r3, #0
 8001530:	65bb      	str	r3, [r7, #88]	; 0x58
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001532:	f107 0314 	add.w	r3, r7, #20
 8001536:	4618      	mov	r0, r3
 8001538:	f001 fbb8 	bl	8002cac <HAL_RCCEx_PeriphCLKConfig>
 800153c:	4603      	mov	r3, r0
 800153e:	2b00      	cmp	r3, #0
 8001540:	d001      	beq.n	8001546 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8001542:	f7ff ff89 	bl	8001458 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001546:	4b1e      	ldr	r3, [pc, #120]	; (80015c0 <HAL_UART_MspInit+0xc8>)
 8001548:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800154a:	4a1d      	ldr	r2, [pc, #116]	; (80015c0 <HAL_UART_MspInit+0xc8>)
 800154c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001550:	6413      	str	r3, [r2, #64]	; 0x40
 8001552:	4b1b      	ldr	r3, [pc, #108]	; (80015c0 <HAL_UART_MspInit+0xc8>)
 8001554:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001556:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800155a:	613b      	str	r3, [r7, #16]
 800155c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800155e:	4b18      	ldr	r3, [pc, #96]	; (80015c0 <HAL_UART_MspInit+0xc8>)
 8001560:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001562:	4a17      	ldr	r2, [pc, #92]	; (80015c0 <HAL_UART_MspInit+0xc8>)
 8001564:	f043 0308 	orr.w	r3, r3, #8
 8001568:	6313      	str	r3, [r2, #48]	; 0x30
 800156a:	4b15      	ldr	r3, [pc, #84]	; (80015c0 <HAL_UART_MspInit+0xc8>)
 800156c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800156e:	f003 0308 	and.w	r3, r3, #8
 8001572:	60fb      	str	r3, [r7, #12]
 8001574:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8001576:	f44f 7340 	mov.w	r3, #768	; 0x300
 800157a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800157e:	2302      	movs	r3, #2
 8001580:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001584:	2300      	movs	r3, #0
 8001586:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800158a:	2303      	movs	r3, #3
 800158c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001590:	2307      	movs	r3, #7
 8001592:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001596:	f107 0394 	add.w	r3, r7, #148	; 0x94
 800159a:	4619      	mov	r1, r3
 800159c:	4809      	ldr	r0, [pc, #36]	; (80015c4 <HAL_UART_MspInit+0xcc>)
 800159e:	f000 fb2b 	bl	8001bf8 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 80015a2:	2200      	movs	r2, #0
 80015a4:	2100      	movs	r1, #0
 80015a6:	2027      	movs	r0, #39	; 0x27
 80015a8:	f000 fa5d 	bl	8001a66 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80015ac:	2027      	movs	r0, #39	; 0x27
 80015ae:	f000 fa76 	bl	8001a9e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80015b2:	bf00      	nop
 80015b4:	37a8      	adds	r7, #168	; 0xa8
 80015b6:	46bd      	mov	sp, r7
 80015b8:	bd80      	pop	{r7, pc}
 80015ba:	bf00      	nop
 80015bc:	40004800 	.word	0x40004800
 80015c0:	40023800 	.word	0x40023800
 80015c4:	40020c00 	.word	0x40020c00

080015c8 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 80015c8:	b580      	push	{r7, lr}
 80015ca:	b0aa      	sub	sp, #168	; 0xa8
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015d0:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80015d4:	2200      	movs	r2, #0
 80015d6:	601a      	str	r2, [r3, #0]
 80015d8:	605a      	str	r2, [r3, #4]
 80015da:	609a      	str	r2, [r3, #8]
 80015dc:	60da      	str	r2, [r3, #12]
 80015de:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80015e0:	f107 0314 	add.w	r3, r7, #20
 80015e4:	2280      	movs	r2, #128	; 0x80
 80015e6:	2100      	movs	r1, #0
 80015e8:	4618      	mov	r0, r3
 80015ea:	f004 f8ab 	bl	8005744 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80015f6:	d159      	bne.n	80016ac <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 80015f8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80015fc:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 80015fe:	2300      	movs	r3, #0
 8001600:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001604:	f107 0314 	add.w	r3, r7, #20
 8001608:	4618      	mov	r0, r3
 800160a:	f001 fb4f 	bl	8002cac <HAL_RCCEx_PeriphCLKConfig>
 800160e:	4603      	mov	r3, r0
 8001610:	2b00      	cmp	r3, #0
 8001612:	d001      	beq.n	8001618 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 8001614:	f7ff ff20 	bl	8001458 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001618:	4b26      	ldr	r3, [pc, #152]	; (80016b4 <HAL_PCD_MspInit+0xec>)
 800161a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800161c:	4a25      	ldr	r2, [pc, #148]	; (80016b4 <HAL_PCD_MspInit+0xec>)
 800161e:	f043 0301 	orr.w	r3, r3, #1
 8001622:	6313      	str	r3, [r2, #48]	; 0x30
 8001624:	4b23      	ldr	r3, [pc, #140]	; (80016b4 <HAL_PCD_MspInit+0xec>)
 8001626:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001628:	f003 0301 	and.w	r3, r3, #1
 800162c:	613b      	str	r3, [r7, #16]
 800162e:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8001630:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8001634:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001638:	2302      	movs	r3, #2
 800163a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800163e:	2300      	movs	r3, #0
 8001640:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001644:	2303      	movs	r3, #3
 8001646:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800164a:	230a      	movs	r3, #10
 800164c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001650:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001654:	4619      	mov	r1, r3
 8001656:	4818      	ldr	r0, [pc, #96]	; (80016b8 <HAL_PCD_MspInit+0xf0>)
 8001658:	f000 face 	bl	8001bf8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 800165c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001660:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001664:	2300      	movs	r3, #0
 8001666:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800166a:	2300      	movs	r3, #0
 800166c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001670:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001674:	4619      	mov	r1, r3
 8001676:	4810      	ldr	r0, [pc, #64]	; (80016b8 <HAL_PCD_MspInit+0xf0>)
 8001678:	f000 fabe 	bl	8001bf8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800167c:	4b0d      	ldr	r3, [pc, #52]	; (80016b4 <HAL_PCD_MspInit+0xec>)
 800167e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001680:	4a0c      	ldr	r2, [pc, #48]	; (80016b4 <HAL_PCD_MspInit+0xec>)
 8001682:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001686:	6353      	str	r3, [r2, #52]	; 0x34
 8001688:	4b0a      	ldr	r3, [pc, #40]	; (80016b4 <HAL_PCD_MspInit+0xec>)
 800168a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800168c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001690:	60fb      	str	r3, [r7, #12]
 8001692:	68fb      	ldr	r3, [r7, #12]
 8001694:	4b07      	ldr	r3, [pc, #28]	; (80016b4 <HAL_PCD_MspInit+0xec>)
 8001696:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001698:	4a06      	ldr	r2, [pc, #24]	; (80016b4 <HAL_PCD_MspInit+0xec>)
 800169a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800169e:	6453      	str	r3, [r2, #68]	; 0x44
 80016a0:	4b04      	ldr	r3, [pc, #16]	; (80016b4 <HAL_PCD_MspInit+0xec>)
 80016a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016a4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80016a8:	60bb      	str	r3, [r7, #8]
 80016aa:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 80016ac:	bf00      	nop
 80016ae:	37a8      	adds	r7, #168	; 0xa8
 80016b0:	46bd      	mov	sp, r7
 80016b2:	bd80      	pop	{r7, pc}
 80016b4:	40023800 	.word	0x40023800
 80016b8:	40020000 	.word	0x40020000

080016bc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80016bc:	b480      	push	{r7}
 80016be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80016c0:	e7fe      	b.n	80016c0 <NMI_Handler+0x4>

080016c2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80016c2:	b480      	push	{r7}
 80016c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80016c6:	e7fe      	b.n	80016c6 <HardFault_Handler+0x4>

080016c8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80016c8:	b480      	push	{r7}
 80016ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80016cc:	e7fe      	b.n	80016cc <MemManage_Handler+0x4>

080016ce <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80016ce:	b480      	push	{r7}
 80016d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80016d2:	e7fe      	b.n	80016d2 <BusFault_Handler+0x4>

080016d4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80016d4:	b480      	push	{r7}
 80016d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80016d8:	e7fe      	b.n	80016d8 <UsageFault_Handler+0x4>

080016da <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80016da:	b480      	push	{r7}
 80016dc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80016de:	bf00      	nop
 80016e0:	46bd      	mov	sp, r7
 80016e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e6:	4770      	bx	lr

080016e8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80016e8:	b480      	push	{r7}
 80016ea:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80016ec:	bf00      	nop
 80016ee:	46bd      	mov	sp, r7
 80016f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f4:	4770      	bx	lr

080016f6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80016f6:	b480      	push	{r7}
 80016f8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80016fa:	bf00      	nop
 80016fc:	46bd      	mov	sp, r7
 80016fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001702:	4770      	bx	lr

08001704 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001704:	b580      	push	{r7, lr}
 8001706:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001708:	f000 f88e 	bl	8001828 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800170c:	bf00      	nop
 800170e:	bd80      	pop	{r7, pc}

08001710 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001710:	b580      	push	{r7, lr}
 8001712:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001714:	4802      	ldr	r0, [pc, #8]	; (8001720 <USART3_IRQHandler+0x10>)
 8001716:	f002 f9d9 	bl	8003acc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800171a:	bf00      	nop
 800171c:	bd80      	pop	{r7, pc}
 800171e:	bf00      	nop
 8001720:	200002d4 	.word	0x200002d4

08001724 <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 8001724:	b580      	push	{r7, lr}
 8001726:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim13);
 8001728:	4802      	ldr	r0, [pc, #8]	; (8001734 <TIM8_UP_TIM13_IRQHandler+0x10>)
 800172a:	f001 fed9 	bl	80034e0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 800172e:	bf00      	nop
 8001730:	bd80      	pop	{r7, pc}
 8001732:	bf00      	nop
 8001734:	20000288 	.word	0x20000288

08001738 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001738:	b480      	push	{r7}
 800173a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800173c:	4b06      	ldr	r3, [pc, #24]	; (8001758 <SystemInit+0x20>)
 800173e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001742:	4a05      	ldr	r2, [pc, #20]	; (8001758 <SystemInit+0x20>)
 8001744:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001748:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800174c:	bf00      	nop
 800174e:	46bd      	mov	sp, r7
 8001750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001754:	4770      	bx	lr
 8001756:	bf00      	nop
 8001758:	e000ed00 	.word	0xe000ed00

0800175c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800175c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001794 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001760:	480d      	ldr	r0, [pc, #52]	; (8001798 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001762:	490e      	ldr	r1, [pc, #56]	; (800179c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001764:	4a0e      	ldr	r2, [pc, #56]	; (80017a0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001766:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001768:	e002      	b.n	8001770 <LoopCopyDataInit>

0800176a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800176a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800176c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800176e:	3304      	adds	r3, #4

08001770 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001770:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001772:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001774:	d3f9      	bcc.n	800176a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001776:	4a0b      	ldr	r2, [pc, #44]	; (80017a4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001778:	4c0b      	ldr	r4, [pc, #44]	; (80017a8 <LoopFillZerobss+0x26>)
  movs r3, #0
 800177a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800177c:	e001      	b.n	8001782 <LoopFillZerobss>

0800177e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800177e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001780:	3204      	adds	r2, #4

08001782 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001782:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001784:	d3fb      	bcc.n	800177e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001786:	f7ff ffd7 	bl	8001738 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800178a:	f003 ffe9 	bl	8005760 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800178e:	f7ff fc1b 	bl	8000fc8 <main>
  bx  lr    
 8001792:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001794:	20040000 	.word	0x20040000
  ldr r0, =_sdata
 8001798:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800179c:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 80017a0:	08005dbc 	.word	0x08005dbc
  ldr r2, =_sbss
 80017a4:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 80017a8:	200009a4 	.word	0x200009a4

080017ac <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80017ac:	e7fe      	b.n	80017ac <ADC_IRQHandler>

080017ae <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80017ae:	b580      	push	{r7, lr}
 80017b0:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80017b2:	2003      	movs	r0, #3
 80017b4:	f000 f94c 	bl	8001a50 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80017b8:	2000      	movs	r0, #0
 80017ba:	f000 f805 	bl	80017c8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80017be:	f7ff fe51 	bl	8001464 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80017c2:	2300      	movs	r3, #0
}
 80017c4:	4618      	mov	r0, r3
 80017c6:	bd80      	pop	{r7, pc}

080017c8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80017c8:	b580      	push	{r7, lr}
 80017ca:	b082      	sub	sp, #8
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80017d0:	4b12      	ldr	r3, [pc, #72]	; (800181c <HAL_InitTick+0x54>)
 80017d2:	681a      	ldr	r2, [r3, #0]
 80017d4:	4b12      	ldr	r3, [pc, #72]	; (8001820 <HAL_InitTick+0x58>)
 80017d6:	781b      	ldrb	r3, [r3, #0]
 80017d8:	4619      	mov	r1, r3
 80017da:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80017de:	fbb3 f3f1 	udiv	r3, r3, r1
 80017e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80017e6:	4618      	mov	r0, r3
 80017e8:	f000 f967 	bl	8001aba <HAL_SYSTICK_Config>
 80017ec:	4603      	mov	r3, r0
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d001      	beq.n	80017f6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80017f2:	2301      	movs	r3, #1
 80017f4:	e00e      	b.n	8001814 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	2b0f      	cmp	r3, #15
 80017fa:	d80a      	bhi.n	8001812 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80017fc:	2200      	movs	r2, #0
 80017fe:	6879      	ldr	r1, [r7, #4]
 8001800:	f04f 30ff 	mov.w	r0, #4294967295
 8001804:	f000 f92f 	bl	8001a66 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001808:	4a06      	ldr	r2, [pc, #24]	; (8001824 <HAL_InitTick+0x5c>)
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800180e:	2300      	movs	r3, #0
 8001810:	e000      	b.n	8001814 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001812:	2301      	movs	r3, #1
}
 8001814:	4618      	mov	r0, r3
 8001816:	3708      	adds	r7, #8
 8001818:	46bd      	mov	sp, r7
 800181a:	bd80      	pop	{r7, pc}
 800181c:	20000004 	.word	0x20000004
 8001820:	2000000c 	.word	0x2000000c
 8001824:	20000008 	.word	0x20000008

08001828 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001828:	b480      	push	{r7}
 800182a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800182c:	4b06      	ldr	r3, [pc, #24]	; (8001848 <HAL_IncTick+0x20>)
 800182e:	781b      	ldrb	r3, [r3, #0]
 8001830:	461a      	mov	r2, r3
 8001832:	4b06      	ldr	r3, [pc, #24]	; (800184c <HAL_IncTick+0x24>)
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	4413      	add	r3, r2
 8001838:	4a04      	ldr	r2, [pc, #16]	; (800184c <HAL_IncTick+0x24>)
 800183a:	6013      	str	r3, [r2, #0]
}
 800183c:	bf00      	nop
 800183e:	46bd      	mov	sp, r7
 8001840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001844:	4770      	bx	lr
 8001846:	bf00      	nop
 8001848:	2000000c 	.word	0x2000000c
 800184c:	20000868 	.word	0x20000868

08001850 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001850:	b480      	push	{r7}
 8001852:	af00      	add	r7, sp, #0
  return uwTick;
 8001854:	4b03      	ldr	r3, [pc, #12]	; (8001864 <HAL_GetTick+0x14>)
 8001856:	681b      	ldr	r3, [r3, #0]
}
 8001858:	4618      	mov	r0, r3
 800185a:	46bd      	mov	sp, r7
 800185c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001860:	4770      	bx	lr
 8001862:	bf00      	nop
 8001864:	20000868 	.word	0x20000868

08001868 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001868:	b580      	push	{r7, lr}
 800186a:	b084      	sub	sp, #16
 800186c:	af00      	add	r7, sp, #0
 800186e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001870:	f7ff ffee 	bl	8001850 <HAL_GetTick>
 8001874:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800187a:	68fb      	ldr	r3, [r7, #12]
 800187c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001880:	d005      	beq.n	800188e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001882:	4b0a      	ldr	r3, [pc, #40]	; (80018ac <HAL_Delay+0x44>)
 8001884:	781b      	ldrb	r3, [r3, #0]
 8001886:	461a      	mov	r2, r3
 8001888:	68fb      	ldr	r3, [r7, #12]
 800188a:	4413      	add	r3, r2
 800188c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800188e:	bf00      	nop
 8001890:	f7ff ffde 	bl	8001850 <HAL_GetTick>
 8001894:	4602      	mov	r2, r0
 8001896:	68bb      	ldr	r3, [r7, #8]
 8001898:	1ad3      	subs	r3, r2, r3
 800189a:	68fa      	ldr	r2, [r7, #12]
 800189c:	429a      	cmp	r2, r3
 800189e:	d8f7      	bhi.n	8001890 <HAL_Delay+0x28>
  {
  }
}
 80018a0:	bf00      	nop
 80018a2:	bf00      	nop
 80018a4:	3710      	adds	r7, #16
 80018a6:	46bd      	mov	sp, r7
 80018a8:	bd80      	pop	{r7, pc}
 80018aa:	bf00      	nop
 80018ac:	2000000c 	.word	0x2000000c

080018b0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018b0:	b480      	push	{r7}
 80018b2:	b085      	sub	sp, #20
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	f003 0307 	and.w	r3, r3, #7
 80018be:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80018c0:	4b0b      	ldr	r3, [pc, #44]	; (80018f0 <__NVIC_SetPriorityGrouping+0x40>)
 80018c2:	68db      	ldr	r3, [r3, #12]
 80018c4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80018c6:	68ba      	ldr	r2, [r7, #8]
 80018c8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80018cc:	4013      	ands	r3, r2
 80018ce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80018d0:	68fb      	ldr	r3, [r7, #12]
 80018d2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80018d4:	68bb      	ldr	r3, [r7, #8]
 80018d6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80018d8:	4b06      	ldr	r3, [pc, #24]	; (80018f4 <__NVIC_SetPriorityGrouping+0x44>)
 80018da:	4313      	orrs	r3, r2
 80018dc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80018de:	4a04      	ldr	r2, [pc, #16]	; (80018f0 <__NVIC_SetPriorityGrouping+0x40>)
 80018e0:	68bb      	ldr	r3, [r7, #8]
 80018e2:	60d3      	str	r3, [r2, #12]
}
 80018e4:	bf00      	nop
 80018e6:	3714      	adds	r7, #20
 80018e8:	46bd      	mov	sp, r7
 80018ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ee:	4770      	bx	lr
 80018f0:	e000ed00 	.word	0xe000ed00
 80018f4:	05fa0000 	.word	0x05fa0000

080018f8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80018f8:	b480      	push	{r7}
 80018fa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80018fc:	4b04      	ldr	r3, [pc, #16]	; (8001910 <__NVIC_GetPriorityGrouping+0x18>)
 80018fe:	68db      	ldr	r3, [r3, #12]
 8001900:	0a1b      	lsrs	r3, r3, #8
 8001902:	f003 0307 	and.w	r3, r3, #7
}
 8001906:	4618      	mov	r0, r3
 8001908:	46bd      	mov	sp, r7
 800190a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800190e:	4770      	bx	lr
 8001910:	e000ed00 	.word	0xe000ed00

08001914 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001914:	b480      	push	{r7}
 8001916:	b083      	sub	sp, #12
 8001918:	af00      	add	r7, sp, #0
 800191a:	4603      	mov	r3, r0
 800191c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800191e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001922:	2b00      	cmp	r3, #0
 8001924:	db0b      	blt.n	800193e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001926:	79fb      	ldrb	r3, [r7, #7]
 8001928:	f003 021f 	and.w	r2, r3, #31
 800192c:	4907      	ldr	r1, [pc, #28]	; (800194c <__NVIC_EnableIRQ+0x38>)
 800192e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001932:	095b      	lsrs	r3, r3, #5
 8001934:	2001      	movs	r0, #1
 8001936:	fa00 f202 	lsl.w	r2, r0, r2
 800193a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800193e:	bf00      	nop
 8001940:	370c      	adds	r7, #12
 8001942:	46bd      	mov	sp, r7
 8001944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001948:	4770      	bx	lr
 800194a:	bf00      	nop
 800194c:	e000e100 	.word	0xe000e100

08001950 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001950:	b480      	push	{r7}
 8001952:	b083      	sub	sp, #12
 8001954:	af00      	add	r7, sp, #0
 8001956:	4603      	mov	r3, r0
 8001958:	6039      	str	r1, [r7, #0]
 800195a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800195c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001960:	2b00      	cmp	r3, #0
 8001962:	db0a      	blt.n	800197a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001964:	683b      	ldr	r3, [r7, #0]
 8001966:	b2da      	uxtb	r2, r3
 8001968:	490c      	ldr	r1, [pc, #48]	; (800199c <__NVIC_SetPriority+0x4c>)
 800196a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800196e:	0112      	lsls	r2, r2, #4
 8001970:	b2d2      	uxtb	r2, r2
 8001972:	440b      	add	r3, r1
 8001974:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001978:	e00a      	b.n	8001990 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800197a:	683b      	ldr	r3, [r7, #0]
 800197c:	b2da      	uxtb	r2, r3
 800197e:	4908      	ldr	r1, [pc, #32]	; (80019a0 <__NVIC_SetPriority+0x50>)
 8001980:	79fb      	ldrb	r3, [r7, #7]
 8001982:	f003 030f 	and.w	r3, r3, #15
 8001986:	3b04      	subs	r3, #4
 8001988:	0112      	lsls	r2, r2, #4
 800198a:	b2d2      	uxtb	r2, r2
 800198c:	440b      	add	r3, r1
 800198e:	761a      	strb	r2, [r3, #24]
}
 8001990:	bf00      	nop
 8001992:	370c      	adds	r7, #12
 8001994:	46bd      	mov	sp, r7
 8001996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800199a:	4770      	bx	lr
 800199c:	e000e100 	.word	0xe000e100
 80019a0:	e000ed00 	.word	0xe000ed00

080019a4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80019a4:	b480      	push	{r7}
 80019a6:	b089      	sub	sp, #36	; 0x24
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	60f8      	str	r0, [r7, #12]
 80019ac:	60b9      	str	r1, [r7, #8]
 80019ae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80019b0:	68fb      	ldr	r3, [r7, #12]
 80019b2:	f003 0307 	and.w	r3, r3, #7
 80019b6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80019b8:	69fb      	ldr	r3, [r7, #28]
 80019ba:	f1c3 0307 	rsb	r3, r3, #7
 80019be:	2b04      	cmp	r3, #4
 80019c0:	bf28      	it	cs
 80019c2:	2304      	movcs	r3, #4
 80019c4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80019c6:	69fb      	ldr	r3, [r7, #28]
 80019c8:	3304      	adds	r3, #4
 80019ca:	2b06      	cmp	r3, #6
 80019cc:	d902      	bls.n	80019d4 <NVIC_EncodePriority+0x30>
 80019ce:	69fb      	ldr	r3, [r7, #28]
 80019d0:	3b03      	subs	r3, #3
 80019d2:	e000      	b.n	80019d6 <NVIC_EncodePriority+0x32>
 80019d4:	2300      	movs	r3, #0
 80019d6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019d8:	f04f 32ff 	mov.w	r2, #4294967295
 80019dc:	69bb      	ldr	r3, [r7, #24]
 80019de:	fa02 f303 	lsl.w	r3, r2, r3
 80019e2:	43da      	mvns	r2, r3
 80019e4:	68bb      	ldr	r3, [r7, #8]
 80019e6:	401a      	ands	r2, r3
 80019e8:	697b      	ldr	r3, [r7, #20]
 80019ea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80019ec:	f04f 31ff 	mov.w	r1, #4294967295
 80019f0:	697b      	ldr	r3, [r7, #20]
 80019f2:	fa01 f303 	lsl.w	r3, r1, r3
 80019f6:	43d9      	mvns	r1, r3
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019fc:	4313      	orrs	r3, r2
         );
}
 80019fe:	4618      	mov	r0, r3
 8001a00:	3724      	adds	r7, #36	; 0x24
 8001a02:	46bd      	mov	sp, r7
 8001a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a08:	4770      	bx	lr
	...

08001a0c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	b082      	sub	sp, #8
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	3b01      	subs	r3, #1
 8001a18:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001a1c:	d301      	bcc.n	8001a22 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001a1e:	2301      	movs	r3, #1
 8001a20:	e00f      	b.n	8001a42 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001a22:	4a0a      	ldr	r2, [pc, #40]	; (8001a4c <SysTick_Config+0x40>)
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	3b01      	subs	r3, #1
 8001a28:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001a2a:	210f      	movs	r1, #15
 8001a2c:	f04f 30ff 	mov.w	r0, #4294967295
 8001a30:	f7ff ff8e 	bl	8001950 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001a34:	4b05      	ldr	r3, [pc, #20]	; (8001a4c <SysTick_Config+0x40>)
 8001a36:	2200      	movs	r2, #0
 8001a38:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001a3a:	4b04      	ldr	r3, [pc, #16]	; (8001a4c <SysTick_Config+0x40>)
 8001a3c:	2207      	movs	r2, #7
 8001a3e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001a40:	2300      	movs	r3, #0
}
 8001a42:	4618      	mov	r0, r3
 8001a44:	3708      	adds	r7, #8
 8001a46:	46bd      	mov	sp, r7
 8001a48:	bd80      	pop	{r7, pc}
 8001a4a:	bf00      	nop
 8001a4c:	e000e010 	.word	0xe000e010

08001a50 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a50:	b580      	push	{r7, lr}
 8001a52:	b082      	sub	sp, #8
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001a58:	6878      	ldr	r0, [r7, #4]
 8001a5a:	f7ff ff29 	bl	80018b0 <__NVIC_SetPriorityGrouping>
}
 8001a5e:	bf00      	nop
 8001a60:	3708      	adds	r7, #8
 8001a62:	46bd      	mov	sp, r7
 8001a64:	bd80      	pop	{r7, pc}

08001a66 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001a66:	b580      	push	{r7, lr}
 8001a68:	b086      	sub	sp, #24
 8001a6a:	af00      	add	r7, sp, #0
 8001a6c:	4603      	mov	r3, r0
 8001a6e:	60b9      	str	r1, [r7, #8]
 8001a70:	607a      	str	r2, [r7, #4]
 8001a72:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001a74:	2300      	movs	r3, #0
 8001a76:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001a78:	f7ff ff3e 	bl	80018f8 <__NVIC_GetPriorityGrouping>
 8001a7c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a7e:	687a      	ldr	r2, [r7, #4]
 8001a80:	68b9      	ldr	r1, [r7, #8]
 8001a82:	6978      	ldr	r0, [r7, #20]
 8001a84:	f7ff ff8e 	bl	80019a4 <NVIC_EncodePriority>
 8001a88:	4602      	mov	r2, r0
 8001a8a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a8e:	4611      	mov	r1, r2
 8001a90:	4618      	mov	r0, r3
 8001a92:	f7ff ff5d 	bl	8001950 <__NVIC_SetPriority>
}
 8001a96:	bf00      	nop
 8001a98:	3718      	adds	r7, #24
 8001a9a:	46bd      	mov	sp, r7
 8001a9c:	bd80      	pop	{r7, pc}

08001a9e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a9e:	b580      	push	{r7, lr}
 8001aa0:	b082      	sub	sp, #8
 8001aa2:	af00      	add	r7, sp, #0
 8001aa4:	4603      	mov	r3, r0
 8001aa6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001aa8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001aac:	4618      	mov	r0, r3
 8001aae:	f7ff ff31 	bl	8001914 <__NVIC_EnableIRQ>
}
 8001ab2:	bf00      	nop
 8001ab4:	3708      	adds	r7, #8
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	bd80      	pop	{r7, pc}

08001aba <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001aba:	b580      	push	{r7, lr}
 8001abc:	b082      	sub	sp, #8
 8001abe:	af00      	add	r7, sp, #0
 8001ac0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001ac2:	6878      	ldr	r0, [r7, #4]
 8001ac4:	f7ff ffa2 	bl	8001a0c <SysTick_Config>
 8001ac8:	4603      	mov	r3, r0
}
 8001aca:	4618      	mov	r0, r3
 8001acc:	3708      	adds	r7, #8
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	bd80      	pop	{r7, pc}

08001ad2 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001ad2:	b580      	push	{r7, lr}
 8001ad4:	b084      	sub	sp, #16
 8001ad6:	af00      	add	r7, sp, #0
 8001ad8:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ade:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001ae0:	f7ff feb6 	bl	8001850 <HAL_GetTick>
 8001ae4:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001aec:	b2db      	uxtb	r3, r3
 8001aee:	2b02      	cmp	r3, #2
 8001af0:	d008      	beq.n	8001b04 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	2280      	movs	r2, #128	; 0x80
 8001af6:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	2200      	movs	r2, #0
 8001afc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001b00:	2301      	movs	r3, #1
 8001b02:	e052      	b.n	8001baa <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	681a      	ldr	r2, [r3, #0]
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	f022 0216 	bic.w	r2, r2, #22
 8001b12:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	695a      	ldr	r2, [r3, #20]
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001b22:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d103      	bne.n	8001b34 <HAL_DMA_Abort+0x62>
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d007      	beq.n	8001b44 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	681a      	ldr	r2, [r3, #0]
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	f022 0208 	bic.w	r2, r2, #8
 8001b42:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	681a      	ldr	r2, [r3, #0]
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	f022 0201 	bic.w	r2, r2, #1
 8001b52:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001b54:	e013      	b.n	8001b7e <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001b56:	f7ff fe7b 	bl	8001850 <HAL_GetTick>
 8001b5a:	4602      	mov	r2, r0
 8001b5c:	68bb      	ldr	r3, [r7, #8]
 8001b5e:	1ad3      	subs	r3, r2, r3
 8001b60:	2b05      	cmp	r3, #5
 8001b62:	d90c      	bls.n	8001b7e <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	2220      	movs	r2, #32
 8001b68:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	2203      	movs	r2, #3
 8001b6e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	2200      	movs	r2, #0
 8001b76:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 8001b7a:	2303      	movs	r3, #3
 8001b7c:	e015      	b.n	8001baa <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	f003 0301 	and.w	r3, r3, #1
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d1e4      	bne.n	8001b56 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b90:	223f      	movs	r2, #63	; 0x3f
 8001b92:	409a      	lsls	r2, r3
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	2201      	movs	r2, #1
 8001b9c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	2200      	movs	r2, #0
 8001ba4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 8001ba8:	2300      	movs	r3, #0
}
 8001baa:	4618      	mov	r0, r3
 8001bac:	3710      	adds	r7, #16
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	bd80      	pop	{r7, pc}

08001bb2 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001bb2:	b480      	push	{r7}
 8001bb4:	b083      	sub	sp, #12
 8001bb6:	af00      	add	r7, sp, #0
 8001bb8:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001bc0:	b2db      	uxtb	r3, r3
 8001bc2:	2b02      	cmp	r3, #2
 8001bc4:	d004      	beq.n	8001bd0 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	2280      	movs	r2, #128	; 0x80
 8001bca:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001bcc:	2301      	movs	r3, #1
 8001bce:	e00c      	b.n	8001bea <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	2205      	movs	r2, #5
 8001bd4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	681a      	ldr	r2, [r3, #0]
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	f022 0201 	bic.w	r2, r2, #1
 8001be6:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001be8:	2300      	movs	r3, #0
}
 8001bea:	4618      	mov	r0, r3
 8001bec:	370c      	adds	r7, #12
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf4:	4770      	bx	lr
	...

08001bf8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001bf8:	b480      	push	{r7}
 8001bfa:	b089      	sub	sp, #36	; 0x24
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	6078      	str	r0, [r7, #4]
 8001c00:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8001c02:	2300      	movs	r3, #0
 8001c04:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8001c06:	2300      	movs	r3, #0
 8001c08:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8001c0a:	2300      	movs	r3, #0
 8001c0c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8001c0e:	2300      	movs	r3, #0
 8001c10:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8001c12:	2300      	movs	r3, #0
 8001c14:	61fb      	str	r3, [r7, #28]
 8001c16:	e169      	b.n	8001eec <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8001c18:	2201      	movs	r2, #1
 8001c1a:	69fb      	ldr	r3, [r7, #28]
 8001c1c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c20:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001c22:	683b      	ldr	r3, [r7, #0]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	697a      	ldr	r2, [r7, #20]
 8001c28:	4013      	ands	r3, r2
 8001c2a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001c2c:	693a      	ldr	r2, [r7, #16]
 8001c2e:	697b      	ldr	r3, [r7, #20]
 8001c30:	429a      	cmp	r2, r3
 8001c32:	f040 8158 	bne.w	8001ee6 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001c36:	683b      	ldr	r3, [r7, #0]
 8001c38:	685b      	ldr	r3, [r3, #4]
 8001c3a:	f003 0303 	and.w	r3, r3, #3
 8001c3e:	2b01      	cmp	r3, #1
 8001c40:	d005      	beq.n	8001c4e <HAL_GPIO_Init+0x56>
 8001c42:	683b      	ldr	r3, [r7, #0]
 8001c44:	685b      	ldr	r3, [r3, #4]
 8001c46:	f003 0303 	and.w	r3, r3, #3
 8001c4a:	2b02      	cmp	r3, #2
 8001c4c:	d130      	bne.n	8001cb0 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	689b      	ldr	r3, [r3, #8]
 8001c52:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001c54:	69fb      	ldr	r3, [r7, #28]
 8001c56:	005b      	lsls	r3, r3, #1
 8001c58:	2203      	movs	r2, #3
 8001c5a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c5e:	43db      	mvns	r3, r3
 8001c60:	69ba      	ldr	r2, [r7, #24]
 8001c62:	4013      	ands	r3, r2
 8001c64:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8001c66:	683b      	ldr	r3, [r7, #0]
 8001c68:	68da      	ldr	r2, [r3, #12]
 8001c6a:	69fb      	ldr	r3, [r7, #28]
 8001c6c:	005b      	lsls	r3, r3, #1
 8001c6e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c72:	69ba      	ldr	r2, [r7, #24]
 8001c74:	4313      	orrs	r3, r2
 8001c76:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	69ba      	ldr	r2, [r7, #24]
 8001c7c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	685b      	ldr	r3, [r3, #4]
 8001c82:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001c84:	2201      	movs	r2, #1
 8001c86:	69fb      	ldr	r3, [r7, #28]
 8001c88:	fa02 f303 	lsl.w	r3, r2, r3
 8001c8c:	43db      	mvns	r3, r3
 8001c8e:	69ba      	ldr	r2, [r7, #24]
 8001c90:	4013      	ands	r3, r2
 8001c92:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001c94:	683b      	ldr	r3, [r7, #0]
 8001c96:	685b      	ldr	r3, [r3, #4]
 8001c98:	091b      	lsrs	r3, r3, #4
 8001c9a:	f003 0201 	and.w	r2, r3, #1
 8001c9e:	69fb      	ldr	r3, [r7, #28]
 8001ca0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ca4:	69ba      	ldr	r2, [r7, #24]
 8001ca6:	4313      	orrs	r3, r2
 8001ca8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	69ba      	ldr	r2, [r7, #24]
 8001cae:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001cb0:	683b      	ldr	r3, [r7, #0]
 8001cb2:	685b      	ldr	r3, [r3, #4]
 8001cb4:	f003 0303 	and.w	r3, r3, #3
 8001cb8:	2b03      	cmp	r3, #3
 8001cba:	d017      	beq.n	8001cec <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	68db      	ldr	r3, [r3, #12]
 8001cc0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8001cc2:	69fb      	ldr	r3, [r7, #28]
 8001cc4:	005b      	lsls	r3, r3, #1
 8001cc6:	2203      	movs	r2, #3
 8001cc8:	fa02 f303 	lsl.w	r3, r2, r3
 8001ccc:	43db      	mvns	r3, r3
 8001cce:	69ba      	ldr	r2, [r7, #24]
 8001cd0:	4013      	ands	r3, r2
 8001cd2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8001cd4:	683b      	ldr	r3, [r7, #0]
 8001cd6:	689a      	ldr	r2, [r3, #8]
 8001cd8:	69fb      	ldr	r3, [r7, #28]
 8001cda:	005b      	lsls	r3, r3, #1
 8001cdc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ce0:	69ba      	ldr	r2, [r7, #24]
 8001ce2:	4313      	orrs	r3, r2
 8001ce4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	69ba      	ldr	r2, [r7, #24]
 8001cea:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001cec:	683b      	ldr	r3, [r7, #0]
 8001cee:	685b      	ldr	r3, [r3, #4]
 8001cf0:	f003 0303 	and.w	r3, r3, #3
 8001cf4:	2b02      	cmp	r3, #2
 8001cf6:	d123      	bne.n	8001d40 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001cf8:	69fb      	ldr	r3, [r7, #28]
 8001cfa:	08da      	lsrs	r2, r3, #3
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	3208      	adds	r2, #8
 8001d00:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d04:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001d06:	69fb      	ldr	r3, [r7, #28]
 8001d08:	f003 0307 	and.w	r3, r3, #7
 8001d0c:	009b      	lsls	r3, r3, #2
 8001d0e:	220f      	movs	r2, #15
 8001d10:	fa02 f303 	lsl.w	r3, r2, r3
 8001d14:	43db      	mvns	r3, r3
 8001d16:	69ba      	ldr	r2, [r7, #24]
 8001d18:	4013      	ands	r3, r2
 8001d1a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001d1c:	683b      	ldr	r3, [r7, #0]
 8001d1e:	691a      	ldr	r2, [r3, #16]
 8001d20:	69fb      	ldr	r3, [r7, #28]
 8001d22:	f003 0307 	and.w	r3, r3, #7
 8001d26:	009b      	lsls	r3, r3, #2
 8001d28:	fa02 f303 	lsl.w	r3, r2, r3
 8001d2c:	69ba      	ldr	r2, [r7, #24]
 8001d2e:	4313      	orrs	r3, r2
 8001d30:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8001d32:	69fb      	ldr	r3, [r7, #28]
 8001d34:	08da      	lsrs	r2, r3, #3
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	3208      	adds	r2, #8
 8001d3a:	69b9      	ldr	r1, [r7, #24]
 8001d3c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001d46:	69fb      	ldr	r3, [r7, #28]
 8001d48:	005b      	lsls	r3, r3, #1
 8001d4a:	2203      	movs	r2, #3
 8001d4c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d50:	43db      	mvns	r3, r3
 8001d52:	69ba      	ldr	r2, [r7, #24]
 8001d54:	4013      	ands	r3, r2
 8001d56:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001d58:	683b      	ldr	r3, [r7, #0]
 8001d5a:	685b      	ldr	r3, [r3, #4]
 8001d5c:	f003 0203 	and.w	r2, r3, #3
 8001d60:	69fb      	ldr	r3, [r7, #28]
 8001d62:	005b      	lsls	r3, r3, #1
 8001d64:	fa02 f303 	lsl.w	r3, r2, r3
 8001d68:	69ba      	ldr	r2, [r7, #24]
 8001d6a:	4313      	orrs	r3, r2
 8001d6c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	69ba      	ldr	r2, [r7, #24]
 8001d72:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001d74:	683b      	ldr	r3, [r7, #0]
 8001d76:	685b      	ldr	r3, [r3, #4]
 8001d78:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	f000 80b2 	beq.w	8001ee6 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d82:	4b60      	ldr	r3, [pc, #384]	; (8001f04 <HAL_GPIO_Init+0x30c>)
 8001d84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d86:	4a5f      	ldr	r2, [pc, #380]	; (8001f04 <HAL_GPIO_Init+0x30c>)
 8001d88:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001d8c:	6453      	str	r3, [r2, #68]	; 0x44
 8001d8e:	4b5d      	ldr	r3, [pc, #372]	; (8001f04 <HAL_GPIO_Init+0x30c>)
 8001d90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d92:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001d96:	60fb      	str	r3, [r7, #12]
 8001d98:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8001d9a:	4a5b      	ldr	r2, [pc, #364]	; (8001f08 <HAL_GPIO_Init+0x310>)
 8001d9c:	69fb      	ldr	r3, [r7, #28]
 8001d9e:	089b      	lsrs	r3, r3, #2
 8001da0:	3302      	adds	r3, #2
 8001da2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001da6:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001da8:	69fb      	ldr	r3, [r7, #28]
 8001daa:	f003 0303 	and.w	r3, r3, #3
 8001dae:	009b      	lsls	r3, r3, #2
 8001db0:	220f      	movs	r2, #15
 8001db2:	fa02 f303 	lsl.w	r3, r2, r3
 8001db6:	43db      	mvns	r3, r3
 8001db8:	69ba      	ldr	r2, [r7, #24]
 8001dba:	4013      	ands	r3, r2
 8001dbc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	4a52      	ldr	r2, [pc, #328]	; (8001f0c <HAL_GPIO_Init+0x314>)
 8001dc2:	4293      	cmp	r3, r2
 8001dc4:	d02b      	beq.n	8001e1e <HAL_GPIO_Init+0x226>
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	4a51      	ldr	r2, [pc, #324]	; (8001f10 <HAL_GPIO_Init+0x318>)
 8001dca:	4293      	cmp	r3, r2
 8001dcc:	d025      	beq.n	8001e1a <HAL_GPIO_Init+0x222>
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	4a50      	ldr	r2, [pc, #320]	; (8001f14 <HAL_GPIO_Init+0x31c>)
 8001dd2:	4293      	cmp	r3, r2
 8001dd4:	d01f      	beq.n	8001e16 <HAL_GPIO_Init+0x21e>
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	4a4f      	ldr	r2, [pc, #316]	; (8001f18 <HAL_GPIO_Init+0x320>)
 8001dda:	4293      	cmp	r3, r2
 8001ddc:	d019      	beq.n	8001e12 <HAL_GPIO_Init+0x21a>
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	4a4e      	ldr	r2, [pc, #312]	; (8001f1c <HAL_GPIO_Init+0x324>)
 8001de2:	4293      	cmp	r3, r2
 8001de4:	d013      	beq.n	8001e0e <HAL_GPIO_Init+0x216>
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	4a4d      	ldr	r2, [pc, #308]	; (8001f20 <HAL_GPIO_Init+0x328>)
 8001dea:	4293      	cmp	r3, r2
 8001dec:	d00d      	beq.n	8001e0a <HAL_GPIO_Init+0x212>
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	4a4c      	ldr	r2, [pc, #304]	; (8001f24 <HAL_GPIO_Init+0x32c>)
 8001df2:	4293      	cmp	r3, r2
 8001df4:	d007      	beq.n	8001e06 <HAL_GPIO_Init+0x20e>
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	4a4b      	ldr	r2, [pc, #300]	; (8001f28 <HAL_GPIO_Init+0x330>)
 8001dfa:	4293      	cmp	r3, r2
 8001dfc:	d101      	bne.n	8001e02 <HAL_GPIO_Init+0x20a>
 8001dfe:	2307      	movs	r3, #7
 8001e00:	e00e      	b.n	8001e20 <HAL_GPIO_Init+0x228>
 8001e02:	2308      	movs	r3, #8
 8001e04:	e00c      	b.n	8001e20 <HAL_GPIO_Init+0x228>
 8001e06:	2306      	movs	r3, #6
 8001e08:	e00a      	b.n	8001e20 <HAL_GPIO_Init+0x228>
 8001e0a:	2305      	movs	r3, #5
 8001e0c:	e008      	b.n	8001e20 <HAL_GPIO_Init+0x228>
 8001e0e:	2304      	movs	r3, #4
 8001e10:	e006      	b.n	8001e20 <HAL_GPIO_Init+0x228>
 8001e12:	2303      	movs	r3, #3
 8001e14:	e004      	b.n	8001e20 <HAL_GPIO_Init+0x228>
 8001e16:	2302      	movs	r3, #2
 8001e18:	e002      	b.n	8001e20 <HAL_GPIO_Init+0x228>
 8001e1a:	2301      	movs	r3, #1
 8001e1c:	e000      	b.n	8001e20 <HAL_GPIO_Init+0x228>
 8001e1e:	2300      	movs	r3, #0
 8001e20:	69fa      	ldr	r2, [r7, #28]
 8001e22:	f002 0203 	and.w	r2, r2, #3
 8001e26:	0092      	lsls	r2, r2, #2
 8001e28:	4093      	lsls	r3, r2
 8001e2a:	69ba      	ldr	r2, [r7, #24]
 8001e2c:	4313      	orrs	r3, r2
 8001e2e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001e30:	4935      	ldr	r1, [pc, #212]	; (8001f08 <HAL_GPIO_Init+0x310>)
 8001e32:	69fb      	ldr	r3, [r7, #28]
 8001e34:	089b      	lsrs	r3, r3, #2
 8001e36:	3302      	adds	r3, #2
 8001e38:	69ba      	ldr	r2, [r7, #24]
 8001e3a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001e3e:	4b3b      	ldr	r3, [pc, #236]	; (8001f2c <HAL_GPIO_Init+0x334>)
 8001e40:	689b      	ldr	r3, [r3, #8]
 8001e42:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e44:	693b      	ldr	r3, [r7, #16]
 8001e46:	43db      	mvns	r3, r3
 8001e48:	69ba      	ldr	r2, [r7, #24]
 8001e4a:	4013      	ands	r3, r2
 8001e4c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001e4e:	683b      	ldr	r3, [r7, #0]
 8001e50:	685b      	ldr	r3, [r3, #4]
 8001e52:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d003      	beq.n	8001e62 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001e5a:	69ba      	ldr	r2, [r7, #24]
 8001e5c:	693b      	ldr	r3, [r7, #16]
 8001e5e:	4313      	orrs	r3, r2
 8001e60:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001e62:	4a32      	ldr	r2, [pc, #200]	; (8001f2c <HAL_GPIO_Init+0x334>)
 8001e64:	69bb      	ldr	r3, [r7, #24]
 8001e66:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001e68:	4b30      	ldr	r3, [pc, #192]	; (8001f2c <HAL_GPIO_Init+0x334>)
 8001e6a:	68db      	ldr	r3, [r3, #12]
 8001e6c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e6e:	693b      	ldr	r3, [r7, #16]
 8001e70:	43db      	mvns	r3, r3
 8001e72:	69ba      	ldr	r2, [r7, #24]
 8001e74:	4013      	ands	r3, r2
 8001e76:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001e78:	683b      	ldr	r3, [r7, #0]
 8001e7a:	685b      	ldr	r3, [r3, #4]
 8001e7c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d003      	beq.n	8001e8c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001e84:	69ba      	ldr	r2, [r7, #24]
 8001e86:	693b      	ldr	r3, [r7, #16]
 8001e88:	4313      	orrs	r3, r2
 8001e8a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001e8c:	4a27      	ldr	r2, [pc, #156]	; (8001f2c <HAL_GPIO_Init+0x334>)
 8001e8e:	69bb      	ldr	r3, [r7, #24]
 8001e90:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001e92:	4b26      	ldr	r3, [pc, #152]	; (8001f2c <HAL_GPIO_Init+0x334>)
 8001e94:	685b      	ldr	r3, [r3, #4]
 8001e96:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e98:	693b      	ldr	r3, [r7, #16]
 8001e9a:	43db      	mvns	r3, r3
 8001e9c:	69ba      	ldr	r2, [r7, #24]
 8001e9e:	4013      	ands	r3, r2
 8001ea0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001ea2:	683b      	ldr	r3, [r7, #0]
 8001ea4:	685b      	ldr	r3, [r3, #4]
 8001ea6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d003      	beq.n	8001eb6 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001eae:	69ba      	ldr	r2, [r7, #24]
 8001eb0:	693b      	ldr	r3, [r7, #16]
 8001eb2:	4313      	orrs	r3, r2
 8001eb4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001eb6:	4a1d      	ldr	r2, [pc, #116]	; (8001f2c <HAL_GPIO_Init+0x334>)
 8001eb8:	69bb      	ldr	r3, [r7, #24]
 8001eba:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001ebc:	4b1b      	ldr	r3, [pc, #108]	; (8001f2c <HAL_GPIO_Init+0x334>)
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ec2:	693b      	ldr	r3, [r7, #16]
 8001ec4:	43db      	mvns	r3, r3
 8001ec6:	69ba      	ldr	r2, [r7, #24]
 8001ec8:	4013      	ands	r3, r2
 8001eca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001ecc:	683b      	ldr	r3, [r7, #0]
 8001ece:	685b      	ldr	r3, [r3, #4]
 8001ed0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d003      	beq.n	8001ee0 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001ed8:	69ba      	ldr	r2, [r7, #24]
 8001eda:	693b      	ldr	r3, [r7, #16]
 8001edc:	4313      	orrs	r3, r2
 8001ede:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001ee0:	4a12      	ldr	r2, [pc, #72]	; (8001f2c <HAL_GPIO_Init+0x334>)
 8001ee2:	69bb      	ldr	r3, [r7, #24]
 8001ee4:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8001ee6:	69fb      	ldr	r3, [r7, #28]
 8001ee8:	3301      	adds	r3, #1
 8001eea:	61fb      	str	r3, [r7, #28]
 8001eec:	69fb      	ldr	r3, [r7, #28]
 8001eee:	2b0f      	cmp	r3, #15
 8001ef0:	f67f ae92 	bls.w	8001c18 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8001ef4:	bf00      	nop
 8001ef6:	bf00      	nop
 8001ef8:	3724      	adds	r7, #36	; 0x24
 8001efa:	46bd      	mov	sp, r7
 8001efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f00:	4770      	bx	lr
 8001f02:	bf00      	nop
 8001f04:	40023800 	.word	0x40023800
 8001f08:	40013800 	.word	0x40013800
 8001f0c:	40020000 	.word	0x40020000
 8001f10:	40020400 	.word	0x40020400
 8001f14:	40020800 	.word	0x40020800
 8001f18:	40020c00 	.word	0x40020c00
 8001f1c:	40021000 	.word	0x40021000
 8001f20:	40021400 	.word	0x40021400
 8001f24:	40021800 	.word	0x40021800
 8001f28:	40021c00 	.word	0x40021c00
 8001f2c:	40013c00 	.word	0x40013c00

08001f30 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001f30:	b480      	push	{r7}
 8001f32:	b085      	sub	sp, #20
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	6078      	str	r0, [r7, #4]
 8001f38:	460b      	mov	r3, r1
 8001f3a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	691a      	ldr	r2, [r3, #16]
 8001f40:	887b      	ldrh	r3, [r7, #2]
 8001f42:	4013      	ands	r3, r2
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d002      	beq.n	8001f4e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001f48:	2301      	movs	r3, #1
 8001f4a:	73fb      	strb	r3, [r7, #15]
 8001f4c:	e001      	b.n	8001f52 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001f4e:	2300      	movs	r3, #0
 8001f50:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001f52:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f54:	4618      	mov	r0, r3
 8001f56:	3714      	adds	r7, #20
 8001f58:	46bd      	mov	sp, r7
 8001f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f5e:	4770      	bx	lr

08001f60 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001f60:	b480      	push	{r7}
 8001f62:	b083      	sub	sp, #12
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	6078      	str	r0, [r7, #4]
 8001f68:	460b      	mov	r3, r1
 8001f6a:	807b      	strh	r3, [r7, #2]
 8001f6c:	4613      	mov	r3, r2
 8001f6e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001f70:	787b      	ldrb	r3, [r7, #1]
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d003      	beq.n	8001f7e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001f76:	887a      	ldrh	r2, [r7, #2]
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8001f7c:	e003      	b.n	8001f86 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8001f7e:	887b      	ldrh	r3, [r7, #2]
 8001f80:	041a      	lsls	r2, r3, #16
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	619a      	str	r2, [r3, #24]
}
 8001f86:	bf00      	nop
 8001f88:	370c      	adds	r7, #12
 8001f8a:	46bd      	mov	sp, r7
 8001f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f90:	4770      	bx	lr

08001f92 <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001f92:	b480      	push	{r7}
 8001f94:	b085      	sub	sp, #20
 8001f96:	af00      	add	r7, sp, #0
 8001f98:	6078      	str	r0, [r7, #4]
 8001f9a:	460b      	mov	r3, r1
 8001f9c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	695b      	ldr	r3, [r3, #20]
 8001fa2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001fa4:	887a      	ldrh	r2, [r7, #2]
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	4013      	ands	r3, r2
 8001faa:	041a      	lsls	r2, r3, #16
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	43d9      	mvns	r1, r3
 8001fb0:	887b      	ldrh	r3, [r7, #2]
 8001fb2:	400b      	ands	r3, r1
 8001fb4:	431a      	orrs	r2, r3
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	619a      	str	r2, [r3, #24]
}
 8001fba:	bf00      	nop
 8001fbc:	3714      	adds	r7, #20
 8001fbe:	46bd      	mov	sp, r7
 8001fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc4:	4770      	bx	lr

08001fc6 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001fc6:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001fc8:	b08f      	sub	sp, #60	; 0x3c
 8001fca:	af0a      	add	r7, sp, #40	; 0x28
 8001fcc:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d101      	bne.n	8001fd8 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001fd4:	2301      	movs	r3, #1
 8001fd6:	e116      	b.n	8002206 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8001fe4:	b2db      	uxtb	r3, r3
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d106      	bne.n	8001ff8 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	2200      	movs	r2, #0
 8001fee:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001ff2:	6878      	ldr	r0, [r7, #4]
 8001ff4:	f7ff fae8 	bl	80015c8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	2203      	movs	r2, #3
 8001ffc:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002000:	68bb      	ldr	r3, [r7, #8]
 8002002:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002004:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002008:	2b00      	cmp	r3, #0
 800200a:	d102      	bne.n	8002012 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	2200      	movs	r2, #0
 8002010:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	4618      	mov	r0, r3
 8002018:	f003 f858 	bl	80050cc <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	603b      	str	r3, [r7, #0]
 8002022:	687e      	ldr	r6, [r7, #4]
 8002024:	466d      	mov	r5, sp
 8002026:	f106 0410 	add.w	r4, r6, #16
 800202a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800202c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800202e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002030:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002032:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002036:	e885 0003 	stmia.w	r5, {r0, r1}
 800203a:	1d33      	adds	r3, r6, #4
 800203c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800203e:	6838      	ldr	r0, [r7, #0]
 8002040:	f002 ffbc 	bl	8004fbc <USB_CoreInit>
 8002044:	4603      	mov	r3, r0
 8002046:	2b00      	cmp	r3, #0
 8002048:	d005      	beq.n	8002056 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	2202      	movs	r2, #2
 800204e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002052:	2301      	movs	r3, #1
 8002054:	e0d7      	b.n	8002206 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	2100      	movs	r1, #0
 800205c:	4618      	mov	r0, r3
 800205e:	f003 f846 	bl	80050ee <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002062:	2300      	movs	r3, #0
 8002064:	73fb      	strb	r3, [r7, #15]
 8002066:	e04a      	b.n	80020fe <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002068:	7bfa      	ldrb	r2, [r7, #15]
 800206a:	6879      	ldr	r1, [r7, #4]
 800206c:	4613      	mov	r3, r2
 800206e:	00db      	lsls	r3, r3, #3
 8002070:	4413      	add	r3, r2
 8002072:	009b      	lsls	r3, r3, #2
 8002074:	440b      	add	r3, r1
 8002076:	333d      	adds	r3, #61	; 0x3d
 8002078:	2201      	movs	r2, #1
 800207a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800207c:	7bfa      	ldrb	r2, [r7, #15]
 800207e:	6879      	ldr	r1, [r7, #4]
 8002080:	4613      	mov	r3, r2
 8002082:	00db      	lsls	r3, r3, #3
 8002084:	4413      	add	r3, r2
 8002086:	009b      	lsls	r3, r3, #2
 8002088:	440b      	add	r3, r1
 800208a:	333c      	adds	r3, #60	; 0x3c
 800208c:	7bfa      	ldrb	r2, [r7, #15]
 800208e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002090:	7bfa      	ldrb	r2, [r7, #15]
 8002092:	7bfb      	ldrb	r3, [r7, #15]
 8002094:	b298      	uxth	r0, r3
 8002096:	6879      	ldr	r1, [r7, #4]
 8002098:	4613      	mov	r3, r2
 800209a:	00db      	lsls	r3, r3, #3
 800209c:	4413      	add	r3, r2
 800209e:	009b      	lsls	r3, r3, #2
 80020a0:	440b      	add	r3, r1
 80020a2:	3344      	adds	r3, #68	; 0x44
 80020a4:	4602      	mov	r2, r0
 80020a6:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80020a8:	7bfa      	ldrb	r2, [r7, #15]
 80020aa:	6879      	ldr	r1, [r7, #4]
 80020ac:	4613      	mov	r3, r2
 80020ae:	00db      	lsls	r3, r3, #3
 80020b0:	4413      	add	r3, r2
 80020b2:	009b      	lsls	r3, r3, #2
 80020b4:	440b      	add	r3, r1
 80020b6:	3340      	adds	r3, #64	; 0x40
 80020b8:	2200      	movs	r2, #0
 80020ba:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80020bc:	7bfa      	ldrb	r2, [r7, #15]
 80020be:	6879      	ldr	r1, [r7, #4]
 80020c0:	4613      	mov	r3, r2
 80020c2:	00db      	lsls	r3, r3, #3
 80020c4:	4413      	add	r3, r2
 80020c6:	009b      	lsls	r3, r3, #2
 80020c8:	440b      	add	r3, r1
 80020ca:	3348      	adds	r3, #72	; 0x48
 80020cc:	2200      	movs	r2, #0
 80020ce:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80020d0:	7bfa      	ldrb	r2, [r7, #15]
 80020d2:	6879      	ldr	r1, [r7, #4]
 80020d4:	4613      	mov	r3, r2
 80020d6:	00db      	lsls	r3, r3, #3
 80020d8:	4413      	add	r3, r2
 80020da:	009b      	lsls	r3, r3, #2
 80020dc:	440b      	add	r3, r1
 80020de:	334c      	adds	r3, #76	; 0x4c
 80020e0:	2200      	movs	r2, #0
 80020e2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80020e4:	7bfa      	ldrb	r2, [r7, #15]
 80020e6:	6879      	ldr	r1, [r7, #4]
 80020e8:	4613      	mov	r3, r2
 80020ea:	00db      	lsls	r3, r3, #3
 80020ec:	4413      	add	r3, r2
 80020ee:	009b      	lsls	r3, r3, #2
 80020f0:	440b      	add	r3, r1
 80020f2:	3354      	adds	r3, #84	; 0x54
 80020f4:	2200      	movs	r2, #0
 80020f6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80020f8:	7bfb      	ldrb	r3, [r7, #15]
 80020fa:	3301      	adds	r3, #1
 80020fc:	73fb      	strb	r3, [r7, #15]
 80020fe:	7bfa      	ldrb	r2, [r7, #15]
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	685b      	ldr	r3, [r3, #4]
 8002104:	429a      	cmp	r2, r3
 8002106:	d3af      	bcc.n	8002068 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002108:	2300      	movs	r3, #0
 800210a:	73fb      	strb	r3, [r7, #15]
 800210c:	e044      	b.n	8002198 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800210e:	7bfa      	ldrb	r2, [r7, #15]
 8002110:	6879      	ldr	r1, [r7, #4]
 8002112:	4613      	mov	r3, r2
 8002114:	00db      	lsls	r3, r3, #3
 8002116:	4413      	add	r3, r2
 8002118:	009b      	lsls	r3, r3, #2
 800211a:	440b      	add	r3, r1
 800211c:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8002120:	2200      	movs	r2, #0
 8002122:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002124:	7bfa      	ldrb	r2, [r7, #15]
 8002126:	6879      	ldr	r1, [r7, #4]
 8002128:	4613      	mov	r3, r2
 800212a:	00db      	lsls	r3, r3, #3
 800212c:	4413      	add	r3, r2
 800212e:	009b      	lsls	r3, r3, #2
 8002130:	440b      	add	r3, r1
 8002132:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8002136:	7bfa      	ldrb	r2, [r7, #15]
 8002138:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800213a:	7bfa      	ldrb	r2, [r7, #15]
 800213c:	6879      	ldr	r1, [r7, #4]
 800213e:	4613      	mov	r3, r2
 8002140:	00db      	lsls	r3, r3, #3
 8002142:	4413      	add	r3, r2
 8002144:	009b      	lsls	r3, r3, #2
 8002146:	440b      	add	r3, r1
 8002148:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800214c:	2200      	movs	r2, #0
 800214e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002150:	7bfa      	ldrb	r2, [r7, #15]
 8002152:	6879      	ldr	r1, [r7, #4]
 8002154:	4613      	mov	r3, r2
 8002156:	00db      	lsls	r3, r3, #3
 8002158:	4413      	add	r3, r2
 800215a:	009b      	lsls	r3, r3, #2
 800215c:	440b      	add	r3, r1
 800215e:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8002162:	2200      	movs	r2, #0
 8002164:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002166:	7bfa      	ldrb	r2, [r7, #15]
 8002168:	6879      	ldr	r1, [r7, #4]
 800216a:	4613      	mov	r3, r2
 800216c:	00db      	lsls	r3, r3, #3
 800216e:	4413      	add	r3, r2
 8002170:	009b      	lsls	r3, r3, #2
 8002172:	440b      	add	r3, r1
 8002174:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8002178:	2200      	movs	r2, #0
 800217a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800217c:	7bfa      	ldrb	r2, [r7, #15]
 800217e:	6879      	ldr	r1, [r7, #4]
 8002180:	4613      	mov	r3, r2
 8002182:	00db      	lsls	r3, r3, #3
 8002184:	4413      	add	r3, r2
 8002186:	009b      	lsls	r3, r3, #2
 8002188:	440b      	add	r3, r1
 800218a:	f503 7325 	add.w	r3, r3, #660	; 0x294
 800218e:	2200      	movs	r2, #0
 8002190:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002192:	7bfb      	ldrb	r3, [r7, #15]
 8002194:	3301      	adds	r3, #1
 8002196:	73fb      	strb	r3, [r7, #15]
 8002198:	7bfa      	ldrb	r2, [r7, #15]
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	685b      	ldr	r3, [r3, #4]
 800219e:	429a      	cmp	r2, r3
 80021a0:	d3b5      	bcc.n	800210e <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	603b      	str	r3, [r7, #0]
 80021a8:	687e      	ldr	r6, [r7, #4]
 80021aa:	466d      	mov	r5, sp
 80021ac:	f106 0410 	add.w	r4, r6, #16
 80021b0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80021b2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80021b4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80021b6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80021b8:	e894 0003 	ldmia.w	r4, {r0, r1}
 80021bc:	e885 0003 	stmia.w	r5, {r0, r1}
 80021c0:	1d33      	adds	r3, r6, #4
 80021c2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80021c4:	6838      	ldr	r0, [r7, #0]
 80021c6:	f002 ffdf 	bl	8005188 <USB_DevInit>
 80021ca:	4603      	mov	r3, r0
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d005      	beq.n	80021dc <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	2202      	movs	r2, #2
 80021d4:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80021d8:	2301      	movs	r3, #1
 80021da:	e014      	b.n	8002206 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	2200      	movs	r2, #0
 80021e0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	2201      	movs	r2, #1
 80021e8:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021f0:	2b01      	cmp	r3, #1
 80021f2:	d102      	bne.n	80021fa <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80021f4:	6878      	ldr	r0, [r7, #4]
 80021f6:	f000 f80b 	bl	8002210 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	4618      	mov	r0, r3
 8002200:	f003 f9ad 	bl	800555e <USB_DevDisconnect>

  return HAL_OK;
 8002204:	2300      	movs	r3, #0
}
 8002206:	4618      	mov	r0, r3
 8002208:	3714      	adds	r7, #20
 800220a:	46bd      	mov	sp, r7
 800220c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08002210 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002210:	b480      	push	{r7}
 8002212:	b085      	sub	sp, #20
 8002214:	af00      	add	r7, sp, #0
 8002216:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	2201      	movs	r2, #1
 8002222:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	2200      	movs	r2, #0
 800222a:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	699b      	ldr	r3, [r3, #24]
 8002232:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800223e:	4b05      	ldr	r3, [pc, #20]	; (8002254 <HAL_PCDEx_ActivateLPM+0x44>)
 8002240:	4313      	orrs	r3, r2
 8002242:	68fa      	ldr	r2, [r7, #12]
 8002244:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8002246:	2300      	movs	r3, #0
}
 8002248:	4618      	mov	r0, r3
 800224a:	3714      	adds	r7, #20
 800224c:	46bd      	mov	sp, r7
 800224e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002252:	4770      	bx	lr
 8002254:	10000003 	.word	0x10000003

08002258 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002258:	b480      	push	{r7}
 800225a:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800225c:	4b05      	ldr	r3, [pc, #20]	; (8002274 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	4a04      	ldr	r2, [pc, #16]	; (8002274 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002262:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002266:	6013      	str	r3, [r2, #0]
}
 8002268:	bf00      	nop
 800226a:	46bd      	mov	sp, r7
 800226c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002270:	4770      	bx	lr
 8002272:	bf00      	nop
 8002274:	40007000 	.word	0x40007000

08002278 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8002278:	b580      	push	{r7, lr}
 800227a:	b082      	sub	sp, #8
 800227c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 800227e:	2300      	movs	r3, #0
 8002280:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8002282:	4b23      	ldr	r3, [pc, #140]	; (8002310 <HAL_PWREx_EnableOverDrive+0x98>)
 8002284:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002286:	4a22      	ldr	r2, [pc, #136]	; (8002310 <HAL_PWREx_EnableOverDrive+0x98>)
 8002288:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800228c:	6413      	str	r3, [r2, #64]	; 0x40
 800228e:	4b20      	ldr	r3, [pc, #128]	; (8002310 <HAL_PWREx_EnableOverDrive+0x98>)
 8002290:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002292:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002296:	603b      	str	r3, [r7, #0]
 8002298:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800229a:	4b1e      	ldr	r3, [pc, #120]	; (8002314 <HAL_PWREx_EnableOverDrive+0x9c>)
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	4a1d      	ldr	r2, [pc, #116]	; (8002314 <HAL_PWREx_EnableOverDrive+0x9c>)
 80022a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80022a4:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80022a6:	f7ff fad3 	bl	8001850 <HAL_GetTick>
 80022aa:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80022ac:	e009      	b.n	80022c2 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80022ae:	f7ff facf 	bl	8001850 <HAL_GetTick>
 80022b2:	4602      	mov	r2, r0
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	1ad3      	subs	r3, r2, r3
 80022b8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80022bc:	d901      	bls.n	80022c2 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 80022be:	2303      	movs	r3, #3
 80022c0:	e022      	b.n	8002308 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80022c2:	4b14      	ldr	r3, [pc, #80]	; (8002314 <HAL_PWREx_EnableOverDrive+0x9c>)
 80022c4:	685b      	ldr	r3, [r3, #4]
 80022c6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80022ca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80022ce:	d1ee      	bne.n	80022ae <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80022d0:	4b10      	ldr	r3, [pc, #64]	; (8002314 <HAL_PWREx_EnableOverDrive+0x9c>)
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	4a0f      	ldr	r2, [pc, #60]	; (8002314 <HAL_PWREx_EnableOverDrive+0x9c>)
 80022d6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80022da:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80022dc:	f7ff fab8 	bl	8001850 <HAL_GetTick>
 80022e0:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80022e2:	e009      	b.n	80022f8 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80022e4:	f7ff fab4 	bl	8001850 <HAL_GetTick>
 80022e8:	4602      	mov	r2, r0
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	1ad3      	subs	r3, r2, r3
 80022ee:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80022f2:	d901      	bls.n	80022f8 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 80022f4:	2303      	movs	r3, #3
 80022f6:	e007      	b.n	8002308 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80022f8:	4b06      	ldr	r3, [pc, #24]	; (8002314 <HAL_PWREx_EnableOverDrive+0x9c>)
 80022fa:	685b      	ldr	r3, [r3, #4]
 80022fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002300:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002304:	d1ee      	bne.n	80022e4 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8002306:	2300      	movs	r3, #0
}
 8002308:	4618      	mov	r0, r3
 800230a:	3708      	adds	r7, #8
 800230c:	46bd      	mov	sp, r7
 800230e:	bd80      	pop	{r7, pc}
 8002310:	40023800 	.word	0x40023800
 8002314:	40007000 	.word	0x40007000

08002318 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002318:	b580      	push	{r7, lr}
 800231a:	b086      	sub	sp, #24
 800231c:	af00      	add	r7, sp, #0
 800231e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8002320:	2300      	movs	r3, #0
 8002322:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	2b00      	cmp	r3, #0
 8002328:	d101      	bne.n	800232e <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800232a:	2301      	movs	r3, #1
 800232c:	e291      	b.n	8002852 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	f003 0301 	and.w	r3, r3, #1
 8002336:	2b00      	cmp	r3, #0
 8002338:	f000 8087 	beq.w	800244a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800233c:	4b96      	ldr	r3, [pc, #600]	; (8002598 <HAL_RCC_OscConfig+0x280>)
 800233e:	689b      	ldr	r3, [r3, #8]
 8002340:	f003 030c 	and.w	r3, r3, #12
 8002344:	2b04      	cmp	r3, #4
 8002346:	d00c      	beq.n	8002362 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002348:	4b93      	ldr	r3, [pc, #588]	; (8002598 <HAL_RCC_OscConfig+0x280>)
 800234a:	689b      	ldr	r3, [r3, #8]
 800234c:	f003 030c 	and.w	r3, r3, #12
 8002350:	2b08      	cmp	r3, #8
 8002352:	d112      	bne.n	800237a <HAL_RCC_OscConfig+0x62>
 8002354:	4b90      	ldr	r3, [pc, #576]	; (8002598 <HAL_RCC_OscConfig+0x280>)
 8002356:	685b      	ldr	r3, [r3, #4]
 8002358:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800235c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002360:	d10b      	bne.n	800237a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002362:	4b8d      	ldr	r3, [pc, #564]	; (8002598 <HAL_RCC_OscConfig+0x280>)
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800236a:	2b00      	cmp	r3, #0
 800236c:	d06c      	beq.n	8002448 <HAL_RCC_OscConfig+0x130>
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	685b      	ldr	r3, [r3, #4]
 8002372:	2b00      	cmp	r3, #0
 8002374:	d168      	bne.n	8002448 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8002376:	2301      	movs	r3, #1
 8002378:	e26b      	b.n	8002852 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	685b      	ldr	r3, [r3, #4]
 800237e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002382:	d106      	bne.n	8002392 <HAL_RCC_OscConfig+0x7a>
 8002384:	4b84      	ldr	r3, [pc, #528]	; (8002598 <HAL_RCC_OscConfig+0x280>)
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	4a83      	ldr	r2, [pc, #524]	; (8002598 <HAL_RCC_OscConfig+0x280>)
 800238a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800238e:	6013      	str	r3, [r2, #0]
 8002390:	e02e      	b.n	80023f0 <HAL_RCC_OscConfig+0xd8>
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	685b      	ldr	r3, [r3, #4]
 8002396:	2b00      	cmp	r3, #0
 8002398:	d10c      	bne.n	80023b4 <HAL_RCC_OscConfig+0x9c>
 800239a:	4b7f      	ldr	r3, [pc, #508]	; (8002598 <HAL_RCC_OscConfig+0x280>)
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	4a7e      	ldr	r2, [pc, #504]	; (8002598 <HAL_RCC_OscConfig+0x280>)
 80023a0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80023a4:	6013      	str	r3, [r2, #0]
 80023a6:	4b7c      	ldr	r3, [pc, #496]	; (8002598 <HAL_RCC_OscConfig+0x280>)
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	4a7b      	ldr	r2, [pc, #492]	; (8002598 <HAL_RCC_OscConfig+0x280>)
 80023ac:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80023b0:	6013      	str	r3, [r2, #0]
 80023b2:	e01d      	b.n	80023f0 <HAL_RCC_OscConfig+0xd8>
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	685b      	ldr	r3, [r3, #4]
 80023b8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80023bc:	d10c      	bne.n	80023d8 <HAL_RCC_OscConfig+0xc0>
 80023be:	4b76      	ldr	r3, [pc, #472]	; (8002598 <HAL_RCC_OscConfig+0x280>)
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	4a75      	ldr	r2, [pc, #468]	; (8002598 <HAL_RCC_OscConfig+0x280>)
 80023c4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80023c8:	6013      	str	r3, [r2, #0]
 80023ca:	4b73      	ldr	r3, [pc, #460]	; (8002598 <HAL_RCC_OscConfig+0x280>)
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	4a72      	ldr	r2, [pc, #456]	; (8002598 <HAL_RCC_OscConfig+0x280>)
 80023d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80023d4:	6013      	str	r3, [r2, #0]
 80023d6:	e00b      	b.n	80023f0 <HAL_RCC_OscConfig+0xd8>
 80023d8:	4b6f      	ldr	r3, [pc, #444]	; (8002598 <HAL_RCC_OscConfig+0x280>)
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	4a6e      	ldr	r2, [pc, #440]	; (8002598 <HAL_RCC_OscConfig+0x280>)
 80023de:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80023e2:	6013      	str	r3, [r2, #0]
 80023e4:	4b6c      	ldr	r3, [pc, #432]	; (8002598 <HAL_RCC_OscConfig+0x280>)
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	4a6b      	ldr	r2, [pc, #428]	; (8002598 <HAL_RCC_OscConfig+0x280>)
 80023ea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80023ee:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	685b      	ldr	r3, [r3, #4]
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d013      	beq.n	8002420 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023f8:	f7ff fa2a 	bl	8001850 <HAL_GetTick>
 80023fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023fe:	e008      	b.n	8002412 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002400:	f7ff fa26 	bl	8001850 <HAL_GetTick>
 8002404:	4602      	mov	r2, r0
 8002406:	693b      	ldr	r3, [r7, #16]
 8002408:	1ad3      	subs	r3, r2, r3
 800240a:	2b64      	cmp	r3, #100	; 0x64
 800240c:	d901      	bls.n	8002412 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800240e:	2303      	movs	r3, #3
 8002410:	e21f      	b.n	8002852 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002412:	4b61      	ldr	r3, [pc, #388]	; (8002598 <HAL_RCC_OscConfig+0x280>)
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800241a:	2b00      	cmp	r3, #0
 800241c:	d0f0      	beq.n	8002400 <HAL_RCC_OscConfig+0xe8>
 800241e:	e014      	b.n	800244a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002420:	f7ff fa16 	bl	8001850 <HAL_GetTick>
 8002424:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002426:	e008      	b.n	800243a <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002428:	f7ff fa12 	bl	8001850 <HAL_GetTick>
 800242c:	4602      	mov	r2, r0
 800242e:	693b      	ldr	r3, [r7, #16]
 8002430:	1ad3      	subs	r3, r2, r3
 8002432:	2b64      	cmp	r3, #100	; 0x64
 8002434:	d901      	bls.n	800243a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8002436:	2303      	movs	r3, #3
 8002438:	e20b      	b.n	8002852 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800243a:	4b57      	ldr	r3, [pc, #348]	; (8002598 <HAL_RCC_OscConfig+0x280>)
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002442:	2b00      	cmp	r3, #0
 8002444:	d1f0      	bne.n	8002428 <HAL_RCC_OscConfig+0x110>
 8002446:	e000      	b.n	800244a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002448:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	f003 0302 	and.w	r3, r3, #2
 8002452:	2b00      	cmp	r3, #0
 8002454:	d069      	beq.n	800252a <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002456:	4b50      	ldr	r3, [pc, #320]	; (8002598 <HAL_RCC_OscConfig+0x280>)
 8002458:	689b      	ldr	r3, [r3, #8]
 800245a:	f003 030c 	and.w	r3, r3, #12
 800245e:	2b00      	cmp	r3, #0
 8002460:	d00b      	beq.n	800247a <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002462:	4b4d      	ldr	r3, [pc, #308]	; (8002598 <HAL_RCC_OscConfig+0x280>)
 8002464:	689b      	ldr	r3, [r3, #8]
 8002466:	f003 030c 	and.w	r3, r3, #12
 800246a:	2b08      	cmp	r3, #8
 800246c:	d11c      	bne.n	80024a8 <HAL_RCC_OscConfig+0x190>
 800246e:	4b4a      	ldr	r3, [pc, #296]	; (8002598 <HAL_RCC_OscConfig+0x280>)
 8002470:	685b      	ldr	r3, [r3, #4]
 8002472:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002476:	2b00      	cmp	r3, #0
 8002478:	d116      	bne.n	80024a8 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800247a:	4b47      	ldr	r3, [pc, #284]	; (8002598 <HAL_RCC_OscConfig+0x280>)
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	f003 0302 	and.w	r3, r3, #2
 8002482:	2b00      	cmp	r3, #0
 8002484:	d005      	beq.n	8002492 <HAL_RCC_OscConfig+0x17a>
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	68db      	ldr	r3, [r3, #12]
 800248a:	2b01      	cmp	r3, #1
 800248c:	d001      	beq.n	8002492 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800248e:	2301      	movs	r3, #1
 8002490:	e1df      	b.n	8002852 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002492:	4b41      	ldr	r3, [pc, #260]	; (8002598 <HAL_RCC_OscConfig+0x280>)
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	691b      	ldr	r3, [r3, #16]
 800249e:	00db      	lsls	r3, r3, #3
 80024a0:	493d      	ldr	r1, [pc, #244]	; (8002598 <HAL_RCC_OscConfig+0x280>)
 80024a2:	4313      	orrs	r3, r2
 80024a4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80024a6:	e040      	b.n	800252a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	68db      	ldr	r3, [r3, #12]
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d023      	beq.n	80024f8 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80024b0:	4b39      	ldr	r3, [pc, #228]	; (8002598 <HAL_RCC_OscConfig+0x280>)
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	4a38      	ldr	r2, [pc, #224]	; (8002598 <HAL_RCC_OscConfig+0x280>)
 80024b6:	f043 0301 	orr.w	r3, r3, #1
 80024ba:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024bc:	f7ff f9c8 	bl	8001850 <HAL_GetTick>
 80024c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024c2:	e008      	b.n	80024d6 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80024c4:	f7ff f9c4 	bl	8001850 <HAL_GetTick>
 80024c8:	4602      	mov	r2, r0
 80024ca:	693b      	ldr	r3, [r7, #16]
 80024cc:	1ad3      	subs	r3, r2, r3
 80024ce:	2b02      	cmp	r3, #2
 80024d0:	d901      	bls.n	80024d6 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80024d2:	2303      	movs	r3, #3
 80024d4:	e1bd      	b.n	8002852 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024d6:	4b30      	ldr	r3, [pc, #192]	; (8002598 <HAL_RCC_OscConfig+0x280>)
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	f003 0302 	and.w	r3, r3, #2
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d0f0      	beq.n	80024c4 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80024e2:	4b2d      	ldr	r3, [pc, #180]	; (8002598 <HAL_RCC_OscConfig+0x280>)
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	691b      	ldr	r3, [r3, #16]
 80024ee:	00db      	lsls	r3, r3, #3
 80024f0:	4929      	ldr	r1, [pc, #164]	; (8002598 <HAL_RCC_OscConfig+0x280>)
 80024f2:	4313      	orrs	r3, r2
 80024f4:	600b      	str	r3, [r1, #0]
 80024f6:	e018      	b.n	800252a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80024f8:	4b27      	ldr	r3, [pc, #156]	; (8002598 <HAL_RCC_OscConfig+0x280>)
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	4a26      	ldr	r2, [pc, #152]	; (8002598 <HAL_RCC_OscConfig+0x280>)
 80024fe:	f023 0301 	bic.w	r3, r3, #1
 8002502:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002504:	f7ff f9a4 	bl	8001850 <HAL_GetTick>
 8002508:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800250a:	e008      	b.n	800251e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800250c:	f7ff f9a0 	bl	8001850 <HAL_GetTick>
 8002510:	4602      	mov	r2, r0
 8002512:	693b      	ldr	r3, [r7, #16]
 8002514:	1ad3      	subs	r3, r2, r3
 8002516:	2b02      	cmp	r3, #2
 8002518:	d901      	bls.n	800251e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800251a:	2303      	movs	r3, #3
 800251c:	e199      	b.n	8002852 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800251e:	4b1e      	ldr	r3, [pc, #120]	; (8002598 <HAL_RCC_OscConfig+0x280>)
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	f003 0302 	and.w	r3, r3, #2
 8002526:	2b00      	cmp	r3, #0
 8002528:	d1f0      	bne.n	800250c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	f003 0308 	and.w	r3, r3, #8
 8002532:	2b00      	cmp	r3, #0
 8002534:	d038      	beq.n	80025a8 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	695b      	ldr	r3, [r3, #20]
 800253a:	2b00      	cmp	r3, #0
 800253c:	d019      	beq.n	8002572 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800253e:	4b16      	ldr	r3, [pc, #88]	; (8002598 <HAL_RCC_OscConfig+0x280>)
 8002540:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002542:	4a15      	ldr	r2, [pc, #84]	; (8002598 <HAL_RCC_OscConfig+0x280>)
 8002544:	f043 0301 	orr.w	r3, r3, #1
 8002548:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800254a:	f7ff f981 	bl	8001850 <HAL_GetTick>
 800254e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002550:	e008      	b.n	8002564 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002552:	f7ff f97d 	bl	8001850 <HAL_GetTick>
 8002556:	4602      	mov	r2, r0
 8002558:	693b      	ldr	r3, [r7, #16]
 800255a:	1ad3      	subs	r3, r2, r3
 800255c:	2b02      	cmp	r3, #2
 800255e:	d901      	bls.n	8002564 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002560:	2303      	movs	r3, #3
 8002562:	e176      	b.n	8002852 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002564:	4b0c      	ldr	r3, [pc, #48]	; (8002598 <HAL_RCC_OscConfig+0x280>)
 8002566:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002568:	f003 0302 	and.w	r3, r3, #2
 800256c:	2b00      	cmp	r3, #0
 800256e:	d0f0      	beq.n	8002552 <HAL_RCC_OscConfig+0x23a>
 8002570:	e01a      	b.n	80025a8 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002572:	4b09      	ldr	r3, [pc, #36]	; (8002598 <HAL_RCC_OscConfig+0x280>)
 8002574:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002576:	4a08      	ldr	r2, [pc, #32]	; (8002598 <HAL_RCC_OscConfig+0x280>)
 8002578:	f023 0301 	bic.w	r3, r3, #1
 800257c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800257e:	f7ff f967 	bl	8001850 <HAL_GetTick>
 8002582:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002584:	e00a      	b.n	800259c <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002586:	f7ff f963 	bl	8001850 <HAL_GetTick>
 800258a:	4602      	mov	r2, r0
 800258c:	693b      	ldr	r3, [r7, #16]
 800258e:	1ad3      	subs	r3, r2, r3
 8002590:	2b02      	cmp	r3, #2
 8002592:	d903      	bls.n	800259c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002594:	2303      	movs	r3, #3
 8002596:	e15c      	b.n	8002852 <HAL_RCC_OscConfig+0x53a>
 8002598:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800259c:	4b91      	ldr	r3, [pc, #580]	; (80027e4 <HAL_RCC_OscConfig+0x4cc>)
 800259e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80025a0:	f003 0302 	and.w	r3, r3, #2
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d1ee      	bne.n	8002586 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	f003 0304 	and.w	r3, r3, #4
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	f000 80a4 	beq.w	80026fe <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80025b6:	4b8b      	ldr	r3, [pc, #556]	; (80027e4 <HAL_RCC_OscConfig+0x4cc>)
 80025b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d10d      	bne.n	80025de <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80025c2:	4b88      	ldr	r3, [pc, #544]	; (80027e4 <HAL_RCC_OscConfig+0x4cc>)
 80025c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025c6:	4a87      	ldr	r2, [pc, #540]	; (80027e4 <HAL_RCC_OscConfig+0x4cc>)
 80025c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80025cc:	6413      	str	r3, [r2, #64]	; 0x40
 80025ce:	4b85      	ldr	r3, [pc, #532]	; (80027e4 <HAL_RCC_OscConfig+0x4cc>)
 80025d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025d6:	60bb      	str	r3, [r7, #8]
 80025d8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80025da:	2301      	movs	r3, #1
 80025dc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80025de:	4b82      	ldr	r3, [pc, #520]	; (80027e8 <HAL_RCC_OscConfig+0x4d0>)
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d118      	bne.n	800261c <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80025ea:	4b7f      	ldr	r3, [pc, #508]	; (80027e8 <HAL_RCC_OscConfig+0x4d0>)
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	4a7e      	ldr	r2, [pc, #504]	; (80027e8 <HAL_RCC_OscConfig+0x4d0>)
 80025f0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80025f4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80025f6:	f7ff f92b 	bl	8001850 <HAL_GetTick>
 80025fa:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80025fc:	e008      	b.n	8002610 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80025fe:	f7ff f927 	bl	8001850 <HAL_GetTick>
 8002602:	4602      	mov	r2, r0
 8002604:	693b      	ldr	r3, [r7, #16]
 8002606:	1ad3      	subs	r3, r2, r3
 8002608:	2b64      	cmp	r3, #100	; 0x64
 800260a:	d901      	bls.n	8002610 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 800260c:	2303      	movs	r3, #3
 800260e:	e120      	b.n	8002852 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002610:	4b75      	ldr	r3, [pc, #468]	; (80027e8 <HAL_RCC_OscConfig+0x4d0>)
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002618:	2b00      	cmp	r3, #0
 800261a:	d0f0      	beq.n	80025fe <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	689b      	ldr	r3, [r3, #8]
 8002620:	2b01      	cmp	r3, #1
 8002622:	d106      	bne.n	8002632 <HAL_RCC_OscConfig+0x31a>
 8002624:	4b6f      	ldr	r3, [pc, #444]	; (80027e4 <HAL_RCC_OscConfig+0x4cc>)
 8002626:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002628:	4a6e      	ldr	r2, [pc, #440]	; (80027e4 <HAL_RCC_OscConfig+0x4cc>)
 800262a:	f043 0301 	orr.w	r3, r3, #1
 800262e:	6713      	str	r3, [r2, #112]	; 0x70
 8002630:	e02d      	b.n	800268e <HAL_RCC_OscConfig+0x376>
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	689b      	ldr	r3, [r3, #8]
 8002636:	2b00      	cmp	r3, #0
 8002638:	d10c      	bne.n	8002654 <HAL_RCC_OscConfig+0x33c>
 800263a:	4b6a      	ldr	r3, [pc, #424]	; (80027e4 <HAL_RCC_OscConfig+0x4cc>)
 800263c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800263e:	4a69      	ldr	r2, [pc, #420]	; (80027e4 <HAL_RCC_OscConfig+0x4cc>)
 8002640:	f023 0301 	bic.w	r3, r3, #1
 8002644:	6713      	str	r3, [r2, #112]	; 0x70
 8002646:	4b67      	ldr	r3, [pc, #412]	; (80027e4 <HAL_RCC_OscConfig+0x4cc>)
 8002648:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800264a:	4a66      	ldr	r2, [pc, #408]	; (80027e4 <HAL_RCC_OscConfig+0x4cc>)
 800264c:	f023 0304 	bic.w	r3, r3, #4
 8002650:	6713      	str	r3, [r2, #112]	; 0x70
 8002652:	e01c      	b.n	800268e <HAL_RCC_OscConfig+0x376>
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	689b      	ldr	r3, [r3, #8]
 8002658:	2b05      	cmp	r3, #5
 800265a:	d10c      	bne.n	8002676 <HAL_RCC_OscConfig+0x35e>
 800265c:	4b61      	ldr	r3, [pc, #388]	; (80027e4 <HAL_RCC_OscConfig+0x4cc>)
 800265e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002660:	4a60      	ldr	r2, [pc, #384]	; (80027e4 <HAL_RCC_OscConfig+0x4cc>)
 8002662:	f043 0304 	orr.w	r3, r3, #4
 8002666:	6713      	str	r3, [r2, #112]	; 0x70
 8002668:	4b5e      	ldr	r3, [pc, #376]	; (80027e4 <HAL_RCC_OscConfig+0x4cc>)
 800266a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800266c:	4a5d      	ldr	r2, [pc, #372]	; (80027e4 <HAL_RCC_OscConfig+0x4cc>)
 800266e:	f043 0301 	orr.w	r3, r3, #1
 8002672:	6713      	str	r3, [r2, #112]	; 0x70
 8002674:	e00b      	b.n	800268e <HAL_RCC_OscConfig+0x376>
 8002676:	4b5b      	ldr	r3, [pc, #364]	; (80027e4 <HAL_RCC_OscConfig+0x4cc>)
 8002678:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800267a:	4a5a      	ldr	r2, [pc, #360]	; (80027e4 <HAL_RCC_OscConfig+0x4cc>)
 800267c:	f023 0301 	bic.w	r3, r3, #1
 8002680:	6713      	str	r3, [r2, #112]	; 0x70
 8002682:	4b58      	ldr	r3, [pc, #352]	; (80027e4 <HAL_RCC_OscConfig+0x4cc>)
 8002684:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002686:	4a57      	ldr	r2, [pc, #348]	; (80027e4 <HAL_RCC_OscConfig+0x4cc>)
 8002688:	f023 0304 	bic.w	r3, r3, #4
 800268c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	689b      	ldr	r3, [r3, #8]
 8002692:	2b00      	cmp	r3, #0
 8002694:	d015      	beq.n	80026c2 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002696:	f7ff f8db 	bl	8001850 <HAL_GetTick>
 800269a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800269c:	e00a      	b.n	80026b4 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800269e:	f7ff f8d7 	bl	8001850 <HAL_GetTick>
 80026a2:	4602      	mov	r2, r0
 80026a4:	693b      	ldr	r3, [r7, #16]
 80026a6:	1ad3      	subs	r3, r2, r3
 80026a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80026ac:	4293      	cmp	r3, r2
 80026ae:	d901      	bls.n	80026b4 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80026b0:	2303      	movs	r3, #3
 80026b2:	e0ce      	b.n	8002852 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80026b4:	4b4b      	ldr	r3, [pc, #300]	; (80027e4 <HAL_RCC_OscConfig+0x4cc>)
 80026b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026b8:	f003 0302 	and.w	r3, r3, #2
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d0ee      	beq.n	800269e <HAL_RCC_OscConfig+0x386>
 80026c0:	e014      	b.n	80026ec <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026c2:	f7ff f8c5 	bl	8001850 <HAL_GetTick>
 80026c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80026c8:	e00a      	b.n	80026e0 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80026ca:	f7ff f8c1 	bl	8001850 <HAL_GetTick>
 80026ce:	4602      	mov	r2, r0
 80026d0:	693b      	ldr	r3, [r7, #16]
 80026d2:	1ad3      	subs	r3, r2, r3
 80026d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80026d8:	4293      	cmp	r3, r2
 80026da:	d901      	bls.n	80026e0 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80026dc:	2303      	movs	r3, #3
 80026de:	e0b8      	b.n	8002852 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80026e0:	4b40      	ldr	r3, [pc, #256]	; (80027e4 <HAL_RCC_OscConfig+0x4cc>)
 80026e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026e4:	f003 0302 	and.w	r3, r3, #2
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d1ee      	bne.n	80026ca <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80026ec:	7dfb      	ldrb	r3, [r7, #23]
 80026ee:	2b01      	cmp	r3, #1
 80026f0:	d105      	bne.n	80026fe <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80026f2:	4b3c      	ldr	r3, [pc, #240]	; (80027e4 <HAL_RCC_OscConfig+0x4cc>)
 80026f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026f6:	4a3b      	ldr	r2, [pc, #236]	; (80027e4 <HAL_RCC_OscConfig+0x4cc>)
 80026f8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80026fc:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	699b      	ldr	r3, [r3, #24]
 8002702:	2b00      	cmp	r3, #0
 8002704:	f000 80a4 	beq.w	8002850 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002708:	4b36      	ldr	r3, [pc, #216]	; (80027e4 <HAL_RCC_OscConfig+0x4cc>)
 800270a:	689b      	ldr	r3, [r3, #8]
 800270c:	f003 030c 	and.w	r3, r3, #12
 8002710:	2b08      	cmp	r3, #8
 8002712:	d06b      	beq.n	80027ec <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	699b      	ldr	r3, [r3, #24]
 8002718:	2b02      	cmp	r3, #2
 800271a:	d149      	bne.n	80027b0 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800271c:	4b31      	ldr	r3, [pc, #196]	; (80027e4 <HAL_RCC_OscConfig+0x4cc>)
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	4a30      	ldr	r2, [pc, #192]	; (80027e4 <HAL_RCC_OscConfig+0x4cc>)
 8002722:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002726:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002728:	f7ff f892 	bl	8001850 <HAL_GetTick>
 800272c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800272e:	e008      	b.n	8002742 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002730:	f7ff f88e 	bl	8001850 <HAL_GetTick>
 8002734:	4602      	mov	r2, r0
 8002736:	693b      	ldr	r3, [r7, #16]
 8002738:	1ad3      	subs	r3, r2, r3
 800273a:	2b02      	cmp	r3, #2
 800273c:	d901      	bls.n	8002742 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800273e:	2303      	movs	r3, #3
 8002740:	e087      	b.n	8002852 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002742:	4b28      	ldr	r3, [pc, #160]	; (80027e4 <HAL_RCC_OscConfig+0x4cc>)
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800274a:	2b00      	cmp	r3, #0
 800274c:	d1f0      	bne.n	8002730 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	69da      	ldr	r2, [r3, #28]
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	6a1b      	ldr	r3, [r3, #32]
 8002756:	431a      	orrs	r2, r3
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800275c:	019b      	lsls	r3, r3, #6
 800275e:	431a      	orrs	r2, r3
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002764:	085b      	lsrs	r3, r3, #1
 8002766:	3b01      	subs	r3, #1
 8002768:	041b      	lsls	r3, r3, #16
 800276a:	431a      	orrs	r2, r3
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002770:	061b      	lsls	r3, r3, #24
 8002772:	4313      	orrs	r3, r2
 8002774:	4a1b      	ldr	r2, [pc, #108]	; (80027e4 <HAL_RCC_OscConfig+0x4cc>)
 8002776:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800277a:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800277c:	4b19      	ldr	r3, [pc, #100]	; (80027e4 <HAL_RCC_OscConfig+0x4cc>)
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	4a18      	ldr	r2, [pc, #96]	; (80027e4 <HAL_RCC_OscConfig+0x4cc>)
 8002782:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002786:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002788:	f7ff f862 	bl	8001850 <HAL_GetTick>
 800278c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800278e:	e008      	b.n	80027a2 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002790:	f7ff f85e 	bl	8001850 <HAL_GetTick>
 8002794:	4602      	mov	r2, r0
 8002796:	693b      	ldr	r3, [r7, #16]
 8002798:	1ad3      	subs	r3, r2, r3
 800279a:	2b02      	cmp	r3, #2
 800279c:	d901      	bls.n	80027a2 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 800279e:	2303      	movs	r3, #3
 80027a0:	e057      	b.n	8002852 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80027a2:	4b10      	ldr	r3, [pc, #64]	; (80027e4 <HAL_RCC_OscConfig+0x4cc>)
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d0f0      	beq.n	8002790 <HAL_RCC_OscConfig+0x478>
 80027ae:	e04f      	b.n	8002850 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80027b0:	4b0c      	ldr	r3, [pc, #48]	; (80027e4 <HAL_RCC_OscConfig+0x4cc>)
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	4a0b      	ldr	r2, [pc, #44]	; (80027e4 <HAL_RCC_OscConfig+0x4cc>)
 80027b6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80027ba:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027bc:	f7ff f848 	bl	8001850 <HAL_GetTick>
 80027c0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80027c2:	e008      	b.n	80027d6 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80027c4:	f7ff f844 	bl	8001850 <HAL_GetTick>
 80027c8:	4602      	mov	r2, r0
 80027ca:	693b      	ldr	r3, [r7, #16]
 80027cc:	1ad3      	subs	r3, r2, r3
 80027ce:	2b02      	cmp	r3, #2
 80027d0:	d901      	bls.n	80027d6 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 80027d2:	2303      	movs	r3, #3
 80027d4:	e03d      	b.n	8002852 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80027d6:	4b03      	ldr	r3, [pc, #12]	; (80027e4 <HAL_RCC_OscConfig+0x4cc>)
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d1f0      	bne.n	80027c4 <HAL_RCC_OscConfig+0x4ac>
 80027e2:	e035      	b.n	8002850 <HAL_RCC_OscConfig+0x538>
 80027e4:	40023800 	.word	0x40023800
 80027e8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80027ec:	4b1b      	ldr	r3, [pc, #108]	; (800285c <HAL_RCC_OscConfig+0x544>)
 80027ee:	685b      	ldr	r3, [r3, #4]
 80027f0:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	699b      	ldr	r3, [r3, #24]
 80027f6:	2b01      	cmp	r3, #1
 80027f8:	d028      	beq.n	800284c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002804:	429a      	cmp	r2, r3
 8002806:	d121      	bne.n	800284c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002812:	429a      	cmp	r2, r3
 8002814:	d11a      	bne.n	800284c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002816:	68fa      	ldr	r2, [r7, #12]
 8002818:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800281c:	4013      	ands	r3, r2
 800281e:	687a      	ldr	r2, [r7, #4]
 8002820:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002822:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002824:	4293      	cmp	r3, r2
 8002826:	d111      	bne.n	800284c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002832:	085b      	lsrs	r3, r3, #1
 8002834:	3b01      	subs	r3, #1
 8002836:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002838:	429a      	cmp	r2, r3
 800283a:	d107      	bne.n	800284c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002846:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002848:	429a      	cmp	r2, r3
 800284a:	d001      	beq.n	8002850 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 800284c:	2301      	movs	r3, #1
 800284e:	e000      	b.n	8002852 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8002850:	2300      	movs	r3, #0
}
 8002852:	4618      	mov	r0, r3
 8002854:	3718      	adds	r7, #24
 8002856:	46bd      	mov	sp, r7
 8002858:	bd80      	pop	{r7, pc}
 800285a:	bf00      	nop
 800285c:	40023800 	.word	0x40023800

08002860 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002860:	b580      	push	{r7, lr}
 8002862:	b084      	sub	sp, #16
 8002864:	af00      	add	r7, sp, #0
 8002866:	6078      	str	r0, [r7, #4]
 8002868:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800286a:	2300      	movs	r3, #0
 800286c:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	2b00      	cmp	r3, #0
 8002872:	d101      	bne.n	8002878 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002874:	2301      	movs	r3, #1
 8002876:	e0d0      	b.n	8002a1a <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002878:	4b6a      	ldr	r3, [pc, #424]	; (8002a24 <HAL_RCC_ClockConfig+0x1c4>)
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	f003 030f 	and.w	r3, r3, #15
 8002880:	683a      	ldr	r2, [r7, #0]
 8002882:	429a      	cmp	r2, r3
 8002884:	d910      	bls.n	80028a8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002886:	4b67      	ldr	r3, [pc, #412]	; (8002a24 <HAL_RCC_ClockConfig+0x1c4>)
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	f023 020f 	bic.w	r2, r3, #15
 800288e:	4965      	ldr	r1, [pc, #404]	; (8002a24 <HAL_RCC_ClockConfig+0x1c4>)
 8002890:	683b      	ldr	r3, [r7, #0]
 8002892:	4313      	orrs	r3, r2
 8002894:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002896:	4b63      	ldr	r3, [pc, #396]	; (8002a24 <HAL_RCC_ClockConfig+0x1c4>)
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	f003 030f 	and.w	r3, r3, #15
 800289e:	683a      	ldr	r2, [r7, #0]
 80028a0:	429a      	cmp	r2, r3
 80028a2:	d001      	beq.n	80028a8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80028a4:	2301      	movs	r3, #1
 80028a6:	e0b8      	b.n	8002a1a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	f003 0302 	and.w	r3, r3, #2
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d020      	beq.n	80028f6 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	f003 0304 	and.w	r3, r3, #4
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d005      	beq.n	80028cc <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80028c0:	4b59      	ldr	r3, [pc, #356]	; (8002a28 <HAL_RCC_ClockConfig+0x1c8>)
 80028c2:	689b      	ldr	r3, [r3, #8]
 80028c4:	4a58      	ldr	r2, [pc, #352]	; (8002a28 <HAL_RCC_ClockConfig+0x1c8>)
 80028c6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80028ca:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	f003 0308 	and.w	r3, r3, #8
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d005      	beq.n	80028e4 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80028d8:	4b53      	ldr	r3, [pc, #332]	; (8002a28 <HAL_RCC_ClockConfig+0x1c8>)
 80028da:	689b      	ldr	r3, [r3, #8]
 80028dc:	4a52      	ldr	r2, [pc, #328]	; (8002a28 <HAL_RCC_ClockConfig+0x1c8>)
 80028de:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80028e2:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80028e4:	4b50      	ldr	r3, [pc, #320]	; (8002a28 <HAL_RCC_ClockConfig+0x1c8>)
 80028e6:	689b      	ldr	r3, [r3, #8]
 80028e8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	689b      	ldr	r3, [r3, #8]
 80028f0:	494d      	ldr	r1, [pc, #308]	; (8002a28 <HAL_RCC_ClockConfig+0x1c8>)
 80028f2:	4313      	orrs	r3, r2
 80028f4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	f003 0301 	and.w	r3, r3, #1
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d040      	beq.n	8002984 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	685b      	ldr	r3, [r3, #4]
 8002906:	2b01      	cmp	r3, #1
 8002908:	d107      	bne.n	800291a <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800290a:	4b47      	ldr	r3, [pc, #284]	; (8002a28 <HAL_RCC_ClockConfig+0x1c8>)
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002912:	2b00      	cmp	r3, #0
 8002914:	d115      	bne.n	8002942 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002916:	2301      	movs	r3, #1
 8002918:	e07f      	b.n	8002a1a <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	685b      	ldr	r3, [r3, #4]
 800291e:	2b02      	cmp	r3, #2
 8002920:	d107      	bne.n	8002932 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002922:	4b41      	ldr	r3, [pc, #260]	; (8002a28 <HAL_RCC_ClockConfig+0x1c8>)
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800292a:	2b00      	cmp	r3, #0
 800292c:	d109      	bne.n	8002942 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800292e:	2301      	movs	r3, #1
 8002930:	e073      	b.n	8002a1a <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002932:	4b3d      	ldr	r3, [pc, #244]	; (8002a28 <HAL_RCC_ClockConfig+0x1c8>)
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	f003 0302 	and.w	r3, r3, #2
 800293a:	2b00      	cmp	r3, #0
 800293c:	d101      	bne.n	8002942 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800293e:	2301      	movs	r3, #1
 8002940:	e06b      	b.n	8002a1a <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002942:	4b39      	ldr	r3, [pc, #228]	; (8002a28 <HAL_RCC_ClockConfig+0x1c8>)
 8002944:	689b      	ldr	r3, [r3, #8]
 8002946:	f023 0203 	bic.w	r2, r3, #3
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	685b      	ldr	r3, [r3, #4]
 800294e:	4936      	ldr	r1, [pc, #216]	; (8002a28 <HAL_RCC_ClockConfig+0x1c8>)
 8002950:	4313      	orrs	r3, r2
 8002952:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002954:	f7fe ff7c 	bl	8001850 <HAL_GetTick>
 8002958:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800295a:	e00a      	b.n	8002972 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800295c:	f7fe ff78 	bl	8001850 <HAL_GetTick>
 8002960:	4602      	mov	r2, r0
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	1ad3      	subs	r3, r2, r3
 8002966:	f241 3288 	movw	r2, #5000	; 0x1388
 800296a:	4293      	cmp	r3, r2
 800296c:	d901      	bls.n	8002972 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800296e:	2303      	movs	r3, #3
 8002970:	e053      	b.n	8002a1a <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002972:	4b2d      	ldr	r3, [pc, #180]	; (8002a28 <HAL_RCC_ClockConfig+0x1c8>)
 8002974:	689b      	ldr	r3, [r3, #8]
 8002976:	f003 020c 	and.w	r2, r3, #12
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	685b      	ldr	r3, [r3, #4]
 800297e:	009b      	lsls	r3, r3, #2
 8002980:	429a      	cmp	r2, r3
 8002982:	d1eb      	bne.n	800295c <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002984:	4b27      	ldr	r3, [pc, #156]	; (8002a24 <HAL_RCC_ClockConfig+0x1c4>)
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	f003 030f 	and.w	r3, r3, #15
 800298c:	683a      	ldr	r2, [r7, #0]
 800298e:	429a      	cmp	r2, r3
 8002990:	d210      	bcs.n	80029b4 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002992:	4b24      	ldr	r3, [pc, #144]	; (8002a24 <HAL_RCC_ClockConfig+0x1c4>)
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	f023 020f 	bic.w	r2, r3, #15
 800299a:	4922      	ldr	r1, [pc, #136]	; (8002a24 <HAL_RCC_ClockConfig+0x1c4>)
 800299c:	683b      	ldr	r3, [r7, #0]
 800299e:	4313      	orrs	r3, r2
 80029a0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80029a2:	4b20      	ldr	r3, [pc, #128]	; (8002a24 <HAL_RCC_ClockConfig+0x1c4>)
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	f003 030f 	and.w	r3, r3, #15
 80029aa:	683a      	ldr	r2, [r7, #0]
 80029ac:	429a      	cmp	r2, r3
 80029ae:	d001      	beq.n	80029b4 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80029b0:	2301      	movs	r3, #1
 80029b2:	e032      	b.n	8002a1a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	f003 0304 	and.w	r3, r3, #4
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d008      	beq.n	80029d2 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80029c0:	4b19      	ldr	r3, [pc, #100]	; (8002a28 <HAL_RCC_ClockConfig+0x1c8>)
 80029c2:	689b      	ldr	r3, [r3, #8]
 80029c4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	68db      	ldr	r3, [r3, #12]
 80029cc:	4916      	ldr	r1, [pc, #88]	; (8002a28 <HAL_RCC_ClockConfig+0x1c8>)
 80029ce:	4313      	orrs	r3, r2
 80029d0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	f003 0308 	and.w	r3, r3, #8
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d009      	beq.n	80029f2 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80029de:	4b12      	ldr	r3, [pc, #72]	; (8002a28 <HAL_RCC_ClockConfig+0x1c8>)
 80029e0:	689b      	ldr	r3, [r3, #8]
 80029e2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	691b      	ldr	r3, [r3, #16]
 80029ea:	00db      	lsls	r3, r3, #3
 80029ec:	490e      	ldr	r1, [pc, #56]	; (8002a28 <HAL_RCC_ClockConfig+0x1c8>)
 80029ee:	4313      	orrs	r3, r2
 80029f0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80029f2:	f000 f821 	bl	8002a38 <HAL_RCC_GetSysClockFreq>
 80029f6:	4602      	mov	r2, r0
 80029f8:	4b0b      	ldr	r3, [pc, #44]	; (8002a28 <HAL_RCC_ClockConfig+0x1c8>)
 80029fa:	689b      	ldr	r3, [r3, #8]
 80029fc:	091b      	lsrs	r3, r3, #4
 80029fe:	f003 030f 	and.w	r3, r3, #15
 8002a02:	490a      	ldr	r1, [pc, #40]	; (8002a2c <HAL_RCC_ClockConfig+0x1cc>)
 8002a04:	5ccb      	ldrb	r3, [r1, r3]
 8002a06:	fa22 f303 	lsr.w	r3, r2, r3
 8002a0a:	4a09      	ldr	r2, [pc, #36]	; (8002a30 <HAL_RCC_ClockConfig+0x1d0>)
 8002a0c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002a0e:	4b09      	ldr	r3, [pc, #36]	; (8002a34 <HAL_RCC_ClockConfig+0x1d4>)
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	4618      	mov	r0, r3
 8002a14:	f7fe fed8 	bl	80017c8 <HAL_InitTick>

  return HAL_OK;
 8002a18:	2300      	movs	r3, #0
}
 8002a1a:	4618      	mov	r0, r3
 8002a1c:	3710      	adds	r7, #16
 8002a1e:	46bd      	mov	sp, r7
 8002a20:	bd80      	pop	{r7, pc}
 8002a22:	bf00      	nop
 8002a24:	40023c00 	.word	0x40023c00
 8002a28:	40023800 	.word	0x40023800
 8002a2c:	08005c90 	.word	0x08005c90
 8002a30:	20000004 	.word	0x20000004
 8002a34:	20000008 	.word	0x20000008

08002a38 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002a38:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002a3c:	b094      	sub	sp, #80	; 0x50
 8002a3e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8002a40:	2300      	movs	r3, #0
 8002a42:	647b      	str	r3, [r7, #68]	; 0x44
 8002a44:	2300      	movs	r3, #0
 8002a46:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002a48:	2300      	movs	r3, #0
 8002a4a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 8002a4c:	2300      	movs	r3, #0
 8002a4e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002a50:	4b79      	ldr	r3, [pc, #484]	; (8002c38 <HAL_RCC_GetSysClockFreq+0x200>)
 8002a52:	689b      	ldr	r3, [r3, #8]
 8002a54:	f003 030c 	and.w	r3, r3, #12
 8002a58:	2b08      	cmp	r3, #8
 8002a5a:	d00d      	beq.n	8002a78 <HAL_RCC_GetSysClockFreq+0x40>
 8002a5c:	2b08      	cmp	r3, #8
 8002a5e:	f200 80e1 	bhi.w	8002c24 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d002      	beq.n	8002a6c <HAL_RCC_GetSysClockFreq+0x34>
 8002a66:	2b04      	cmp	r3, #4
 8002a68:	d003      	beq.n	8002a72 <HAL_RCC_GetSysClockFreq+0x3a>
 8002a6a:	e0db      	b.n	8002c24 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002a6c:	4b73      	ldr	r3, [pc, #460]	; (8002c3c <HAL_RCC_GetSysClockFreq+0x204>)
 8002a6e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002a70:	e0db      	b.n	8002c2a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002a72:	4b73      	ldr	r3, [pc, #460]	; (8002c40 <HAL_RCC_GetSysClockFreq+0x208>)
 8002a74:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002a76:	e0d8      	b.n	8002c2a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002a78:	4b6f      	ldr	r3, [pc, #444]	; (8002c38 <HAL_RCC_GetSysClockFreq+0x200>)
 8002a7a:	685b      	ldr	r3, [r3, #4]
 8002a7c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002a80:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8002a82:	4b6d      	ldr	r3, [pc, #436]	; (8002c38 <HAL_RCC_GetSysClockFreq+0x200>)
 8002a84:	685b      	ldr	r3, [r3, #4]
 8002a86:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d063      	beq.n	8002b56 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002a8e:	4b6a      	ldr	r3, [pc, #424]	; (8002c38 <HAL_RCC_GetSysClockFreq+0x200>)
 8002a90:	685b      	ldr	r3, [r3, #4]
 8002a92:	099b      	lsrs	r3, r3, #6
 8002a94:	2200      	movs	r2, #0
 8002a96:	63bb      	str	r3, [r7, #56]	; 0x38
 8002a98:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002a9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a9c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002aa0:	633b      	str	r3, [r7, #48]	; 0x30
 8002aa2:	2300      	movs	r3, #0
 8002aa4:	637b      	str	r3, [r7, #52]	; 0x34
 8002aa6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002aaa:	4622      	mov	r2, r4
 8002aac:	462b      	mov	r3, r5
 8002aae:	f04f 0000 	mov.w	r0, #0
 8002ab2:	f04f 0100 	mov.w	r1, #0
 8002ab6:	0159      	lsls	r1, r3, #5
 8002ab8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002abc:	0150      	lsls	r0, r2, #5
 8002abe:	4602      	mov	r2, r0
 8002ac0:	460b      	mov	r3, r1
 8002ac2:	4621      	mov	r1, r4
 8002ac4:	1a51      	subs	r1, r2, r1
 8002ac6:	6139      	str	r1, [r7, #16]
 8002ac8:	4629      	mov	r1, r5
 8002aca:	eb63 0301 	sbc.w	r3, r3, r1
 8002ace:	617b      	str	r3, [r7, #20]
 8002ad0:	f04f 0200 	mov.w	r2, #0
 8002ad4:	f04f 0300 	mov.w	r3, #0
 8002ad8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002adc:	4659      	mov	r1, fp
 8002ade:	018b      	lsls	r3, r1, #6
 8002ae0:	4651      	mov	r1, sl
 8002ae2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002ae6:	4651      	mov	r1, sl
 8002ae8:	018a      	lsls	r2, r1, #6
 8002aea:	4651      	mov	r1, sl
 8002aec:	ebb2 0801 	subs.w	r8, r2, r1
 8002af0:	4659      	mov	r1, fp
 8002af2:	eb63 0901 	sbc.w	r9, r3, r1
 8002af6:	f04f 0200 	mov.w	r2, #0
 8002afa:	f04f 0300 	mov.w	r3, #0
 8002afe:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002b02:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002b06:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002b0a:	4690      	mov	r8, r2
 8002b0c:	4699      	mov	r9, r3
 8002b0e:	4623      	mov	r3, r4
 8002b10:	eb18 0303 	adds.w	r3, r8, r3
 8002b14:	60bb      	str	r3, [r7, #8]
 8002b16:	462b      	mov	r3, r5
 8002b18:	eb49 0303 	adc.w	r3, r9, r3
 8002b1c:	60fb      	str	r3, [r7, #12]
 8002b1e:	f04f 0200 	mov.w	r2, #0
 8002b22:	f04f 0300 	mov.w	r3, #0
 8002b26:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002b2a:	4629      	mov	r1, r5
 8002b2c:	024b      	lsls	r3, r1, #9
 8002b2e:	4621      	mov	r1, r4
 8002b30:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002b34:	4621      	mov	r1, r4
 8002b36:	024a      	lsls	r2, r1, #9
 8002b38:	4610      	mov	r0, r2
 8002b3a:	4619      	mov	r1, r3
 8002b3c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002b3e:	2200      	movs	r2, #0
 8002b40:	62bb      	str	r3, [r7, #40]	; 0x28
 8002b42:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002b44:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002b48:	f7fd fb72 	bl	8000230 <__aeabi_uldivmod>
 8002b4c:	4602      	mov	r2, r0
 8002b4e:	460b      	mov	r3, r1
 8002b50:	4613      	mov	r3, r2
 8002b52:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002b54:	e058      	b.n	8002c08 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002b56:	4b38      	ldr	r3, [pc, #224]	; (8002c38 <HAL_RCC_GetSysClockFreq+0x200>)
 8002b58:	685b      	ldr	r3, [r3, #4]
 8002b5a:	099b      	lsrs	r3, r3, #6
 8002b5c:	2200      	movs	r2, #0
 8002b5e:	4618      	mov	r0, r3
 8002b60:	4611      	mov	r1, r2
 8002b62:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002b66:	623b      	str	r3, [r7, #32]
 8002b68:	2300      	movs	r3, #0
 8002b6a:	627b      	str	r3, [r7, #36]	; 0x24
 8002b6c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002b70:	4642      	mov	r2, r8
 8002b72:	464b      	mov	r3, r9
 8002b74:	f04f 0000 	mov.w	r0, #0
 8002b78:	f04f 0100 	mov.w	r1, #0
 8002b7c:	0159      	lsls	r1, r3, #5
 8002b7e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002b82:	0150      	lsls	r0, r2, #5
 8002b84:	4602      	mov	r2, r0
 8002b86:	460b      	mov	r3, r1
 8002b88:	4641      	mov	r1, r8
 8002b8a:	ebb2 0a01 	subs.w	sl, r2, r1
 8002b8e:	4649      	mov	r1, r9
 8002b90:	eb63 0b01 	sbc.w	fp, r3, r1
 8002b94:	f04f 0200 	mov.w	r2, #0
 8002b98:	f04f 0300 	mov.w	r3, #0
 8002b9c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002ba0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002ba4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002ba8:	ebb2 040a 	subs.w	r4, r2, sl
 8002bac:	eb63 050b 	sbc.w	r5, r3, fp
 8002bb0:	f04f 0200 	mov.w	r2, #0
 8002bb4:	f04f 0300 	mov.w	r3, #0
 8002bb8:	00eb      	lsls	r3, r5, #3
 8002bba:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002bbe:	00e2      	lsls	r2, r4, #3
 8002bc0:	4614      	mov	r4, r2
 8002bc2:	461d      	mov	r5, r3
 8002bc4:	4643      	mov	r3, r8
 8002bc6:	18e3      	adds	r3, r4, r3
 8002bc8:	603b      	str	r3, [r7, #0]
 8002bca:	464b      	mov	r3, r9
 8002bcc:	eb45 0303 	adc.w	r3, r5, r3
 8002bd0:	607b      	str	r3, [r7, #4]
 8002bd2:	f04f 0200 	mov.w	r2, #0
 8002bd6:	f04f 0300 	mov.w	r3, #0
 8002bda:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002bde:	4629      	mov	r1, r5
 8002be0:	028b      	lsls	r3, r1, #10
 8002be2:	4621      	mov	r1, r4
 8002be4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002be8:	4621      	mov	r1, r4
 8002bea:	028a      	lsls	r2, r1, #10
 8002bec:	4610      	mov	r0, r2
 8002bee:	4619      	mov	r1, r3
 8002bf0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002bf2:	2200      	movs	r2, #0
 8002bf4:	61bb      	str	r3, [r7, #24]
 8002bf6:	61fa      	str	r2, [r7, #28]
 8002bf8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002bfc:	f7fd fb18 	bl	8000230 <__aeabi_uldivmod>
 8002c00:	4602      	mov	r2, r0
 8002c02:	460b      	mov	r3, r1
 8002c04:	4613      	mov	r3, r2
 8002c06:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8002c08:	4b0b      	ldr	r3, [pc, #44]	; (8002c38 <HAL_RCC_GetSysClockFreq+0x200>)
 8002c0a:	685b      	ldr	r3, [r3, #4]
 8002c0c:	0c1b      	lsrs	r3, r3, #16
 8002c0e:	f003 0303 	and.w	r3, r3, #3
 8002c12:	3301      	adds	r3, #1
 8002c14:	005b      	lsls	r3, r3, #1
 8002c16:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 8002c18:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002c1a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002c1c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c20:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002c22:	e002      	b.n	8002c2a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002c24:	4b05      	ldr	r3, [pc, #20]	; (8002c3c <HAL_RCC_GetSysClockFreq+0x204>)
 8002c26:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002c28:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002c2a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8002c2c:	4618      	mov	r0, r3
 8002c2e:	3750      	adds	r7, #80	; 0x50
 8002c30:	46bd      	mov	sp, r7
 8002c32:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002c36:	bf00      	nop
 8002c38:	40023800 	.word	0x40023800
 8002c3c:	00f42400 	.word	0x00f42400
 8002c40:	007a1200 	.word	0x007a1200

08002c44 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002c44:	b480      	push	{r7}
 8002c46:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002c48:	4b03      	ldr	r3, [pc, #12]	; (8002c58 <HAL_RCC_GetHCLKFreq+0x14>)
 8002c4a:	681b      	ldr	r3, [r3, #0]
}
 8002c4c:	4618      	mov	r0, r3
 8002c4e:	46bd      	mov	sp, r7
 8002c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c54:	4770      	bx	lr
 8002c56:	bf00      	nop
 8002c58:	20000004 	.word	0x20000004

08002c5c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002c5c:	b580      	push	{r7, lr}
 8002c5e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002c60:	f7ff fff0 	bl	8002c44 <HAL_RCC_GetHCLKFreq>
 8002c64:	4602      	mov	r2, r0
 8002c66:	4b05      	ldr	r3, [pc, #20]	; (8002c7c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002c68:	689b      	ldr	r3, [r3, #8]
 8002c6a:	0a9b      	lsrs	r3, r3, #10
 8002c6c:	f003 0307 	and.w	r3, r3, #7
 8002c70:	4903      	ldr	r1, [pc, #12]	; (8002c80 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002c72:	5ccb      	ldrb	r3, [r1, r3]
 8002c74:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002c78:	4618      	mov	r0, r3
 8002c7a:	bd80      	pop	{r7, pc}
 8002c7c:	40023800 	.word	0x40023800
 8002c80:	08005ca0 	.word	0x08005ca0

08002c84 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002c84:	b580      	push	{r7, lr}
 8002c86:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002c88:	f7ff ffdc 	bl	8002c44 <HAL_RCC_GetHCLKFreq>
 8002c8c:	4602      	mov	r2, r0
 8002c8e:	4b05      	ldr	r3, [pc, #20]	; (8002ca4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002c90:	689b      	ldr	r3, [r3, #8]
 8002c92:	0b5b      	lsrs	r3, r3, #13
 8002c94:	f003 0307 	and.w	r3, r3, #7
 8002c98:	4903      	ldr	r1, [pc, #12]	; (8002ca8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002c9a:	5ccb      	ldrb	r3, [r1, r3]
 8002c9c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002ca0:	4618      	mov	r0, r3
 8002ca2:	bd80      	pop	{r7, pc}
 8002ca4:	40023800 	.word	0x40023800
 8002ca8:	08005ca0 	.word	0x08005ca0

08002cac <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002cac:	b580      	push	{r7, lr}
 8002cae:	b088      	sub	sp, #32
 8002cb0:	af00      	add	r7, sp, #0
 8002cb2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8002cb4:	2300      	movs	r3, #0
 8002cb6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8002cb8:	2300      	movs	r3, #0
 8002cba:	613b      	str	r3, [r7, #16]
  uint32_t plli2sused = 0;
 8002cbc:	2300      	movs	r3, #0
 8002cbe:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8002cc0:	2300      	movs	r3, #0
 8002cc2:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	f003 0301 	and.w	r3, r3, #1
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d012      	beq.n	8002cf6 <HAL_RCCEx_PeriphCLKConfig+0x4a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002cd0:	4b65      	ldr	r3, [pc, #404]	; (8002e68 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002cd2:	689b      	ldr	r3, [r3, #8]
 8002cd4:	4a64      	ldr	r2, [pc, #400]	; (8002e68 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002cd6:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002cda:	6093      	str	r3, [r2, #8]
 8002cdc:	4b62      	ldr	r3, [pc, #392]	; (8002e68 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002cde:	689a      	ldr	r2, [r3, #8]
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ce4:	4960      	ldr	r1, [pc, #384]	; (8002e68 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002ce6:	4313      	orrs	r3, r2
 8002ce8:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d101      	bne.n	8002cf6 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      plli2sused = 1;
 8002cf2:	2301      	movs	r3, #1
 8002cf4:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d017      	beq.n	8002d32 <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002d02:	4b59      	ldr	r3, [pc, #356]	; (8002e68 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002d04:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002d08:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d10:	4955      	ldr	r1, [pc, #340]	; (8002e68 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002d12:	4313      	orrs	r3, r2
 8002d14:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d1c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002d20:	d101      	bne.n	8002d26 <HAL_RCCEx_PeriphCLKConfig+0x7a>
    {
      plli2sused = 1;
 8002d22:	2301      	movs	r3, #1
 8002d24:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d101      	bne.n	8002d32 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      pllsaiused = 1;
 8002d2e:	2301      	movs	r3, #1
 8002d30:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d017      	beq.n	8002d6e <HAL_RCCEx_PeriphCLKConfig+0xc2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002d3e:	4b4a      	ldr	r3, [pc, #296]	; (8002e68 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002d40:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002d44:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d4c:	4946      	ldr	r1, [pc, #280]	; (8002e68 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002d4e:	4313      	orrs	r3, r2
 8002d50:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d58:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002d5c:	d101      	bne.n	8002d62 <HAL_RCCEx_PeriphCLKConfig+0xb6>
    {
      plli2sused = 1;
 8002d5e:	2301      	movs	r3, #1
 8002d60:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d101      	bne.n	8002d6e <HAL_RCCEx_PeriphCLKConfig+0xc2>
    {
      pllsaiused = 1;
 8002d6a:	2301      	movs	r3, #1
 8002d6c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	f003 0320 	and.w	r3, r3, #32
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	f000 808b 	beq.w	8002e92 <HAL_RCCEx_PeriphCLKConfig+0x1e6>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002d7c:	4b3a      	ldr	r3, [pc, #232]	; (8002e68 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002d7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d80:	4a39      	ldr	r2, [pc, #228]	; (8002e68 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002d82:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d86:	6413      	str	r3, [r2, #64]	; 0x40
 8002d88:	4b37      	ldr	r3, [pc, #220]	; (8002e68 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002d8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d8c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d90:	60fb      	str	r3, [r7, #12]
 8002d92:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002d94:	4b35      	ldr	r3, [pc, #212]	; (8002e6c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	4a34      	ldr	r2, [pc, #208]	; (8002e6c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002d9a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d9e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002da0:	f7fe fd56 	bl	8001850 <HAL_GetTick>
 8002da4:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002da6:	e008      	b.n	8002dba <HAL_RCCEx_PeriphCLKConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002da8:	f7fe fd52 	bl	8001850 <HAL_GetTick>
 8002dac:	4602      	mov	r2, r0
 8002dae:	697b      	ldr	r3, [r7, #20]
 8002db0:	1ad3      	subs	r3, r2, r3
 8002db2:	2b64      	cmp	r3, #100	; 0x64
 8002db4:	d901      	bls.n	8002dba <HAL_RCCEx_PeriphCLKConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002db6:	2303      	movs	r3, #3
 8002db8:	e2bc      	b.n	8003334 <HAL_RCCEx_PeriphCLKConfig+0x688>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002dba:	4b2c      	ldr	r3, [pc, #176]	; (8002e6c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d0f0      	beq.n	8002da8 <HAL_RCCEx_PeriphCLKConfig+0xfc>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002dc6:	4b28      	ldr	r3, [pc, #160]	; (8002e68 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002dc8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002dca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002dce:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002dd0:	693b      	ldr	r3, [r7, #16]
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d035      	beq.n	8002e42 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002dda:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002dde:	693a      	ldr	r2, [r7, #16]
 8002de0:	429a      	cmp	r2, r3
 8002de2:	d02e      	beq.n	8002e42 <HAL_RCCEx_PeriphCLKConfig+0x196>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002de4:	4b20      	ldr	r3, [pc, #128]	; (8002e68 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002de6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002de8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002dec:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002dee:	4b1e      	ldr	r3, [pc, #120]	; (8002e68 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002df0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002df2:	4a1d      	ldr	r2, [pc, #116]	; (8002e68 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002df4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002df8:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002dfa:	4b1b      	ldr	r3, [pc, #108]	; (8002e68 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002dfc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002dfe:	4a1a      	ldr	r2, [pc, #104]	; (8002e68 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002e00:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002e04:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8002e06:	4a18      	ldr	r2, [pc, #96]	; (8002e68 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002e08:	693b      	ldr	r3, [r7, #16]
 8002e0a:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002e0c:	4b16      	ldr	r3, [pc, #88]	; (8002e68 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002e0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e10:	f003 0301 	and.w	r3, r3, #1
 8002e14:	2b01      	cmp	r3, #1
 8002e16:	d114      	bne.n	8002e42 <HAL_RCCEx_PeriphCLKConfig+0x196>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e18:	f7fe fd1a 	bl	8001850 <HAL_GetTick>
 8002e1c:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e1e:	e00a      	b.n	8002e36 <HAL_RCCEx_PeriphCLKConfig+0x18a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002e20:	f7fe fd16 	bl	8001850 <HAL_GetTick>
 8002e24:	4602      	mov	r2, r0
 8002e26:	697b      	ldr	r3, [r7, #20]
 8002e28:	1ad3      	subs	r3, r2, r3
 8002e2a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e2e:	4293      	cmp	r3, r2
 8002e30:	d901      	bls.n	8002e36 <HAL_RCCEx_PeriphCLKConfig+0x18a>
          {
            return HAL_TIMEOUT;
 8002e32:	2303      	movs	r3, #3
 8002e34:	e27e      	b.n	8003334 <HAL_RCCEx_PeriphCLKConfig+0x688>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e36:	4b0c      	ldr	r3, [pc, #48]	; (8002e68 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002e38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e3a:	f003 0302 	and.w	r3, r3, #2
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d0ee      	beq.n	8002e20 <HAL_RCCEx_PeriphCLKConfig+0x174>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e46:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002e4a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002e4e:	d111      	bne.n	8002e74 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
 8002e50:	4b05      	ldr	r3, [pc, #20]	; (8002e68 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002e52:	689b      	ldr	r3, [r3, #8]
 8002e54:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8002e5c:	4b04      	ldr	r3, [pc, #16]	; (8002e70 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002e5e:	400b      	ands	r3, r1
 8002e60:	4901      	ldr	r1, [pc, #4]	; (8002e68 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002e62:	4313      	orrs	r3, r2
 8002e64:	608b      	str	r3, [r1, #8]
 8002e66:	e00b      	b.n	8002e80 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 8002e68:	40023800 	.word	0x40023800
 8002e6c:	40007000 	.word	0x40007000
 8002e70:	0ffffcff 	.word	0x0ffffcff
 8002e74:	4ba4      	ldr	r3, [pc, #656]	; (8003108 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8002e76:	689b      	ldr	r3, [r3, #8]
 8002e78:	4aa3      	ldr	r2, [pc, #652]	; (8003108 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8002e7a:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8002e7e:	6093      	str	r3, [r2, #8]
 8002e80:	4ba1      	ldr	r3, [pc, #644]	; (8003108 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8002e82:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e88:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002e8c:	499e      	ldr	r1, [pc, #632]	; (8003108 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8002e8e:	4313      	orrs	r3, r2
 8002e90:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	f003 0310 	and.w	r3, r3, #16
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d010      	beq.n	8002ec0 <HAL_RCCEx_PeriphCLKConfig+0x214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002e9e:	4b9a      	ldr	r3, [pc, #616]	; (8003108 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8002ea0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002ea4:	4a98      	ldr	r2, [pc, #608]	; (8003108 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8002ea6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002eaa:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8002eae:	4b96      	ldr	r3, [pc, #600]	; (8003108 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8002eb0:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002eb8:	4993      	ldr	r1, [pc, #588]	; (8003108 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8002eba:	4313      	orrs	r3, r2
 8002ebc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d00a      	beq.n	8002ee2 <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002ecc:	4b8e      	ldr	r3, [pc, #568]	; (8003108 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8002ece:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ed2:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002eda:	498b      	ldr	r1, [pc, #556]	; (8003108 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8002edc:	4313      	orrs	r3, r2
 8002ede:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d00a      	beq.n	8002f04 <HAL_RCCEx_PeriphCLKConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002eee:	4b86      	ldr	r3, [pc, #536]	; (8003108 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8002ef0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ef4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002efc:	4982      	ldr	r1, [pc, #520]	; (8003108 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8002efe:	4313      	orrs	r3, r2
 8002f00:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d00a      	beq.n	8002f26 <HAL_RCCEx_PeriphCLKConfig+0x27a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002f10:	4b7d      	ldr	r3, [pc, #500]	; (8003108 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8002f12:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f16:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002f1e:	497a      	ldr	r1, [pc, #488]	; (8003108 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8002f20:	4313      	orrs	r3, r2
 8002f22:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d00a      	beq.n	8002f48 <HAL_RCCEx_PeriphCLKConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002f32:	4b75      	ldr	r3, [pc, #468]	; (8003108 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8002f34:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f38:	f023 0203 	bic.w	r2, r3, #3
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f40:	4971      	ldr	r1, [pc, #452]	; (8003108 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8002f42:	4313      	orrs	r3, r2
 8002f44:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d00a      	beq.n	8002f6a <HAL_RCCEx_PeriphCLKConfig+0x2be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002f54:	4b6c      	ldr	r3, [pc, #432]	; (8003108 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8002f56:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f5a:	f023 020c 	bic.w	r2, r3, #12
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f62:	4969      	ldr	r1, [pc, #420]	; (8003108 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8002f64:	4313      	orrs	r3, r2
 8002f66:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d00a      	beq.n	8002f8c <HAL_RCCEx_PeriphCLKConfig+0x2e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002f76:	4b64      	ldr	r3, [pc, #400]	; (8003108 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8002f78:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f7c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f84:	4960      	ldr	r1, [pc, #384]	; (8003108 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8002f86:	4313      	orrs	r3, r2
 8002f88:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d00a      	beq.n	8002fae <HAL_RCCEx_PeriphCLKConfig+0x302>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002f98:	4b5b      	ldr	r3, [pc, #364]	; (8003108 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8002f9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f9e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002fa6:	4958      	ldr	r1, [pc, #352]	; (8003108 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8002fa8:	4313      	orrs	r3, r2
 8002faa:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d00a      	beq.n	8002fd0 <HAL_RCCEx_PeriphCLKConfig+0x324>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002fba:	4b53      	ldr	r3, [pc, #332]	; (8003108 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8002fbc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002fc0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002fc8:	494f      	ldr	r1, [pc, #316]	; (8003108 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8002fca:	4313      	orrs	r3, r2
 8002fcc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d00a      	beq.n	8002ff2 <HAL_RCCEx_PeriphCLKConfig+0x346>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8002fdc:	4b4a      	ldr	r3, [pc, #296]	; (8003108 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8002fde:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002fe2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002fea:	4947      	ldr	r1, [pc, #284]	; (8003108 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8002fec:	4313      	orrs	r3, r2
 8002fee:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d00a      	beq.n	8003014 <HAL_RCCEx_PeriphCLKConfig+0x368>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8002ffe:	4b42      	ldr	r3, [pc, #264]	; (8003108 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8003000:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003004:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800300c:	493e      	ldr	r1, [pc, #248]	; (8003108 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800300e:	4313      	orrs	r3, r2
 8003010:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800301c:	2b00      	cmp	r3, #0
 800301e:	d00a      	beq.n	8003036 <HAL_RCCEx_PeriphCLKConfig+0x38a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8003020:	4b39      	ldr	r3, [pc, #228]	; (8003108 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8003022:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003026:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800302e:	4936      	ldr	r1, [pc, #216]	; (8003108 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8003030:	4313      	orrs	r3, r2
 8003032:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800303e:	2b00      	cmp	r3, #0
 8003040:	d011      	beq.n	8003066 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8003042:	4b31      	ldr	r3, [pc, #196]	; (8003108 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8003044:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003048:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003050:	492d      	ldr	r1, [pc, #180]	; (8003108 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8003052:	4313      	orrs	r3, r2
 8003054:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800305c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003060:	d101      	bne.n	8003066 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      pllsaiused = 1;
 8003062:	2301      	movs	r3, #1
 8003064:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800306e:	2b00      	cmp	r3, #0
 8003070:	d00a      	beq.n	8003088 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003072:	4b25      	ldr	r3, [pc, #148]	; (8003108 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8003074:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003078:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003080:	4921      	ldr	r1, [pc, #132]	; (8003108 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8003082:	4313      	orrs	r3, r2
 8003084:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003090:	2b00      	cmp	r3, #0
 8003092:	d00a      	beq.n	80030aa <HAL_RCCEx_PeriphCLKConfig+0x3fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003094:	4b1c      	ldr	r3, [pc, #112]	; (8003108 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8003096:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800309a:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80030a2:	4919      	ldr	r1, [pc, #100]	; (8003108 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80030a4:	4313      	orrs	r3, r2
 80030a6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d00a      	beq.n	80030cc <HAL_RCCEx_PeriphCLKConfig+0x420>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 80030b6:	4b14      	ldr	r3, [pc, #80]	; (8003108 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80030b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030bc:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80030c4:	4910      	ldr	r1, [pc, #64]	; (8003108 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80030c6:	4313      	orrs	r3, r2
 80030c8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2 or I2S */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80030cc:	69fb      	ldr	r3, [r7, #28]
 80030ce:	2b01      	cmp	r3, #1
 80030d0:	d006      	beq.n	80030e0 <HAL_RCCEx_PeriphCLKConfig+0x434>
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030da:	2b00      	cmp	r3, #0
 80030dc:	f000 809d 	beq.w	800321a <HAL_RCCEx_PeriphCLKConfig+0x56e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80030e0:	4b09      	ldr	r3, [pc, #36]	; (8003108 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	4a08      	ldr	r2, [pc, #32]	; (8003108 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80030e6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80030ea:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80030ec:	f7fe fbb0 	bl	8001850 <HAL_GetTick>
 80030f0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80030f2:	e00b      	b.n	800310c <HAL_RCCEx_PeriphCLKConfig+0x460>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80030f4:	f7fe fbac 	bl	8001850 <HAL_GetTick>
 80030f8:	4602      	mov	r2, r0
 80030fa:	697b      	ldr	r3, [r7, #20]
 80030fc:	1ad3      	subs	r3, r2, r3
 80030fe:	2b64      	cmp	r3, #100	; 0x64
 8003100:	d904      	bls.n	800310c <HAL_RCCEx_PeriphCLKConfig+0x460>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003102:	2303      	movs	r3, #3
 8003104:	e116      	b.n	8003334 <HAL_RCCEx_PeriphCLKConfig+0x688>
 8003106:	bf00      	nop
 8003108:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800310c:	4b8b      	ldr	r3, [pc, #556]	; (800333c <HAL_RCCEx_PeriphCLKConfig+0x690>)
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003114:	2b00      	cmp	r3, #0
 8003116:	d1ed      	bne.n	80030f4 <HAL_RCCEx_PeriphCLKConfig+0x448>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	f003 0301 	and.w	r3, r3, #1
 8003120:	2b00      	cmp	r3, #0
 8003122:	d017      	beq.n	8003154 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003128:	2b00      	cmp	r3, #0
 800312a:	d113      	bne.n	8003154 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800312c:	4b83      	ldr	r3, [pc, #524]	; (800333c <HAL_RCCEx_PeriphCLKConfig+0x690>)
 800312e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003132:	0e1b      	lsrs	r3, r3, #24
 8003134:	f003 030f 	and.w	r3, r3, #15
 8003138:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, PeriphClkInit->PLLI2S.PLLI2SR);
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	685b      	ldr	r3, [r3, #4]
 800313e:	019a      	lsls	r2, r3, #6
 8003140:	693b      	ldr	r3, [r7, #16]
 8003142:	061b      	lsls	r3, r3, #24
 8003144:	431a      	orrs	r2, r3
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	689b      	ldr	r3, [r3, #8]
 800314a:	071b      	lsls	r3, r3, #28
 800314c:	497b      	ldr	r1, [pc, #492]	; (800333c <HAL_RCCEx_PeriphCLKConfig+0x690>)
 800314e:	4313      	orrs	r3, r2
 8003150:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800315c:	2b00      	cmp	r3, #0
 800315e:	d004      	beq.n	800316a <HAL_RCCEx_PeriphCLKConfig+0x4be>
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003164:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003168:	d00a      	beq.n	8003180 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003172:	2b00      	cmp	r3, #0
 8003174:	d024      	beq.n	80031c0 <HAL_RCCEx_PeriphCLKConfig+0x514>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800317a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800317e:	d11f      	bne.n	80031c0 <HAL_RCCEx_PeriphCLKConfig+0x514>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003180:	4b6e      	ldr	r3, [pc, #440]	; (800333c <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8003182:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003186:	0f1b      	lsrs	r3, r3, #28
 8003188:	f003 0307 	and.w	r3, r3, #7
 800318c:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg0);
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	685b      	ldr	r3, [r3, #4]
 8003192:	019a      	lsls	r2, r3, #6
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	68db      	ldr	r3, [r3, #12]
 8003198:	061b      	lsls	r3, r3, #24
 800319a:	431a      	orrs	r2, r3
 800319c:	693b      	ldr	r3, [r7, #16]
 800319e:	071b      	lsls	r3, r3, #28
 80031a0:	4966      	ldr	r1, [pc, #408]	; (800333c <HAL_RCCEx_PeriphCLKConfig+0x690>)
 80031a2:	4313      	orrs	r3, r2
 80031a4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80031a8:	4b64      	ldr	r3, [pc, #400]	; (800333c <HAL_RCCEx_PeriphCLKConfig+0x690>)
 80031aa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80031ae:	f023 021f 	bic.w	r2, r3, #31
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	69db      	ldr	r3, [r3, #28]
 80031b6:	3b01      	subs	r3, #1
 80031b8:	4960      	ldr	r1, [pc, #384]	; (800333c <HAL_RCCEx_PeriphCLKConfig+0x690>)
 80031ba:	4313      	orrs	r3, r2
 80031bc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d00d      	beq.n	80031e8 <HAL_RCCEx_PeriphCLKConfig+0x53c>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	685b      	ldr	r3, [r3, #4]
 80031d0:	019a      	lsls	r2, r3, #6
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	68db      	ldr	r3, [r3, #12]
 80031d6:	061b      	lsls	r3, r3, #24
 80031d8:	431a      	orrs	r2, r3
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	689b      	ldr	r3, [r3, #8]
 80031de:	071b      	lsls	r3, r3, #28
 80031e0:	4956      	ldr	r1, [pc, #344]	; (800333c <HAL_RCCEx_PeriphCLKConfig+0x690>)
 80031e2:	4313      	orrs	r3, r2
 80031e4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80031e8:	4b54      	ldr	r3, [pc, #336]	; (800333c <HAL_RCCEx_PeriphCLKConfig+0x690>)
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	4a53      	ldr	r2, [pc, #332]	; (800333c <HAL_RCCEx_PeriphCLKConfig+0x690>)
 80031ee:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80031f2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80031f4:	f7fe fb2c 	bl	8001850 <HAL_GetTick>
 80031f8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80031fa:	e008      	b.n	800320e <HAL_RCCEx_PeriphCLKConfig+0x562>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80031fc:	f7fe fb28 	bl	8001850 <HAL_GetTick>
 8003200:	4602      	mov	r2, r0
 8003202:	697b      	ldr	r3, [r7, #20]
 8003204:	1ad3      	subs	r3, r2, r3
 8003206:	2b64      	cmp	r3, #100	; 0x64
 8003208:	d901      	bls.n	800320e <HAL_RCCEx_PeriphCLKConfig+0x562>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800320a:	2303      	movs	r3, #3
 800320c:	e092      	b.n	8003334 <HAL_RCCEx_PeriphCLKConfig+0x688>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800320e:	4b4b      	ldr	r3, [pc, #300]	; (800333c <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003216:	2b00      	cmp	r3, #0
 8003218:	d0f0      	beq.n	80031fc <HAL_RCCEx_PeriphCLKConfig+0x550>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800321a:	69bb      	ldr	r3, [r7, #24]
 800321c:	2b01      	cmp	r3, #1
 800321e:	f040 8088 	bne.w	8003332 <HAL_RCCEx_PeriphCLKConfig+0x686>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8003222:	4b46      	ldr	r3, [pc, #280]	; (800333c <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	4a45      	ldr	r2, [pc, #276]	; (800333c <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8003228:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800322c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800322e:	f7fe fb0f 	bl	8001850 <HAL_GetTick>
 8003232:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003234:	e008      	b.n	8003248 <HAL_RCCEx_PeriphCLKConfig+0x59c>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003236:	f7fe fb0b 	bl	8001850 <HAL_GetTick>
 800323a:	4602      	mov	r2, r0
 800323c:	697b      	ldr	r3, [r7, #20]
 800323e:	1ad3      	subs	r3, r2, r3
 8003240:	2b64      	cmp	r3, #100	; 0x64
 8003242:	d901      	bls.n	8003248 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003244:	2303      	movs	r3, #3
 8003246:	e075      	b.n	8003334 <HAL_RCCEx_PeriphCLKConfig+0x688>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003248:	4b3c      	ldr	r3, [pc, #240]	; (800333c <HAL_RCCEx_PeriphCLKConfig+0x690>)
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003250:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003254:	d0ef      	beq.n	8003236 <HAL_RCCEx_PeriphCLKConfig+0x58a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800325e:	2b00      	cmp	r3, #0
 8003260:	d003      	beq.n	800326a <HAL_RCCEx_PeriphCLKConfig+0x5be>
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003266:	2b00      	cmp	r3, #0
 8003268:	d009      	beq.n	800327e <HAL_RCCEx_PeriphCLKConfig+0x5d2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003272:	2b00      	cmp	r3, #0
 8003274:	d024      	beq.n	80032c0 <HAL_RCCEx_PeriphCLKConfig+0x614>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800327a:	2b00      	cmp	r3, #0
 800327c:	d120      	bne.n	80032c0 <HAL_RCCEx_PeriphCLKConfig+0x614>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800327e:	4b2f      	ldr	r3, [pc, #188]	; (800333c <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8003280:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003284:	0c1b      	lsrs	r3, r3, #16
 8003286:	f003 0303 	and.w	r3, r3, #3
 800328a:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ);
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	691b      	ldr	r3, [r3, #16]
 8003290:	019a      	lsls	r2, r3, #6
 8003292:	693b      	ldr	r3, [r7, #16]
 8003294:	041b      	lsls	r3, r3, #16
 8003296:	431a      	orrs	r2, r3
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	695b      	ldr	r3, [r3, #20]
 800329c:	061b      	lsls	r3, r3, #24
 800329e:	4927      	ldr	r1, [pc, #156]	; (800333c <HAL_RCCEx_PeriphCLKConfig+0x690>)
 80032a0:	4313      	orrs	r3, r2
 80032a2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80032a6:	4b25      	ldr	r3, [pc, #148]	; (800333c <HAL_RCCEx_PeriphCLKConfig+0x690>)
 80032a8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80032ac:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	6a1b      	ldr	r3, [r3, #32]
 80032b4:	3b01      	subs	r3, #1
 80032b6:	021b      	lsls	r3, r3, #8
 80032b8:	4920      	ldr	r1, [pc, #128]	; (800333c <HAL_RCCEx_PeriphCLKConfig+0x690>)
 80032ba:	4313      	orrs	r3, r2
 80032bc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d018      	beq.n	80032fe <HAL_RCCEx_PeriphCLKConfig+0x652>
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80032d0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80032d4:	d113      	bne.n	80032fe <HAL_RCCEx_PeriphCLKConfig+0x652>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80032d6:	4b19      	ldr	r3, [pc, #100]	; (800333c <HAL_RCCEx_PeriphCLKConfig+0x690>)
 80032d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032dc:	0e1b      	lsrs	r3, r3, #24
 80032de:	f003 030f 	and.w	r3, r3, #15
 80032e2:	613b      	str	r3, [r7, #16]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0);
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	691b      	ldr	r3, [r3, #16]
 80032e8:	019a      	lsls	r2, r3, #6
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	699b      	ldr	r3, [r3, #24]
 80032ee:	041b      	lsls	r3, r3, #16
 80032f0:	431a      	orrs	r2, r3
 80032f2:	693b      	ldr	r3, [r7, #16]
 80032f4:	061b      	lsls	r3, r3, #24
 80032f6:	4911      	ldr	r1, [pc, #68]	; (800333c <HAL_RCCEx_PeriphCLKConfig+0x690>)
 80032f8:	4313      	orrs	r3, r2
 80032fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80032fe:	4b0f      	ldr	r3, [pc, #60]	; (800333c <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	4a0e      	ldr	r2, [pc, #56]	; (800333c <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8003304:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003308:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800330a:	f7fe faa1 	bl	8001850 <HAL_GetTick>
 800330e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003310:	e008      	b.n	8003324 <HAL_RCCEx_PeriphCLKConfig+0x678>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003312:	f7fe fa9d 	bl	8001850 <HAL_GetTick>
 8003316:	4602      	mov	r2, r0
 8003318:	697b      	ldr	r3, [r7, #20]
 800331a:	1ad3      	subs	r3, r2, r3
 800331c:	2b64      	cmp	r3, #100	; 0x64
 800331e:	d901      	bls.n	8003324 <HAL_RCCEx_PeriphCLKConfig+0x678>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003320:	2303      	movs	r3, #3
 8003322:	e007      	b.n	8003334 <HAL_RCCEx_PeriphCLKConfig+0x688>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003324:	4b05      	ldr	r3, [pc, #20]	; (800333c <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800332c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003330:	d1ef      	bne.n	8003312 <HAL_RCCEx_PeriphCLKConfig+0x666>
      }
    }
  }
  return HAL_OK;
 8003332:	2300      	movs	r3, #0
}
 8003334:	4618      	mov	r0, r3
 8003336:	3720      	adds	r7, #32
 8003338:	46bd      	mov	sp, r7
 800333a:	bd80      	pop	{r7, pc}
 800333c:	40023800 	.word	0x40023800

08003340 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003340:	b580      	push	{r7, lr}
 8003342:	b082      	sub	sp, #8
 8003344:	af00      	add	r7, sp, #0
 8003346:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	2b00      	cmp	r3, #0
 800334c:	d101      	bne.n	8003352 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800334e:	2301      	movs	r3, #1
 8003350:	e049      	b.n	80033e6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003358:	b2db      	uxtb	r3, r3
 800335a:	2b00      	cmp	r3, #0
 800335c:	d106      	bne.n	800336c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	2200      	movs	r2, #0
 8003362:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003366:	6878      	ldr	r0, [r7, #4]
 8003368:	f7fe f8a0 	bl	80014ac <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	2202      	movs	r2, #2
 8003370:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681a      	ldr	r2, [r3, #0]
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	3304      	adds	r3, #4
 800337c:	4619      	mov	r1, r3
 800337e:	4610      	mov	r0, r2
 8003380:	f000 f9f6 	bl	8003770 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	2201      	movs	r2, #1
 8003388:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	2201      	movs	r2, #1
 8003390:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	2201      	movs	r2, #1
 8003398:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	2201      	movs	r2, #1
 80033a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	2201      	movs	r2, #1
 80033a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	2201      	movs	r2, #1
 80033b0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	2201      	movs	r2, #1
 80033b8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	2201      	movs	r2, #1
 80033c0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	2201      	movs	r2, #1
 80033c8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	2201      	movs	r2, #1
 80033d0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	2201      	movs	r2, #1
 80033d8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	2201      	movs	r2, #1
 80033e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80033e4:	2300      	movs	r3, #0
}
 80033e6:	4618      	mov	r0, r3
 80033e8:	3708      	adds	r7, #8
 80033ea:	46bd      	mov	sp, r7
 80033ec:	bd80      	pop	{r7, pc}
	...

080033f0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80033f0:	b480      	push	{r7}
 80033f2:	b085      	sub	sp, #20
 80033f4:	af00      	add	r7, sp, #0
 80033f6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80033fe:	b2db      	uxtb	r3, r3
 8003400:	2b01      	cmp	r3, #1
 8003402:	d001      	beq.n	8003408 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003404:	2301      	movs	r3, #1
 8003406:	e054      	b.n	80034b2 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	2202      	movs	r2, #2
 800340c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	68da      	ldr	r2, [r3, #12]
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	f042 0201 	orr.w	r2, r2, #1
 800341e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	4a26      	ldr	r2, [pc, #152]	; (80034c0 <HAL_TIM_Base_Start_IT+0xd0>)
 8003426:	4293      	cmp	r3, r2
 8003428:	d022      	beq.n	8003470 <HAL_TIM_Base_Start_IT+0x80>
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003432:	d01d      	beq.n	8003470 <HAL_TIM_Base_Start_IT+0x80>
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	4a22      	ldr	r2, [pc, #136]	; (80034c4 <HAL_TIM_Base_Start_IT+0xd4>)
 800343a:	4293      	cmp	r3, r2
 800343c:	d018      	beq.n	8003470 <HAL_TIM_Base_Start_IT+0x80>
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	4a21      	ldr	r2, [pc, #132]	; (80034c8 <HAL_TIM_Base_Start_IT+0xd8>)
 8003444:	4293      	cmp	r3, r2
 8003446:	d013      	beq.n	8003470 <HAL_TIM_Base_Start_IT+0x80>
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	4a1f      	ldr	r2, [pc, #124]	; (80034cc <HAL_TIM_Base_Start_IT+0xdc>)
 800344e:	4293      	cmp	r3, r2
 8003450:	d00e      	beq.n	8003470 <HAL_TIM_Base_Start_IT+0x80>
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	4a1e      	ldr	r2, [pc, #120]	; (80034d0 <HAL_TIM_Base_Start_IT+0xe0>)
 8003458:	4293      	cmp	r3, r2
 800345a:	d009      	beq.n	8003470 <HAL_TIM_Base_Start_IT+0x80>
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	4a1c      	ldr	r2, [pc, #112]	; (80034d4 <HAL_TIM_Base_Start_IT+0xe4>)
 8003462:	4293      	cmp	r3, r2
 8003464:	d004      	beq.n	8003470 <HAL_TIM_Base_Start_IT+0x80>
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	4a1b      	ldr	r2, [pc, #108]	; (80034d8 <HAL_TIM_Base_Start_IT+0xe8>)
 800346c:	4293      	cmp	r3, r2
 800346e:	d115      	bne.n	800349c <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	689a      	ldr	r2, [r3, #8]
 8003476:	4b19      	ldr	r3, [pc, #100]	; (80034dc <HAL_TIM_Base_Start_IT+0xec>)
 8003478:	4013      	ands	r3, r2
 800347a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	2b06      	cmp	r3, #6
 8003480:	d015      	beq.n	80034ae <HAL_TIM_Base_Start_IT+0xbe>
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003488:	d011      	beq.n	80034ae <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	681a      	ldr	r2, [r3, #0]
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	f042 0201 	orr.w	r2, r2, #1
 8003498:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800349a:	e008      	b.n	80034ae <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	681a      	ldr	r2, [r3, #0]
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	f042 0201 	orr.w	r2, r2, #1
 80034aa:	601a      	str	r2, [r3, #0]
 80034ac:	e000      	b.n	80034b0 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80034ae:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80034b0:	2300      	movs	r3, #0
}
 80034b2:	4618      	mov	r0, r3
 80034b4:	3714      	adds	r7, #20
 80034b6:	46bd      	mov	sp, r7
 80034b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034bc:	4770      	bx	lr
 80034be:	bf00      	nop
 80034c0:	40010000 	.word	0x40010000
 80034c4:	40000400 	.word	0x40000400
 80034c8:	40000800 	.word	0x40000800
 80034cc:	40000c00 	.word	0x40000c00
 80034d0:	40010400 	.word	0x40010400
 80034d4:	40014000 	.word	0x40014000
 80034d8:	40001800 	.word	0x40001800
 80034dc:	00010007 	.word	0x00010007

080034e0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80034e0:	b580      	push	{r7, lr}
 80034e2:	b082      	sub	sp, #8
 80034e4:	af00      	add	r7, sp, #0
 80034e6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	691b      	ldr	r3, [r3, #16]
 80034ee:	f003 0302 	and.w	r3, r3, #2
 80034f2:	2b02      	cmp	r3, #2
 80034f4:	d122      	bne.n	800353c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	68db      	ldr	r3, [r3, #12]
 80034fc:	f003 0302 	and.w	r3, r3, #2
 8003500:	2b02      	cmp	r3, #2
 8003502:	d11b      	bne.n	800353c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	f06f 0202 	mvn.w	r2, #2
 800350c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	2201      	movs	r2, #1
 8003512:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	699b      	ldr	r3, [r3, #24]
 800351a:	f003 0303 	and.w	r3, r3, #3
 800351e:	2b00      	cmp	r3, #0
 8003520:	d003      	beq.n	800352a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003522:	6878      	ldr	r0, [r7, #4]
 8003524:	f000 f905 	bl	8003732 <HAL_TIM_IC_CaptureCallback>
 8003528:	e005      	b.n	8003536 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800352a:	6878      	ldr	r0, [r7, #4]
 800352c:	f000 f8f7 	bl	800371e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003530:	6878      	ldr	r0, [r7, #4]
 8003532:	f000 f908 	bl	8003746 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	2200      	movs	r2, #0
 800353a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	691b      	ldr	r3, [r3, #16]
 8003542:	f003 0304 	and.w	r3, r3, #4
 8003546:	2b04      	cmp	r3, #4
 8003548:	d122      	bne.n	8003590 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	68db      	ldr	r3, [r3, #12]
 8003550:	f003 0304 	and.w	r3, r3, #4
 8003554:	2b04      	cmp	r3, #4
 8003556:	d11b      	bne.n	8003590 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	f06f 0204 	mvn.w	r2, #4
 8003560:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	2202      	movs	r2, #2
 8003566:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	699b      	ldr	r3, [r3, #24]
 800356e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003572:	2b00      	cmp	r3, #0
 8003574:	d003      	beq.n	800357e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003576:	6878      	ldr	r0, [r7, #4]
 8003578:	f000 f8db 	bl	8003732 <HAL_TIM_IC_CaptureCallback>
 800357c:	e005      	b.n	800358a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800357e:	6878      	ldr	r0, [r7, #4]
 8003580:	f000 f8cd 	bl	800371e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003584:	6878      	ldr	r0, [r7, #4]
 8003586:	f000 f8de 	bl	8003746 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	2200      	movs	r2, #0
 800358e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	691b      	ldr	r3, [r3, #16]
 8003596:	f003 0308 	and.w	r3, r3, #8
 800359a:	2b08      	cmp	r3, #8
 800359c:	d122      	bne.n	80035e4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	68db      	ldr	r3, [r3, #12]
 80035a4:	f003 0308 	and.w	r3, r3, #8
 80035a8:	2b08      	cmp	r3, #8
 80035aa:	d11b      	bne.n	80035e4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	f06f 0208 	mvn.w	r2, #8
 80035b4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	2204      	movs	r2, #4
 80035ba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	69db      	ldr	r3, [r3, #28]
 80035c2:	f003 0303 	and.w	r3, r3, #3
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d003      	beq.n	80035d2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80035ca:	6878      	ldr	r0, [r7, #4]
 80035cc:	f000 f8b1 	bl	8003732 <HAL_TIM_IC_CaptureCallback>
 80035d0:	e005      	b.n	80035de <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80035d2:	6878      	ldr	r0, [r7, #4]
 80035d4:	f000 f8a3 	bl	800371e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80035d8:	6878      	ldr	r0, [r7, #4]
 80035da:	f000 f8b4 	bl	8003746 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	2200      	movs	r2, #0
 80035e2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	691b      	ldr	r3, [r3, #16]
 80035ea:	f003 0310 	and.w	r3, r3, #16
 80035ee:	2b10      	cmp	r3, #16
 80035f0:	d122      	bne.n	8003638 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	68db      	ldr	r3, [r3, #12]
 80035f8:	f003 0310 	and.w	r3, r3, #16
 80035fc:	2b10      	cmp	r3, #16
 80035fe:	d11b      	bne.n	8003638 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	f06f 0210 	mvn.w	r2, #16
 8003608:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	2208      	movs	r2, #8
 800360e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	69db      	ldr	r3, [r3, #28]
 8003616:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800361a:	2b00      	cmp	r3, #0
 800361c:	d003      	beq.n	8003626 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800361e:	6878      	ldr	r0, [r7, #4]
 8003620:	f000 f887 	bl	8003732 <HAL_TIM_IC_CaptureCallback>
 8003624:	e005      	b.n	8003632 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003626:	6878      	ldr	r0, [r7, #4]
 8003628:	f000 f879 	bl	800371e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800362c:	6878      	ldr	r0, [r7, #4]
 800362e:	f000 f88a 	bl	8003746 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	2200      	movs	r2, #0
 8003636:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	691b      	ldr	r3, [r3, #16]
 800363e:	f003 0301 	and.w	r3, r3, #1
 8003642:	2b01      	cmp	r3, #1
 8003644:	d10e      	bne.n	8003664 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	68db      	ldr	r3, [r3, #12]
 800364c:	f003 0301 	and.w	r3, r3, #1
 8003650:	2b01      	cmp	r3, #1
 8003652:	d107      	bne.n	8003664 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	f06f 0201 	mvn.w	r2, #1
 800365c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800365e:	6878      	ldr	r0, [r7, #4]
 8003660:	f7fd fea0 	bl	80013a4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	691b      	ldr	r3, [r3, #16]
 800366a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800366e:	2b80      	cmp	r3, #128	; 0x80
 8003670:	d10e      	bne.n	8003690 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	68db      	ldr	r3, [r3, #12]
 8003678:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800367c:	2b80      	cmp	r3, #128	; 0x80
 800367e:	d107      	bne.n	8003690 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003688:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800368a:	6878      	ldr	r0, [r7, #4]
 800368c:	f000 f91a 	bl	80038c4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	691b      	ldr	r3, [r3, #16]
 8003696:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800369a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800369e:	d10e      	bne.n	80036be <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	68db      	ldr	r3, [r3, #12]
 80036a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80036aa:	2b80      	cmp	r3, #128	; 0x80
 80036ac:	d107      	bne.n	80036be <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80036b6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80036b8:	6878      	ldr	r0, [r7, #4]
 80036ba:	f000 f90d 	bl	80038d8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	691b      	ldr	r3, [r3, #16]
 80036c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036c8:	2b40      	cmp	r3, #64	; 0x40
 80036ca:	d10e      	bne.n	80036ea <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	68db      	ldr	r3, [r3, #12]
 80036d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036d6:	2b40      	cmp	r3, #64	; 0x40
 80036d8:	d107      	bne.n	80036ea <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80036e2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80036e4:	6878      	ldr	r0, [r7, #4]
 80036e6:	f000 f838 	bl	800375a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	691b      	ldr	r3, [r3, #16]
 80036f0:	f003 0320 	and.w	r3, r3, #32
 80036f4:	2b20      	cmp	r3, #32
 80036f6:	d10e      	bne.n	8003716 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	68db      	ldr	r3, [r3, #12]
 80036fe:	f003 0320 	and.w	r3, r3, #32
 8003702:	2b20      	cmp	r3, #32
 8003704:	d107      	bne.n	8003716 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	f06f 0220 	mvn.w	r2, #32
 800370e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003710:	6878      	ldr	r0, [r7, #4]
 8003712:	f000 f8cd 	bl	80038b0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003716:	bf00      	nop
 8003718:	3708      	adds	r7, #8
 800371a:	46bd      	mov	sp, r7
 800371c:	bd80      	pop	{r7, pc}

0800371e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800371e:	b480      	push	{r7}
 8003720:	b083      	sub	sp, #12
 8003722:	af00      	add	r7, sp, #0
 8003724:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003726:	bf00      	nop
 8003728:	370c      	adds	r7, #12
 800372a:	46bd      	mov	sp, r7
 800372c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003730:	4770      	bx	lr

08003732 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003732:	b480      	push	{r7}
 8003734:	b083      	sub	sp, #12
 8003736:	af00      	add	r7, sp, #0
 8003738:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800373a:	bf00      	nop
 800373c:	370c      	adds	r7, #12
 800373e:	46bd      	mov	sp, r7
 8003740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003744:	4770      	bx	lr

08003746 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003746:	b480      	push	{r7}
 8003748:	b083      	sub	sp, #12
 800374a:	af00      	add	r7, sp, #0
 800374c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800374e:	bf00      	nop
 8003750:	370c      	adds	r7, #12
 8003752:	46bd      	mov	sp, r7
 8003754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003758:	4770      	bx	lr

0800375a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800375a:	b480      	push	{r7}
 800375c:	b083      	sub	sp, #12
 800375e:	af00      	add	r7, sp, #0
 8003760:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003762:	bf00      	nop
 8003764:	370c      	adds	r7, #12
 8003766:	46bd      	mov	sp, r7
 8003768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800376c:	4770      	bx	lr
	...

08003770 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003770:	b480      	push	{r7}
 8003772:	b085      	sub	sp, #20
 8003774:	af00      	add	r7, sp, #0
 8003776:	6078      	str	r0, [r7, #4]
 8003778:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	4a40      	ldr	r2, [pc, #256]	; (8003884 <TIM_Base_SetConfig+0x114>)
 8003784:	4293      	cmp	r3, r2
 8003786:	d013      	beq.n	80037b0 <TIM_Base_SetConfig+0x40>
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800378e:	d00f      	beq.n	80037b0 <TIM_Base_SetConfig+0x40>
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	4a3d      	ldr	r2, [pc, #244]	; (8003888 <TIM_Base_SetConfig+0x118>)
 8003794:	4293      	cmp	r3, r2
 8003796:	d00b      	beq.n	80037b0 <TIM_Base_SetConfig+0x40>
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	4a3c      	ldr	r2, [pc, #240]	; (800388c <TIM_Base_SetConfig+0x11c>)
 800379c:	4293      	cmp	r3, r2
 800379e:	d007      	beq.n	80037b0 <TIM_Base_SetConfig+0x40>
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	4a3b      	ldr	r2, [pc, #236]	; (8003890 <TIM_Base_SetConfig+0x120>)
 80037a4:	4293      	cmp	r3, r2
 80037a6:	d003      	beq.n	80037b0 <TIM_Base_SetConfig+0x40>
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	4a3a      	ldr	r2, [pc, #232]	; (8003894 <TIM_Base_SetConfig+0x124>)
 80037ac:	4293      	cmp	r3, r2
 80037ae:	d108      	bne.n	80037c2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80037b6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80037b8:	683b      	ldr	r3, [r7, #0]
 80037ba:	685b      	ldr	r3, [r3, #4]
 80037bc:	68fa      	ldr	r2, [r7, #12]
 80037be:	4313      	orrs	r3, r2
 80037c0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	4a2f      	ldr	r2, [pc, #188]	; (8003884 <TIM_Base_SetConfig+0x114>)
 80037c6:	4293      	cmp	r3, r2
 80037c8:	d02b      	beq.n	8003822 <TIM_Base_SetConfig+0xb2>
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80037d0:	d027      	beq.n	8003822 <TIM_Base_SetConfig+0xb2>
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	4a2c      	ldr	r2, [pc, #176]	; (8003888 <TIM_Base_SetConfig+0x118>)
 80037d6:	4293      	cmp	r3, r2
 80037d8:	d023      	beq.n	8003822 <TIM_Base_SetConfig+0xb2>
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	4a2b      	ldr	r2, [pc, #172]	; (800388c <TIM_Base_SetConfig+0x11c>)
 80037de:	4293      	cmp	r3, r2
 80037e0:	d01f      	beq.n	8003822 <TIM_Base_SetConfig+0xb2>
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	4a2a      	ldr	r2, [pc, #168]	; (8003890 <TIM_Base_SetConfig+0x120>)
 80037e6:	4293      	cmp	r3, r2
 80037e8:	d01b      	beq.n	8003822 <TIM_Base_SetConfig+0xb2>
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	4a29      	ldr	r2, [pc, #164]	; (8003894 <TIM_Base_SetConfig+0x124>)
 80037ee:	4293      	cmp	r3, r2
 80037f0:	d017      	beq.n	8003822 <TIM_Base_SetConfig+0xb2>
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	4a28      	ldr	r2, [pc, #160]	; (8003898 <TIM_Base_SetConfig+0x128>)
 80037f6:	4293      	cmp	r3, r2
 80037f8:	d013      	beq.n	8003822 <TIM_Base_SetConfig+0xb2>
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	4a27      	ldr	r2, [pc, #156]	; (800389c <TIM_Base_SetConfig+0x12c>)
 80037fe:	4293      	cmp	r3, r2
 8003800:	d00f      	beq.n	8003822 <TIM_Base_SetConfig+0xb2>
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	4a26      	ldr	r2, [pc, #152]	; (80038a0 <TIM_Base_SetConfig+0x130>)
 8003806:	4293      	cmp	r3, r2
 8003808:	d00b      	beq.n	8003822 <TIM_Base_SetConfig+0xb2>
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	4a25      	ldr	r2, [pc, #148]	; (80038a4 <TIM_Base_SetConfig+0x134>)
 800380e:	4293      	cmp	r3, r2
 8003810:	d007      	beq.n	8003822 <TIM_Base_SetConfig+0xb2>
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	4a24      	ldr	r2, [pc, #144]	; (80038a8 <TIM_Base_SetConfig+0x138>)
 8003816:	4293      	cmp	r3, r2
 8003818:	d003      	beq.n	8003822 <TIM_Base_SetConfig+0xb2>
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	4a23      	ldr	r2, [pc, #140]	; (80038ac <TIM_Base_SetConfig+0x13c>)
 800381e:	4293      	cmp	r3, r2
 8003820:	d108      	bne.n	8003834 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003828:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800382a:	683b      	ldr	r3, [r7, #0]
 800382c:	68db      	ldr	r3, [r3, #12]
 800382e:	68fa      	ldr	r2, [r7, #12]
 8003830:	4313      	orrs	r3, r2
 8003832:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800383a:	683b      	ldr	r3, [r7, #0]
 800383c:	695b      	ldr	r3, [r3, #20]
 800383e:	4313      	orrs	r3, r2
 8003840:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	68fa      	ldr	r2, [r7, #12]
 8003846:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003848:	683b      	ldr	r3, [r7, #0]
 800384a:	689a      	ldr	r2, [r3, #8]
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003850:	683b      	ldr	r3, [r7, #0]
 8003852:	681a      	ldr	r2, [r3, #0]
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	4a0a      	ldr	r2, [pc, #40]	; (8003884 <TIM_Base_SetConfig+0x114>)
 800385c:	4293      	cmp	r3, r2
 800385e:	d003      	beq.n	8003868 <TIM_Base_SetConfig+0xf8>
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	4a0c      	ldr	r2, [pc, #48]	; (8003894 <TIM_Base_SetConfig+0x124>)
 8003864:	4293      	cmp	r3, r2
 8003866:	d103      	bne.n	8003870 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003868:	683b      	ldr	r3, [r7, #0]
 800386a:	691a      	ldr	r2, [r3, #16]
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	2201      	movs	r2, #1
 8003874:	615a      	str	r2, [r3, #20]
}
 8003876:	bf00      	nop
 8003878:	3714      	adds	r7, #20
 800387a:	46bd      	mov	sp, r7
 800387c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003880:	4770      	bx	lr
 8003882:	bf00      	nop
 8003884:	40010000 	.word	0x40010000
 8003888:	40000400 	.word	0x40000400
 800388c:	40000800 	.word	0x40000800
 8003890:	40000c00 	.word	0x40000c00
 8003894:	40010400 	.word	0x40010400
 8003898:	40014000 	.word	0x40014000
 800389c:	40014400 	.word	0x40014400
 80038a0:	40014800 	.word	0x40014800
 80038a4:	40001800 	.word	0x40001800
 80038a8:	40001c00 	.word	0x40001c00
 80038ac:	40002000 	.word	0x40002000

080038b0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80038b0:	b480      	push	{r7}
 80038b2:	b083      	sub	sp, #12
 80038b4:	af00      	add	r7, sp, #0
 80038b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80038b8:	bf00      	nop
 80038ba:	370c      	adds	r7, #12
 80038bc:	46bd      	mov	sp, r7
 80038be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c2:	4770      	bx	lr

080038c4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80038c4:	b480      	push	{r7}
 80038c6:	b083      	sub	sp, #12
 80038c8:	af00      	add	r7, sp, #0
 80038ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80038cc:	bf00      	nop
 80038ce:	370c      	adds	r7, #12
 80038d0:	46bd      	mov	sp, r7
 80038d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d6:	4770      	bx	lr

080038d8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80038d8:	b480      	push	{r7}
 80038da:	b083      	sub	sp, #12
 80038dc:	af00      	add	r7, sp, #0
 80038de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80038e0:	bf00      	nop
 80038e2:	370c      	adds	r7, #12
 80038e4:	46bd      	mov	sp, r7
 80038e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ea:	4770      	bx	lr

080038ec <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80038ec:	b580      	push	{r7, lr}
 80038ee:	b082      	sub	sp, #8
 80038f0:	af00      	add	r7, sp, #0
 80038f2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d101      	bne.n	80038fe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80038fa:	2301      	movs	r3, #1
 80038fc:	e040      	b.n	8003980 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003902:	2b00      	cmp	r3, #0
 8003904:	d106      	bne.n	8003914 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	2200      	movs	r2, #0
 800390a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800390e:	6878      	ldr	r0, [r7, #4]
 8003910:	f7fd fdf2 	bl	80014f8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	2224      	movs	r2, #36	; 0x24
 8003918:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	681a      	ldr	r2, [r3, #0]
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	f022 0201 	bic.w	r2, r2, #1
 8003928:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800392a:	6878      	ldr	r0, [r7, #4]
 800392c:	f000 fbb6 	bl	800409c <UART_SetConfig>
 8003930:	4603      	mov	r3, r0
 8003932:	2b01      	cmp	r3, #1
 8003934:	d101      	bne.n	800393a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8003936:	2301      	movs	r3, #1
 8003938:	e022      	b.n	8003980 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800393e:	2b00      	cmp	r3, #0
 8003940:	d002      	beq.n	8003948 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003942:	6878      	ldr	r0, [r7, #4]
 8003944:	f000 fe0e 	bl	8004564 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	685a      	ldr	r2, [r3, #4]
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003956:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	689a      	ldr	r2, [r3, #8]
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003966:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	681a      	ldr	r2, [r3, #0]
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	f042 0201 	orr.w	r2, r2, #1
 8003976:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003978:	6878      	ldr	r0, [r7, #4]
 800397a:	f000 fe95 	bl	80046a8 <UART_CheckIdleState>
 800397e:	4603      	mov	r3, r0
}
 8003980:	4618      	mov	r0, r3
 8003982:	3708      	adds	r7, #8
 8003984:	46bd      	mov	sp, r7
 8003986:	bd80      	pop	{r7, pc}

08003988 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8003988:	b480      	push	{r7}
 800398a:	b08b      	sub	sp, #44	; 0x2c
 800398c:	af00      	add	r7, sp, #0
 800398e:	60f8      	str	r0, [r7, #12]
 8003990:	60b9      	str	r1, [r7, #8]
 8003992:	4613      	mov	r3, r2
 8003994:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800399a:	2b20      	cmp	r3, #32
 800399c:	d147      	bne.n	8003a2e <HAL_UART_Transmit_IT+0xa6>
  {
    if ((pData == NULL) || (Size == 0U))
 800399e:	68bb      	ldr	r3, [r7, #8]
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d002      	beq.n	80039aa <HAL_UART_Transmit_IT+0x22>
 80039a4:	88fb      	ldrh	r3, [r7, #6]
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d101      	bne.n	80039ae <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 80039aa:	2301      	movs	r3, #1
 80039ac:	e040      	b.n	8003a30 <HAL_UART_Transmit_IT+0xa8>
    }

    huart->pTxBuffPtr  = pData;
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	68ba      	ldr	r2, [r7, #8]
 80039b2:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	88fa      	ldrh	r2, [r7, #6]
 80039b8:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	88fa      	ldrh	r2, [r7, #6]
 80039c0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    huart->TxISR       = NULL;
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	2200      	movs	r2, #0
 80039c8:	66da      	str	r2, [r3, #108]	; 0x6c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	2200      	movs	r2, #0
 80039ce:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	2221      	movs	r2, #33	; 0x21
 80039d6:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	689b      	ldr	r3, [r3, #8]
 80039dc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80039e0:	d107      	bne.n	80039f2 <HAL_UART_Transmit_IT+0x6a>
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	691b      	ldr	r3, [r3, #16]
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d103      	bne.n	80039f2 <HAL_UART_Transmit_IT+0x6a>
    {
      huart->TxISR = UART_TxISR_16BIT;
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	4a13      	ldr	r2, [pc, #76]	; (8003a3c <HAL_UART_Transmit_IT+0xb4>)
 80039ee:	66da      	str	r2, [r3, #108]	; 0x6c
 80039f0:	e002      	b.n	80039f8 <HAL_UART_Transmit_IT+0x70>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	4a12      	ldr	r2, [pc, #72]	; (8003a40 <HAL_UART_Transmit_IT+0xb8>)
 80039f6:	66da      	str	r2, [r3, #108]	; 0x6c
    }

    /* Enable the Transmit Data Register Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039fe:	697b      	ldr	r3, [r7, #20]
 8003a00:	e853 3f00 	ldrex	r3, [r3]
 8003a04:	613b      	str	r3, [r7, #16]
   return(result);
 8003a06:	693b      	ldr	r3, [r7, #16]
 8003a08:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003a0c:	627b      	str	r3, [r7, #36]	; 0x24
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	461a      	mov	r2, r3
 8003a14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a16:	623b      	str	r3, [r7, #32]
 8003a18:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a1a:	69f9      	ldr	r1, [r7, #28]
 8003a1c:	6a3a      	ldr	r2, [r7, #32]
 8003a1e:	e841 2300 	strex	r3, r2, [r1]
 8003a22:	61bb      	str	r3, [r7, #24]
   return(result);
 8003a24:	69bb      	ldr	r3, [r7, #24]
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d1e6      	bne.n	80039f8 <HAL_UART_Transmit_IT+0x70>

    return HAL_OK;
 8003a2a:	2300      	movs	r3, #0
 8003a2c:	e000      	b.n	8003a30 <HAL_UART_Transmit_IT+0xa8>
  }
  else
  {
    return HAL_BUSY;
 8003a2e:	2302      	movs	r3, #2
  }
}
 8003a30:	4618      	mov	r0, r3
 8003a32:	372c      	adds	r7, #44	; 0x2c
 8003a34:	46bd      	mov	sp, r7
 8003a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a3a:	4770      	bx	lr
 8003a3c:	08004bdb 	.word	0x08004bdb
 8003a40:	08004b25 	.word	0x08004b25

08003a44 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003a44:	b580      	push	{r7, lr}
 8003a46:	b08a      	sub	sp, #40	; 0x28
 8003a48:	af00      	add	r7, sp, #0
 8003a4a:	60f8      	str	r0, [r7, #12]
 8003a4c:	60b9      	str	r1, [r7, #8]
 8003a4e:	4613      	mov	r3, r2
 8003a50:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003a58:	2b20      	cmp	r3, #32
 8003a5a:	d132      	bne.n	8003ac2 <HAL_UART_Receive_IT+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 8003a5c:	68bb      	ldr	r3, [r7, #8]
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d002      	beq.n	8003a68 <HAL_UART_Receive_IT+0x24>
 8003a62:	88fb      	ldrh	r3, [r7, #6]
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d101      	bne.n	8003a6c <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8003a68:	2301      	movs	r3, #1
 8003a6a:	e02b      	b.n	8003ac4 <HAL_UART_Receive_IT+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	2200      	movs	r2, #0
 8003a70:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	685b      	ldr	r3, [r3, #4]
 8003a78:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d018      	beq.n	8003ab2 <HAL_UART_Receive_IT+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a86:	697b      	ldr	r3, [r7, #20]
 8003a88:	e853 3f00 	ldrex	r3, [r3]
 8003a8c:	613b      	str	r3, [r7, #16]
   return(result);
 8003a8e:	693b      	ldr	r3, [r7, #16]
 8003a90:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003a94:	627b      	str	r3, [r7, #36]	; 0x24
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	461a      	mov	r2, r3
 8003a9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a9e:	623b      	str	r3, [r7, #32]
 8003aa0:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003aa2:	69f9      	ldr	r1, [r7, #28]
 8003aa4:	6a3a      	ldr	r2, [r7, #32]
 8003aa6:	e841 2300 	strex	r3, r2, [r1]
 8003aaa:	61bb      	str	r3, [r7, #24]
   return(result);
 8003aac:	69bb      	ldr	r3, [r7, #24]
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d1e6      	bne.n	8003a80 <HAL_UART_Receive_IT+0x3c>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8003ab2:	88fb      	ldrh	r3, [r7, #6]
 8003ab4:	461a      	mov	r2, r3
 8003ab6:	68b9      	ldr	r1, [r7, #8]
 8003ab8:	68f8      	ldr	r0, [r7, #12]
 8003aba:	f000 fef3 	bl	80048a4 <UART_Start_Receive_IT>
 8003abe:	4603      	mov	r3, r0
 8003ac0:	e000      	b.n	8003ac4 <HAL_UART_Receive_IT+0x80>
  }
  else
  {
    return HAL_BUSY;
 8003ac2:	2302      	movs	r3, #2
  }
}
 8003ac4:	4618      	mov	r0, r3
 8003ac6:	3728      	adds	r7, #40	; 0x28
 8003ac8:	46bd      	mov	sp, r7
 8003aca:	bd80      	pop	{r7, pc}

08003acc <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003acc:	b580      	push	{r7, lr}
 8003ace:	b0ba      	sub	sp, #232	; 0xe8
 8003ad0:	af00      	add	r7, sp, #0
 8003ad2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	69db      	ldr	r3, [r3, #28]
 8003ada:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	689b      	ldr	r3, [r3, #8]
 8003aee:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8003af2:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8003af6:	f640 030f 	movw	r3, #2063	; 0x80f
 8003afa:	4013      	ands	r3, r2
 8003afc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8003b00:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d115      	bne.n	8003b34 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8003b08:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003b0c:	f003 0320 	and.w	r3, r3, #32
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d00f      	beq.n	8003b34 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003b14:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003b18:	f003 0320 	and.w	r3, r3, #32
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d009      	beq.n	8003b34 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	f000 8297 	beq.w	8004058 <HAL_UART_IRQHandler+0x58c>
      {
        huart->RxISR(huart);
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003b2e:	6878      	ldr	r0, [r7, #4]
 8003b30:	4798      	blx	r3
      }
      return;
 8003b32:	e291      	b.n	8004058 <HAL_UART_IRQHandler+0x58c>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8003b34:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	f000 8117 	beq.w	8003d6c <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8003b3e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003b42:	f003 0301 	and.w	r3, r3, #1
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d106      	bne.n	8003b58 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8003b4a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8003b4e:	4b85      	ldr	r3, [pc, #532]	; (8003d64 <HAL_UART_IRQHandler+0x298>)
 8003b50:	4013      	ands	r3, r2
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	f000 810a 	beq.w	8003d6c <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003b58:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003b5c:	f003 0301 	and.w	r3, r3, #1
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d011      	beq.n	8003b88 <HAL_UART_IRQHandler+0xbc>
 8003b64:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003b68:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d00b      	beq.n	8003b88 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	2201      	movs	r2, #1
 8003b76:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003b7e:	f043 0201 	orr.w	r2, r3, #1
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003b88:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003b8c:	f003 0302 	and.w	r3, r3, #2
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d011      	beq.n	8003bb8 <HAL_UART_IRQHandler+0xec>
 8003b94:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003b98:	f003 0301 	and.w	r3, r3, #1
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d00b      	beq.n	8003bb8 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	2202      	movs	r2, #2
 8003ba6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003bae:	f043 0204 	orr.w	r2, r3, #4
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003bb8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003bbc:	f003 0304 	and.w	r3, r3, #4
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d011      	beq.n	8003be8 <HAL_UART_IRQHandler+0x11c>
 8003bc4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003bc8:	f003 0301 	and.w	r3, r3, #1
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d00b      	beq.n	8003be8 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	2204      	movs	r2, #4
 8003bd6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003bde:	f043 0202 	orr.w	r2, r3, #2
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8003be8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003bec:	f003 0308 	and.w	r3, r3, #8
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d017      	beq.n	8003c24 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003bf4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003bf8:	f003 0320 	and.w	r3, r3, #32
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d105      	bne.n	8003c0c <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8003c00:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003c04:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d00b      	beq.n	8003c24 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	2208      	movs	r2, #8
 8003c12:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003c1a:	f043 0208 	orr.w	r2, r3, #8
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8003c24:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003c28:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d012      	beq.n	8003c56 <HAL_UART_IRQHandler+0x18a>
 8003c30:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003c34:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d00c      	beq.n	8003c56 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003c44:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003c4c:	f043 0220 	orr.w	r2, r3, #32
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	f000 81fd 	beq.w	800405c <HAL_UART_IRQHandler+0x590>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8003c62:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003c66:	f003 0320 	and.w	r3, r3, #32
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d00d      	beq.n	8003c8a <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003c6e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003c72:	f003 0320 	and.w	r3, r3, #32
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d007      	beq.n	8003c8a <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d003      	beq.n	8003c8a <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003c86:	6878      	ldr	r0, [r7, #4]
 8003c88:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003c90:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	689b      	ldr	r3, [r3, #8]
 8003c9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c9e:	2b40      	cmp	r3, #64	; 0x40
 8003ca0:	d005      	beq.n	8003cae <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8003ca2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003ca6:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d04f      	beq.n	8003d4e <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003cae:	6878      	ldr	r0, [r7, #4]
 8003cb0:	f000 febe 	bl	8004a30 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	689b      	ldr	r3, [r3, #8]
 8003cba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003cbe:	2b40      	cmp	r3, #64	; 0x40
 8003cc0:	d141      	bne.n	8003d46 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	3308      	adds	r3, #8
 8003cc8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ccc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003cd0:	e853 3f00 	ldrex	r3, [r3]
 8003cd4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003cd8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003cdc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003ce0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	3308      	adds	r3, #8
 8003cea:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8003cee:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8003cf2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cf6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8003cfa:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8003cfe:	e841 2300 	strex	r3, r2, [r1]
 8003d02:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8003d06:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d1d9      	bne.n	8003cc2 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d013      	beq.n	8003d3e <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003d1a:	4a13      	ldr	r2, [pc, #76]	; (8003d68 <HAL_UART_IRQHandler+0x29c>)
 8003d1c:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003d22:	4618      	mov	r0, r3
 8003d24:	f7fd ff45 	bl	8001bb2 <HAL_DMA_Abort_IT>
 8003d28:	4603      	mov	r3, r0
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d017      	beq.n	8003d5e <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003d32:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003d34:	687a      	ldr	r2, [r7, #4]
 8003d36:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8003d38:	4610      	mov	r0, r2
 8003d3a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003d3c:	e00f      	b.n	8003d5e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003d3e:	6878      	ldr	r0, [r7, #4]
 8003d40:	f000 f996 	bl	8004070 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003d44:	e00b      	b.n	8003d5e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003d46:	6878      	ldr	r0, [r7, #4]
 8003d48:	f000 f992 	bl	8004070 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003d4c:	e007      	b.n	8003d5e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003d4e:	6878      	ldr	r0, [r7, #4]
 8003d50:	f000 f98e 	bl	8004070 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	2200      	movs	r2, #0
 8003d58:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 8003d5c:	e17e      	b.n	800405c <HAL_UART_IRQHandler+0x590>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003d5e:	bf00      	nop
    return;
 8003d60:	e17c      	b.n	800405c <HAL_UART_IRQHandler+0x590>
 8003d62:	bf00      	nop
 8003d64:	04000120 	.word	0x04000120
 8003d68:	08004af9 	.word	0x08004af9

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003d70:	2b01      	cmp	r3, #1
 8003d72:	f040 814c 	bne.w	800400e <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8003d76:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003d7a:	f003 0310 	and.w	r3, r3, #16
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	f000 8145 	beq.w	800400e <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8003d84:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003d88:	f003 0310 	and.w	r3, r3, #16
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	f000 813e 	beq.w	800400e <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	2210      	movs	r2, #16
 8003d98:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	689b      	ldr	r3, [r3, #8]
 8003da0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003da4:	2b40      	cmp	r3, #64	; 0x40
 8003da6:	f040 80b6 	bne.w	8003f16 <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	685b      	ldr	r3, [r3, #4]
 8003db2:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003db6:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	f000 8150 	beq.w	8004060 <HAL_UART_IRQHandler+0x594>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8003dc6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003dca:	429a      	cmp	r2, r3
 8003dcc:	f080 8148 	bcs.w	8004060 <HAL_UART_IRQHandler+0x594>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003dd6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003dde:	69db      	ldr	r3, [r3, #28]
 8003de0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003de4:	f000 8086 	beq.w	8003ef4 <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003df0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003df4:	e853 3f00 	ldrex	r3, [r3]
 8003df8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003dfc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003e00:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003e04:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	461a      	mov	r2, r3
 8003e0e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8003e12:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8003e16:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e1a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8003e1e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003e22:	e841 2300 	strex	r3, r2, [r1]
 8003e26:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8003e2a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d1da      	bne.n	8003de8 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	3308      	adds	r3, #8
 8003e38:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e3a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003e3c:	e853 3f00 	ldrex	r3, [r3]
 8003e40:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8003e42:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003e44:	f023 0301 	bic.w	r3, r3, #1
 8003e48:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	3308      	adds	r3, #8
 8003e52:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003e56:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8003e5a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e5c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8003e5e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003e62:	e841 2300 	strex	r3, r2, [r1]
 8003e66:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8003e68:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d1e1      	bne.n	8003e32 <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	3308      	adds	r3, #8
 8003e74:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e76:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003e78:	e853 3f00 	ldrex	r3, [r3]
 8003e7c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8003e7e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003e80:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003e84:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	3308      	adds	r3, #8
 8003e8e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003e92:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003e94:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e96:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003e98:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003e9a:	e841 2300 	strex	r3, r2, [r1]
 8003e9e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003ea0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d1e3      	bne.n	8003e6e <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	2220      	movs	r2, #32
 8003eaa:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	2200      	movs	r2, #0
 8003eb2:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003eba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003ebc:	e853 3f00 	ldrex	r3, [r3]
 8003ec0:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003ec2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003ec4:	f023 0310 	bic.w	r3, r3, #16
 8003ec8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	461a      	mov	r2, r3
 8003ed2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003ed6:	65bb      	str	r3, [r7, #88]	; 0x58
 8003ed8:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003eda:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003edc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003ede:	e841 2300 	strex	r3, r2, [r1]
 8003ee2:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003ee4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d1e4      	bne.n	8003eb4 <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003eee:	4618      	mov	r0, r3
 8003ef0:	f7fd fdef 	bl	8001ad2 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	2202      	movs	r2, #2
 8003ef8:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003f06:	b29b      	uxth	r3, r3
 8003f08:	1ad3      	subs	r3, r2, r3
 8003f0a:	b29b      	uxth	r3, r3
 8003f0c:	4619      	mov	r1, r3
 8003f0e:	6878      	ldr	r0, [r7, #4]
 8003f10:	f000 f8b8 	bl	8004084 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003f14:	e0a4      	b.n	8004060 <HAL_UART_IRQHandler+0x594>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003f22:	b29b      	uxth	r3, r3
 8003f24:	1ad3      	subs	r3, r2, r3
 8003f26:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003f30:	b29b      	uxth	r3, r3
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	f000 8096 	beq.w	8004064 <HAL_UART_IRQHandler+0x598>
          && (nb_rx_data > 0U))
 8003f38:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	f000 8091 	beq.w	8004064 <HAL_UART_IRQHandler+0x598>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f4a:	e853 3f00 	ldrex	r3, [r3]
 8003f4e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003f50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f52:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003f56:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	461a      	mov	r2, r3
 8003f60:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8003f64:	647b      	str	r3, [r7, #68]	; 0x44
 8003f66:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f68:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003f6a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003f6c:	e841 2300 	strex	r3, r2, [r1]
 8003f70:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003f72:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d1e4      	bne.n	8003f42 <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	3308      	adds	r3, #8
 8003f7e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f82:	e853 3f00 	ldrex	r3, [r3]
 8003f86:	623b      	str	r3, [r7, #32]
   return(result);
 8003f88:	6a3b      	ldr	r3, [r7, #32]
 8003f8a:	f023 0301 	bic.w	r3, r3, #1
 8003f8e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	3308      	adds	r3, #8
 8003f98:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003f9c:	633a      	str	r2, [r7, #48]	; 0x30
 8003f9e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fa0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003fa2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003fa4:	e841 2300 	strex	r3, r2, [r1]
 8003fa8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003faa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d1e3      	bne.n	8003f78 <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	2220      	movs	r2, #32
 8003fb4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	2200      	movs	r2, #0
 8003fbc:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	2200      	movs	r2, #0
 8003fc2:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fca:	693b      	ldr	r3, [r7, #16]
 8003fcc:	e853 3f00 	ldrex	r3, [r3]
 8003fd0:	60fb      	str	r3, [r7, #12]
   return(result);
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	f023 0310 	bic.w	r3, r3, #16
 8003fd8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	461a      	mov	r2, r3
 8003fe2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003fe6:	61fb      	str	r3, [r7, #28]
 8003fe8:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fea:	69b9      	ldr	r1, [r7, #24]
 8003fec:	69fa      	ldr	r2, [r7, #28]
 8003fee:	e841 2300 	strex	r3, r2, [r1]
 8003ff2:	617b      	str	r3, [r7, #20]
   return(result);
 8003ff4:	697b      	ldr	r3, [r7, #20]
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d1e4      	bne.n	8003fc4 <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	2202      	movs	r2, #2
 8003ffe:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004000:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004004:	4619      	mov	r1, r3
 8004006:	6878      	ldr	r0, [r7, #4]
 8004008:	f000 f83c 	bl	8004084 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800400c:	e02a      	b.n	8004064 <HAL_UART_IRQHandler+0x598>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800400e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004012:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004016:	2b00      	cmp	r3, #0
 8004018:	d00e      	beq.n	8004038 <HAL_UART_IRQHandler+0x56c>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800401a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800401e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004022:	2b00      	cmp	r3, #0
 8004024:	d008      	beq.n	8004038 <HAL_UART_IRQHandler+0x56c>
  {
    if (huart->TxISR != NULL)
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800402a:	2b00      	cmp	r3, #0
 800402c:	d01c      	beq.n	8004068 <HAL_UART_IRQHandler+0x59c>
    {
      huart->TxISR(huart);
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004032:	6878      	ldr	r0, [r7, #4]
 8004034:	4798      	blx	r3
    }
    return;
 8004036:	e017      	b.n	8004068 <HAL_UART_IRQHandler+0x59c>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8004038:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800403c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004040:	2b00      	cmp	r3, #0
 8004042:	d012      	beq.n	800406a <HAL_UART_IRQHandler+0x59e>
 8004044:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004048:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800404c:	2b00      	cmp	r3, #0
 800404e:	d00c      	beq.n	800406a <HAL_UART_IRQHandler+0x59e>
  {
    UART_EndTransmit_IT(huart);
 8004050:	6878      	ldr	r0, [r7, #4]
 8004052:	f000 fe22 	bl	8004c9a <UART_EndTransmit_IT>
    return;
 8004056:	e008      	b.n	800406a <HAL_UART_IRQHandler+0x59e>
      return;
 8004058:	bf00      	nop
 800405a:	e006      	b.n	800406a <HAL_UART_IRQHandler+0x59e>
    return;
 800405c:	bf00      	nop
 800405e:	e004      	b.n	800406a <HAL_UART_IRQHandler+0x59e>
      return;
 8004060:	bf00      	nop
 8004062:	e002      	b.n	800406a <HAL_UART_IRQHandler+0x59e>
      return;
 8004064:	bf00      	nop
 8004066:	e000      	b.n	800406a <HAL_UART_IRQHandler+0x59e>
    return;
 8004068:	bf00      	nop
  }

}
 800406a:	37e8      	adds	r7, #232	; 0xe8
 800406c:	46bd      	mov	sp, r7
 800406e:	bd80      	pop	{r7, pc}

08004070 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004070:	b480      	push	{r7}
 8004072:	b083      	sub	sp, #12
 8004074:	af00      	add	r7, sp, #0
 8004076:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8004078:	bf00      	nop
 800407a:	370c      	adds	r7, #12
 800407c:	46bd      	mov	sp, r7
 800407e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004082:	4770      	bx	lr

08004084 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004084:	b480      	push	{r7}
 8004086:	b083      	sub	sp, #12
 8004088:	af00      	add	r7, sp, #0
 800408a:	6078      	str	r0, [r7, #4]
 800408c:	460b      	mov	r3, r1
 800408e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004090:	bf00      	nop
 8004092:	370c      	adds	r7, #12
 8004094:	46bd      	mov	sp, r7
 8004096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800409a:	4770      	bx	lr

0800409c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800409c:	b580      	push	{r7, lr}
 800409e:	b088      	sub	sp, #32
 80040a0:	af00      	add	r7, sp, #0
 80040a2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80040a4:	2300      	movs	r3, #0
 80040a6:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	689a      	ldr	r2, [r3, #8]
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	691b      	ldr	r3, [r3, #16]
 80040b0:	431a      	orrs	r2, r3
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	695b      	ldr	r3, [r3, #20]
 80040b6:	431a      	orrs	r2, r3
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	69db      	ldr	r3, [r3, #28]
 80040bc:	4313      	orrs	r3, r2
 80040be:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	681a      	ldr	r2, [r3, #0]
 80040c6:	4ba6      	ldr	r3, [pc, #664]	; (8004360 <UART_SetConfig+0x2c4>)
 80040c8:	4013      	ands	r3, r2
 80040ca:	687a      	ldr	r2, [r7, #4]
 80040cc:	6812      	ldr	r2, [r2, #0]
 80040ce:	6979      	ldr	r1, [r7, #20]
 80040d0:	430b      	orrs	r3, r1
 80040d2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	685b      	ldr	r3, [r3, #4]
 80040da:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	68da      	ldr	r2, [r3, #12]
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	430a      	orrs	r2, r1
 80040e8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	699b      	ldr	r3, [r3, #24]
 80040ee:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	6a1b      	ldr	r3, [r3, #32]
 80040f4:	697a      	ldr	r2, [r7, #20]
 80040f6:	4313      	orrs	r3, r2
 80040f8:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	689b      	ldr	r3, [r3, #8]
 8004100:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	697a      	ldr	r2, [r7, #20]
 800410a:	430a      	orrs	r2, r1
 800410c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	4a94      	ldr	r2, [pc, #592]	; (8004364 <UART_SetConfig+0x2c8>)
 8004114:	4293      	cmp	r3, r2
 8004116:	d120      	bne.n	800415a <UART_SetConfig+0xbe>
 8004118:	4b93      	ldr	r3, [pc, #588]	; (8004368 <UART_SetConfig+0x2cc>)
 800411a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800411e:	f003 0303 	and.w	r3, r3, #3
 8004122:	2b03      	cmp	r3, #3
 8004124:	d816      	bhi.n	8004154 <UART_SetConfig+0xb8>
 8004126:	a201      	add	r2, pc, #4	; (adr r2, 800412c <UART_SetConfig+0x90>)
 8004128:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800412c:	0800413d 	.word	0x0800413d
 8004130:	08004149 	.word	0x08004149
 8004134:	08004143 	.word	0x08004143
 8004138:	0800414f 	.word	0x0800414f
 800413c:	2301      	movs	r3, #1
 800413e:	77fb      	strb	r3, [r7, #31]
 8004140:	e150      	b.n	80043e4 <UART_SetConfig+0x348>
 8004142:	2302      	movs	r3, #2
 8004144:	77fb      	strb	r3, [r7, #31]
 8004146:	e14d      	b.n	80043e4 <UART_SetConfig+0x348>
 8004148:	2304      	movs	r3, #4
 800414a:	77fb      	strb	r3, [r7, #31]
 800414c:	e14a      	b.n	80043e4 <UART_SetConfig+0x348>
 800414e:	2308      	movs	r3, #8
 8004150:	77fb      	strb	r3, [r7, #31]
 8004152:	e147      	b.n	80043e4 <UART_SetConfig+0x348>
 8004154:	2310      	movs	r3, #16
 8004156:	77fb      	strb	r3, [r7, #31]
 8004158:	e144      	b.n	80043e4 <UART_SetConfig+0x348>
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	4a83      	ldr	r2, [pc, #524]	; (800436c <UART_SetConfig+0x2d0>)
 8004160:	4293      	cmp	r3, r2
 8004162:	d132      	bne.n	80041ca <UART_SetConfig+0x12e>
 8004164:	4b80      	ldr	r3, [pc, #512]	; (8004368 <UART_SetConfig+0x2cc>)
 8004166:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800416a:	f003 030c 	and.w	r3, r3, #12
 800416e:	2b0c      	cmp	r3, #12
 8004170:	d828      	bhi.n	80041c4 <UART_SetConfig+0x128>
 8004172:	a201      	add	r2, pc, #4	; (adr r2, 8004178 <UART_SetConfig+0xdc>)
 8004174:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004178:	080041ad 	.word	0x080041ad
 800417c:	080041c5 	.word	0x080041c5
 8004180:	080041c5 	.word	0x080041c5
 8004184:	080041c5 	.word	0x080041c5
 8004188:	080041b9 	.word	0x080041b9
 800418c:	080041c5 	.word	0x080041c5
 8004190:	080041c5 	.word	0x080041c5
 8004194:	080041c5 	.word	0x080041c5
 8004198:	080041b3 	.word	0x080041b3
 800419c:	080041c5 	.word	0x080041c5
 80041a0:	080041c5 	.word	0x080041c5
 80041a4:	080041c5 	.word	0x080041c5
 80041a8:	080041bf 	.word	0x080041bf
 80041ac:	2300      	movs	r3, #0
 80041ae:	77fb      	strb	r3, [r7, #31]
 80041b0:	e118      	b.n	80043e4 <UART_SetConfig+0x348>
 80041b2:	2302      	movs	r3, #2
 80041b4:	77fb      	strb	r3, [r7, #31]
 80041b6:	e115      	b.n	80043e4 <UART_SetConfig+0x348>
 80041b8:	2304      	movs	r3, #4
 80041ba:	77fb      	strb	r3, [r7, #31]
 80041bc:	e112      	b.n	80043e4 <UART_SetConfig+0x348>
 80041be:	2308      	movs	r3, #8
 80041c0:	77fb      	strb	r3, [r7, #31]
 80041c2:	e10f      	b.n	80043e4 <UART_SetConfig+0x348>
 80041c4:	2310      	movs	r3, #16
 80041c6:	77fb      	strb	r3, [r7, #31]
 80041c8:	e10c      	b.n	80043e4 <UART_SetConfig+0x348>
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	4a68      	ldr	r2, [pc, #416]	; (8004370 <UART_SetConfig+0x2d4>)
 80041d0:	4293      	cmp	r3, r2
 80041d2:	d120      	bne.n	8004216 <UART_SetConfig+0x17a>
 80041d4:	4b64      	ldr	r3, [pc, #400]	; (8004368 <UART_SetConfig+0x2cc>)
 80041d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041da:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80041de:	2b30      	cmp	r3, #48	; 0x30
 80041e0:	d013      	beq.n	800420a <UART_SetConfig+0x16e>
 80041e2:	2b30      	cmp	r3, #48	; 0x30
 80041e4:	d814      	bhi.n	8004210 <UART_SetConfig+0x174>
 80041e6:	2b20      	cmp	r3, #32
 80041e8:	d009      	beq.n	80041fe <UART_SetConfig+0x162>
 80041ea:	2b20      	cmp	r3, #32
 80041ec:	d810      	bhi.n	8004210 <UART_SetConfig+0x174>
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d002      	beq.n	80041f8 <UART_SetConfig+0x15c>
 80041f2:	2b10      	cmp	r3, #16
 80041f4:	d006      	beq.n	8004204 <UART_SetConfig+0x168>
 80041f6:	e00b      	b.n	8004210 <UART_SetConfig+0x174>
 80041f8:	2300      	movs	r3, #0
 80041fa:	77fb      	strb	r3, [r7, #31]
 80041fc:	e0f2      	b.n	80043e4 <UART_SetConfig+0x348>
 80041fe:	2302      	movs	r3, #2
 8004200:	77fb      	strb	r3, [r7, #31]
 8004202:	e0ef      	b.n	80043e4 <UART_SetConfig+0x348>
 8004204:	2304      	movs	r3, #4
 8004206:	77fb      	strb	r3, [r7, #31]
 8004208:	e0ec      	b.n	80043e4 <UART_SetConfig+0x348>
 800420a:	2308      	movs	r3, #8
 800420c:	77fb      	strb	r3, [r7, #31]
 800420e:	e0e9      	b.n	80043e4 <UART_SetConfig+0x348>
 8004210:	2310      	movs	r3, #16
 8004212:	77fb      	strb	r3, [r7, #31]
 8004214:	e0e6      	b.n	80043e4 <UART_SetConfig+0x348>
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	4a56      	ldr	r2, [pc, #344]	; (8004374 <UART_SetConfig+0x2d8>)
 800421c:	4293      	cmp	r3, r2
 800421e:	d120      	bne.n	8004262 <UART_SetConfig+0x1c6>
 8004220:	4b51      	ldr	r3, [pc, #324]	; (8004368 <UART_SetConfig+0x2cc>)
 8004222:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004226:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800422a:	2bc0      	cmp	r3, #192	; 0xc0
 800422c:	d013      	beq.n	8004256 <UART_SetConfig+0x1ba>
 800422e:	2bc0      	cmp	r3, #192	; 0xc0
 8004230:	d814      	bhi.n	800425c <UART_SetConfig+0x1c0>
 8004232:	2b80      	cmp	r3, #128	; 0x80
 8004234:	d009      	beq.n	800424a <UART_SetConfig+0x1ae>
 8004236:	2b80      	cmp	r3, #128	; 0x80
 8004238:	d810      	bhi.n	800425c <UART_SetConfig+0x1c0>
 800423a:	2b00      	cmp	r3, #0
 800423c:	d002      	beq.n	8004244 <UART_SetConfig+0x1a8>
 800423e:	2b40      	cmp	r3, #64	; 0x40
 8004240:	d006      	beq.n	8004250 <UART_SetConfig+0x1b4>
 8004242:	e00b      	b.n	800425c <UART_SetConfig+0x1c0>
 8004244:	2300      	movs	r3, #0
 8004246:	77fb      	strb	r3, [r7, #31]
 8004248:	e0cc      	b.n	80043e4 <UART_SetConfig+0x348>
 800424a:	2302      	movs	r3, #2
 800424c:	77fb      	strb	r3, [r7, #31]
 800424e:	e0c9      	b.n	80043e4 <UART_SetConfig+0x348>
 8004250:	2304      	movs	r3, #4
 8004252:	77fb      	strb	r3, [r7, #31]
 8004254:	e0c6      	b.n	80043e4 <UART_SetConfig+0x348>
 8004256:	2308      	movs	r3, #8
 8004258:	77fb      	strb	r3, [r7, #31]
 800425a:	e0c3      	b.n	80043e4 <UART_SetConfig+0x348>
 800425c:	2310      	movs	r3, #16
 800425e:	77fb      	strb	r3, [r7, #31]
 8004260:	e0c0      	b.n	80043e4 <UART_SetConfig+0x348>
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	4a44      	ldr	r2, [pc, #272]	; (8004378 <UART_SetConfig+0x2dc>)
 8004268:	4293      	cmp	r3, r2
 800426a:	d125      	bne.n	80042b8 <UART_SetConfig+0x21c>
 800426c:	4b3e      	ldr	r3, [pc, #248]	; (8004368 <UART_SetConfig+0x2cc>)
 800426e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004272:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004276:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800427a:	d017      	beq.n	80042ac <UART_SetConfig+0x210>
 800427c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004280:	d817      	bhi.n	80042b2 <UART_SetConfig+0x216>
 8004282:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004286:	d00b      	beq.n	80042a0 <UART_SetConfig+0x204>
 8004288:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800428c:	d811      	bhi.n	80042b2 <UART_SetConfig+0x216>
 800428e:	2b00      	cmp	r3, #0
 8004290:	d003      	beq.n	800429a <UART_SetConfig+0x1fe>
 8004292:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004296:	d006      	beq.n	80042a6 <UART_SetConfig+0x20a>
 8004298:	e00b      	b.n	80042b2 <UART_SetConfig+0x216>
 800429a:	2300      	movs	r3, #0
 800429c:	77fb      	strb	r3, [r7, #31]
 800429e:	e0a1      	b.n	80043e4 <UART_SetConfig+0x348>
 80042a0:	2302      	movs	r3, #2
 80042a2:	77fb      	strb	r3, [r7, #31]
 80042a4:	e09e      	b.n	80043e4 <UART_SetConfig+0x348>
 80042a6:	2304      	movs	r3, #4
 80042a8:	77fb      	strb	r3, [r7, #31]
 80042aa:	e09b      	b.n	80043e4 <UART_SetConfig+0x348>
 80042ac:	2308      	movs	r3, #8
 80042ae:	77fb      	strb	r3, [r7, #31]
 80042b0:	e098      	b.n	80043e4 <UART_SetConfig+0x348>
 80042b2:	2310      	movs	r3, #16
 80042b4:	77fb      	strb	r3, [r7, #31]
 80042b6:	e095      	b.n	80043e4 <UART_SetConfig+0x348>
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	4a2f      	ldr	r2, [pc, #188]	; (800437c <UART_SetConfig+0x2e0>)
 80042be:	4293      	cmp	r3, r2
 80042c0:	d125      	bne.n	800430e <UART_SetConfig+0x272>
 80042c2:	4b29      	ldr	r3, [pc, #164]	; (8004368 <UART_SetConfig+0x2cc>)
 80042c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042c8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80042cc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80042d0:	d017      	beq.n	8004302 <UART_SetConfig+0x266>
 80042d2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80042d6:	d817      	bhi.n	8004308 <UART_SetConfig+0x26c>
 80042d8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80042dc:	d00b      	beq.n	80042f6 <UART_SetConfig+0x25a>
 80042de:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80042e2:	d811      	bhi.n	8004308 <UART_SetConfig+0x26c>
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d003      	beq.n	80042f0 <UART_SetConfig+0x254>
 80042e8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80042ec:	d006      	beq.n	80042fc <UART_SetConfig+0x260>
 80042ee:	e00b      	b.n	8004308 <UART_SetConfig+0x26c>
 80042f0:	2301      	movs	r3, #1
 80042f2:	77fb      	strb	r3, [r7, #31]
 80042f4:	e076      	b.n	80043e4 <UART_SetConfig+0x348>
 80042f6:	2302      	movs	r3, #2
 80042f8:	77fb      	strb	r3, [r7, #31]
 80042fa:	e073      	b.n	80043e4 <UART_SetConfig+0x348>
 80042fc:	2304      	movs	r3, #4
 80042fe:	77fb      	strb	r3, [r7, #31]
 8004300:	e070      	b.n	80043e4 <UART_SetConfig+0x348>
 8004302:	2308      	movs	r3, #8
 8004304:	77fb      	strb	r3, [r7, #31]
 8004306:	e06d      	b.n	80043e4 <UART_SetConfig+0x348>
 8004308:	2310      	movs	r3, #16
 800430a:	77fb      	strb	r3, [r7, #31]
 800430c:	e06a      	b.n	80043e4 <UART_SetConfig+0x348>
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	4a1b      	ldr	r2, [pc, #108]	; (8004380 <UART_SetConfig+0x2e4>)
 8004314:	4293      	cmp	r3, r2
 8004316:	d138      	bne.n	800438a <UART_SetConfig+0x2ee>
 8004318:	4b13      	ldr	r3, [pc, #76]	; (8004368 <UART_SetConfig+0x2cc>)
 800431a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800431e:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8004322:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004326:	d017      	beq.n	8004358 <UART_SetConfig+0x2bc>
 8004328:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800432c:	d82a      	bhi.n	8004384 <UART_SetConfig+0x2e8>
 800432e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004332:	d00b      	beq.n	800434c <UART_SetConfig+0x2b0>
 8004334:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004338:	d824      	bhi.n	8004384 <UART_SetConfig+0x2e8>
 800433a:	2b00      	cmp	r3, #0
 800433c:	d003      	beq.n	8004346 <UART_SetConfig+0x2aa>
 800433e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004342:	d006      	beq.n	8004352 <UART_SetConfig+0x2b6>
 8004344:	e01e      	b.n	8004384 <UART_SetConfig+0x2e8>
 8004346:	2300      	movs	r3, #0
 8004348:	77fb      	strb	r3, [r7, #31]
 800434a:	e04b      	b.n	80043e4 <UART_SetConfig+0x348>
 800434c:	2302      	movs	r3, #2
 800434e:	77fb      	strb	r3, [r7, #31]
 8004350:	e048      	b.n	80043e4 <UART_SetConfig+0x348>
 8004352:	2304      	movs	r3, #4
 8004354:	77fb      	strb	r3, [r7, #31]
 8004356:	e045      	b.n	80043e4 <UART_SetConfig+0x348>
 8004358:	2308      	movs	r3, #8
 800435a:	77fb      	strb	r3, [r7, #31]
 800435c:	e042      	b.n	80043e4 <UART_SetConfig+0x348>
 800435e:	bf00      	nop
 8004360:	efff69f3 	.word	0xefff69f3
 8004364:	40011000 	.word	0x40011000
 8004368:	40023800 	.word	0x40023800
 800436c:	40004400 	.word	0x40004400
 8004370:	40004800 	.word	0x40004800
 8004374:	40004c00 	.word	0x40004c00
 8004378:	40005000 	.word	0x40005000
 800437c:	40011400 	.word	0x40011400
 8004380:	40007800 	.word	0x40007800
 8004384:	2310      	movs	r3, #16
 8004386:	77fb      	strb	r3, [r7, #31]
 8004388:	e02c      	b.n	80043e4 <UART_SetConfig+0x348>
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	4a72      	ldr	r2, [pc, #456]	; (8004558 <UART_SetConfig+0x4bc>)
 8004390:	4293      	cmp	r3, r2
 8004392:	d125      	bne.n	80043e0 <UART_SetConfig+0x344>
 8004394:	4b71      	ldr	r3, [pc, #452]	; (800455c <UART_SetConfig+0x4c0>)
 8004396:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800439a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800439e:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80043a2:	d017      	beq.n	80043d4 <UART_SetConfig+0x338>
 80043a4:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80043a8:	d817      	bhi.n	80043da <UART_SetConfig+0x33e>
 80043aa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80043ae:	d00b      	beq.n	80043c8 <UART_SetConfig+0x32c>
 80043b0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80043b4:	d811      	bhi.n	80043da <UART_SetConfig+0x33e>
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d003      	beq.n	80043c2 <UART_SetConfig+0x326>
 80043ba:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80043be:	d006      	beq.n	80043ce <UART_SetConfig+0x332>
 80043c0:	e00b      	b.n	80043da <UART_SetConfig+0x33e>
 80043c2:	2300      	movs	r3, #0
 80043c4:	77fb      	strb	r3, [r7, #31]
 80043c6:	e00d      	b.n	80043e4 <UART_SetConfig+0x348>
 80043c8:	2302      	movs	r3, #2
 80043ca:	77fb      	strb	r3, [r7, #31]
 80043cc:	e00a      	b.n	80043e4 <UART_SetConfig+0x348>
 80043ce:	2304      	movs	r3, #4
 80043d0:	77fb      	strb	r3, [r7, #31]
 80043d2:	e007      	b.n	80043e4 <UART_SetConfig+0x348>
 80043d4:	2308      	movs	r3, #8
 80043d6:	77fb      	strb	r3, [r7, #31]
 80043d8:	e004      	b.n	80043e4 <UART_SetConfig+0x348>
 80043da:	2310      	movs	r3, #16
 80043dc:	77fb      	strb	r3, [r7, #31]
 80043de:	e001      	b.n	80043e4 <UART_SetConfig+0x348>
 80043e0:	2310      	movs	r3, #16
 80043e2:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	69db      	ldr	r3, [r3, #28]
 80043e8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80043ec:	d15b      	bne.n	80044a6 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 80043ee:	7ffb      	ldrb	r3, [r7, #31]
 80043f0:	2b08      	cmp	r3, #8
 80043f2:	d828      	bhi.n	8004446 <UART_SetConfig+0x3aa>
 80043f4:	a201      	add	r2, pc, #4	; (adr r2, 80043fc <UART_SetConfig+0x360>)
 80043f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043fa:	bf00      	nop
 80043fc:	08004421 	.word	0x08004421
 8004400:	08004429 	.word	0x08004429
 8004404:	08004431 	.word	0x08004431
 8004408:	08004447 	.word	0x08004447
 800440c:	08004437 	.word	0x08004437
 8004410:	08004447 	.word	0x08004447
 8004414:	08004447 	.word	0x08004447
 8004418:	08004447 	.word	0x08004447
 800441c:	0800443f 	.word	0x0800443f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004420:	f7fe fc1c 	bl	8002c5c <HAL_RCC_GetPCLK1Freq>
 8004424:	61b8      	str	r0, [r7, #24]
        break;
 8004426:	e013      	b.n	8004450 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004428:	f7fe fc2c 	bl	8002c84 <HAL_RCC_GetPCLK2Freq>
 800442c:	61b8      	str	r0, [r7, #24]
        break;
 800442e:	e00f      	b.n	8004450 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004430:	4b4b      	ldr	r3, [pc, #300]	; (8004560 <UART_SetConfig+0x4c4>)
 8004432:	61bb      	str	r3, [r7, #24]
        break;
 8004434:	e00c      	b.n	8004450 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004436:	f7fe faff 	bl	8002a38 <HAL_RCC_GetSysClockFreq>
 800443a:	61b8      	str	r0, [r7, #24]
        break;
 800443c:	e008      	b.n	8004450 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800443e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004442:	61bb      	str	r3, [r7, #24]
        break;
 8004444:	e004      	b.n	8004450 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8004446:	2300      	movs	r3, #0
 8004448:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800444a:	2301      	movs	r3, #1
 800444c:	77bb      	strb	r3, [r7, #30]
        break;
 800444e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004450:	69bb      	ldr	r3, [r7, #24]
 8004452:	2b00      	cmp	r3, #0
 8004454:	d074      	beq.n	8004540 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004456:	69bb      	ldr	r3, [r7, #24]
 8004458:	005a      	lsls	r2, r3, #1
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	685b      	ldr	r3, [r3, #4]
 800445e:	085b      	lsrs	r3, r3, #1
 8004460:	441a      	add	r2, r3
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	685b      	ldr	r3, [r3, #4]
 8004466:	fbb2 f3f3 	udiv	r3, r2, r3
 800446a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800446c:	693b      	ldr	r3, [r7, #16]
 800446e:	2b0f      	cmp	r3, #15
 8004470:	d916      	bls.n	80044a0 <UART_SetConfig+0x404>
 8004472:	693b      	ldr	r3, [r7, #16]
 8004474:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004478:	d212      	bcs.n	80044a0 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800447a:	693b      	ldr	r3, [r7, #16]
 800447c:	b29b      	uxth	r3, r3
 800447e:	f023 030f 	bic.w	r3, r3, #15
 8004482:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004484:	693b      	ldr	r3, [r7, #16]
 8004486:	085b      	lsrs	r3, r3, #1
 8004488:	b29b      	uxth	r3, r3
 800448a:	f003 0307 	and.w	r3, r3, #7
 800448e:	b29a      	uxth	r2, r3
 8004490:	89fb      	ldrh	r3, [r7, #14]
 8004492:	4313      	orrs	r3, r2
 8004494:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	89fa      	ldrh	r2, [r7, #14]
 800449c:	60da      	str	r2, [r3, #12]
 800449e:	e04f      	b.n	8004540 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80044a0:	2301      	movs	r3, #1
 80044a2:	77bb      	strb	r3, [r7, #30]
 80044a4:	e04c      	b.n	8004540 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 80044a6:	7ffb      	ldrb	r3, [r7, #31]
 80044a8:	2b08      	cmp	r3, #8
 80044aa:	d828      	bhi.n	80044fe <UART_SetConfig+0x462>
 80044ac:	a201      	add	r2, pc, #4	; (adr r2, 80044b4 <UART_SetConfig+0x418>)
 80044ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044b2:	bf00      	nop
 80044b4:	080044d9 	.word	0x080044d9
 80044b8:	080044e1 	.word	0x080044e1
 80044bc:	080044e9 	.word	0x080044e9
 80044c0:	080044ff 	.word	0x080044ff
 80044c4:	080044ef 	.word	0x080044ef
 80044c8:	080044ff 	.word	0x080044ff
 80044cc:	080044ff 	.word	0x080044ff
 80044d0:	080044ff 	.word	0x080044ff
 80044d4:	080044f7 	.word	0x080044f7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80044d8:	f7fe fbc0 	bl	8002c5c <HAL_RCC_GetPCLK1Freq>
 80044dc:	61b8      	str	r0, [r7, #24]
        break;
 80044de:	e013      	b.n	8004508 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80044e0:	f7fe fbd0 	bl	8002c84 <HAL_RCC_GetPCLK2Freq>
 80044e4:	61b8      	str	r0, [r7, #24]
        break;
 80044e6:	e00f      	b.n	8004508 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80044e8:	4b1d      	ldr	r3, [pc, #116]	; (8004560 <UART_SetConfig+0x4c4>)
 80044ea:	61bb      	str	r3, [r7, #24]
        break;
 80044ec:	e00c      	b.n	8004508 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80044ee:	f7fe faa3 	bl	8002a38 <HAL_RCC_GetSysClockFreq>
 80044f2:	61b8      	str	r0, [r7, #24]
        break;
 80044f4:	e008      	b.n	8004508 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80044f6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80044fa:	61bb      	str	r3, [r7, #24]
        break;
 80044fc:	e004      	b.n	8004508 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 80044fe:	2300      	movs	r3, #0
 8004500:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004502:	2301      	movs	r3, #1
 8004504:	77bb      	strb	r3, [r7, #30]
        break;
 8004506:	bf00      	nop
    }

    if (pclk != 0U)
 8004508:	69bb      	ldr	r3, [r7, #24]
 800450a:	2b00      	cmp	r3, #0
 800450c:	d018      	beq.n	8004540 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	685b      	ldr	r3, [r3, #4]
 8004512:	085a      	lsrs	r2, r3, #1
 8004514:	69bb      	ldr	r3, [r7, #24]
 8004516:	441a      	add	r2, r3
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	685b      	ldr	r3, [r3, #4]
 800451c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004520:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004522:	693b      	ldr	r3, [r7, #16]
 8004524:	2b0f      	cmp	r3, #15
 8004526:	d909      	bls.n	800453c <UART_SetConfig+0x4a0>
 8004528:	693b      	ldr	r3, [r7, #16]
 800452a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800452e:	d205      	bcs.n	800453c <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004530:	693b      	ldr	r3, [r7, #16]
 8004532:	b29a      	uxth	r2, r3
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	60da      	str	r2, [r3, #12]
 800453a:	e001      	b.n	8004540 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800453c:	2301      	movs	r3, #1
 800453e:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	2200      	movs	r2, #0
 8004544:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	2200      	movs	r2, #0
 800454a:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 800454c:	7fbb      	ldrb	r3, [r7, #30]
}
 800454e:	4618      	mov	r0, r3
 8004550:	3720      	adds	r7, #32
 8004552:	46bd      	mov	sp, r7
 8004554:	bd80      	pop	{r7, pc}
 8004556:	bf00      	nop
 8004558:	40007c00 	.word	0x40007c00
 800455c:	40023800 	.word	0x40023800
 8004560:	00f42400 	.word	0x00f42400

08004564 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004564:	b480      	push	{r7}
 8004566:	b083      	sub	sp, #12
 8004568:	af00      	add	r7, sp, #0
 800456a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004570:	f003 0301 	and.w	r3, r3, #1
 8004574:	2b00      	cmp	r3, #0
 8004576:	d00a      	beq.n	800458e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	685b      	ldr	r3, [r3, #4]
 800457e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	430a      	orrs	r2, r1
 800458c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004592:	f003 0302 	and.w	r3, r3, #2
 8004596:	2b00      	cmp	r3, #0
 8004598:	d00a      	beq.n	80045b0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	685b      	ldr	r3, [r3, #4]
 80045a0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	430a      	orrs	r2, r1
 80045ae:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045b4:	f003 0304 	and.w	r3, r3, #4
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d00a      	beq.n	80045d2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	685b      	ldr	r3, [r3, #4]
 80045c2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	430a      	orrs	r2, r1
 80045d0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045d6:	f003 0308 	and.w	r3, r3, #8
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d00a      	beq.n	80045f4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	685b      	ldr	r3, [r3, #4]
 80045e4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	430a      	orrs	r2, r1
 80045f2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045f8:	f003 0310 	and.w	r3, r3, #16
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d00a      	beq.n	8004616 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	689b      	ldr	r3, [r3, #8]
 8004606:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	430a      	orrs	r2, r1
 8004614:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800461a:	f003 0320 	and.w	r3, r3, #32
 800461e:	2b00      	cmp	r3, #0
 8004620:	d00a      	beq.n	8004638 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	689b      	ldr	r3, [r3, #8]
 8004628:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	430a      	orrs	r2, r1
 8004636:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800463c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004640:	2b00      	cmp	r3, #0
 8004642:	d01a      	beq.n	800467a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	685b      	ldr	r3, [r3, #4]
 800464a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	430a      	orrs	r2, r1
 8004658:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800465e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004662:	d10a      	bne.n	800467a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	685b      	ldr	r3, [r3, #4]
 800466a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	430a      	orrs	r2, r1
 8004678:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800467e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004682:	2b00      	cmp	r3, #0
 8004684:	d00a      	beq.n	800469c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	685b      	ldr	r3, [r3, #4]
 800468c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	430a      	orrs	r2, r1
 800469a:	605a      	str	r2, [r3, #4]
  }
}
 800469c:	bf00      	nop
 800469e:	370c      	adds	r7, #12
 80046a0:	46bd      	mov	sp, r7
 80046a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046a6:	4770      	bx	lr

080046a8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80046a8:	b580      	push	{r7, lr}
 80046aa:	b086      	sub	sp, #24
 80046ac:	af02      	add	r7, sp, #8
 80046ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	2200      	movs	r2, #0
 80046b4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80046b8:	f7fd f8ca 	bl	8001850 <HAL_GetTick>
 80046bc:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	f003 0308 	and.w	r3, r3, #8
 80046c8:	2b08      	cmp	r3, #8
 80046ca:	d10e      	bne.n	80046ea <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80046cc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80046d0:	9300      	str	r3, [sp, #0]
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	2200      	movs	r2, #0
 80046d6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80046da:	6878      	ldr	r0, [r7, #4]
 80046dc:	f000 f81b 	bl	8004716 <UART_WaitOnFlagUntilTimeout>
 80046e0:	4603      	mov	r3, r0
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d001      	beq.n	80046ea <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80046e6:	2303      	movs	r3, #3
 80046e8:	e011      	b.n	800470e <UART_CheckIdleState+0x66>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	2220      	movs	r2, #32
 80046ee:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	2220      	movs	r2, #32
 80046f4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	2200      	movs	r2, #0
 80046fc:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	2200      	movs	r2, #0
 8004702:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	2200      	movs	r2, #0
 8004708:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 800470c:	2300      	movs	r3, #0
}
 800470e:	4618      	mov	r0, r3
 8004710:	3710      	adds	r7, #16
 8004712:	46bd      	mov	sp, r7
 8004714:	bd80      	pop	{r7, pc}

08004716 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004716:	b580      	push	{r7, lr}
 8004718:	b09c      	sub	sp, #112	; 0x70
 800471a:	af00      	add	r7, sp, #0
 800471c:	60f8      	str	r0, [r7, #12]
 800471e:	60b9      	str	r1, [r7, #8]
 8004720:	603b      	str	r3, [r7, #0]
 8004722:	4613      	mov	r3, r2
 8004724:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004726:	e0a7      	b.n	8004878 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004728:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800472a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800472e:	f000 80a3 	beq.w	8004878 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004732:	f7fd f88d 	bl	8001850 <HAL_GetTick>
 8004736:	4602      	mov	r2, r0
 8004738:	683b      	ldr	r3, [r7, #0]
 800473a:	1ad3      	subs	r3, r2, r3
 800473c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800473e:	429a      	cmp	r2, r3
 8004740:	d302      	bcc.n	8004748 <UART_WaitOnFlagUntilTimeout+0x32>
 8004742:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004744:	2b00      	cmp	r3, #0
 8004746:	d13f      	bne.n	80047c8 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800474e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004750:	e853 3f00 	ldrex	r3, [r3]
 8004754:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8004756:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004758:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800475c:	667b      	str	r3, [r7, #100]	; 0x64
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	461a      	mov	r2, r3
 8004764:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004766:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004768:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800476a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800476c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800476e:	e841 2300 	strex	r3, r2, [r1]
 8004772:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8004774:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004776:	2b00      	cmp	r3, #0
 8004778:	d1e6      	bne.n	8004748 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	3308      	adds	r3, #8
 8004780:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004782:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004784:	e853 3f00 	ldrex	r3, [r3]
 8004788:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800478a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800478c:	f023 0301 	bic.w	r3, r3, #1
 8004790:	663b      	str	r3, [r7, #96]	; 0x60
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	3308      	adds	r3, #8
 8004798:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800479a:	64ba      	str	r2, [r7, #72]	; 0x48
 800479c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800479e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80047a0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80047a2:	e841 2300 	strex	r3, r2, [r1]
 80047a6:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80047a8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d1e5      	bne.n	800477a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	2220      	movs	r2, #32
 80047b2:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	2220      	movs	r2, #32
 80047b8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	2200      	movs	r2, #0
 80047c0:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 80047c4:	2303      	movs	r3, #3
 80047c6:	e068      	b.n	800489a <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	f003 0304 	and.w	r3, r3, #4
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d050      	beq.n	8004878 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	69db      	ldr	r3, [r3, #28]
 80047dc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80047e0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80047e4:	d148      	bne.n	8004878 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80047ee:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047f8:	e853 3f00 	ldrex	r3, [r3]
 80047fc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80047fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004800:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004804:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	461a      	mov	r2, r3
 800480c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800480e:	637b      	str	r3, [r7, #52]	; 0x34
 8004810:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004812:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004814:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004816:	e841 2300 	strex	r3, r2, [r1]
 800481a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800481c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800481e:	2b00      	cmp	r3, #0
 8004820:	d1e6      	bne.n	80047f0 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	3308      	adds	r3, #8
 8004828:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800482a:	697b      	ldr	r3, [r7, #20]
 800482c:	e853 3f00 	ldrex	r3, [r3]
 8004830:	613b      	str	r3, [r7, #16]
   return(result);
 8004832:	693b      	ldr	r3, [r7, #16]
 8004834:	f023 0301 	bic.w	r3, r3, #1
 8004838:	66bb      	str	r3, [r7, #104]	; 0x68
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	3308      	adds	r3, #8
 8004840:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004842:	623a      	str	r2, [r7, #32]
 8004844:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004846:	69f9      	ldr	r1, [r7, #28]
 8004848:	6a3a      	ldr	r2, [r7, #32]
 800484a:	e841 2300 	strex	r3, r2, [r1]
 800484e:	61bb      	str	r3, [r7, #24]
   return(result);
 8004850:	69bb      	ldr	r3, [r7, #24]
 8004852:	2b00      	cmp	r3, #0
 8004854:	d1e5      	bne.n	8004822 <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	2220      	movs	r2, #32
 800485a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	2220      	movs	r2, #32
 8004860:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	2220      	movs	r2, #32
 8004868:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	2200      	movs	r2, #0
 8004870:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8004874:	2303      	movs	r3, #3
 8004876:	e010      	b.n	800489a <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	69da      	ldr	r2, [r3, #28]
 800487e:	68bb      	ldr	r3, [r7, #8]
 8004880:	4013      	ands	r3, r2
 8004882:	68ba      	ldr	r2, [r7, #8]
 8004884:	429a      	cmp	r2, r3
 8004886:	bf0c      	ite	eq
 8004888:	2301      	moveq	r3, #1
 800488a:	2300      	movne	r3, #0
 800488c:	b2db      	uxtb	r3, r3
 800488e:	461a      	mov	r2, r3
 8004890:	79fb      	ldrb	r3, [r7, #7]
 8004892:	429a      	cmp	r2, r3
 8004894:	f43f af48 	beq.w	8004728 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004898:	2300      	movs	r3, #0
}
 800489a:	4618      	mov	r0, r3
 800489c:	3770      	adds	r7, #112	; 0x70
 800489e:	46bd      	mov	sp, r7
 80048a0:	bd80      	pop	{r7, pc}
	...

080048a4 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80048a4:	b480      	push	{r7}
 80048a6:	b097      	sub	sp, #92	; 0x5c
 80048a8:	af00      	add	r7, sp, #0
 80048aa:	60f8      	str	r0, [r7, #12]
 80048ac:	60b9      	str	r1, [r7, #8]
 80048ae:	4613      	mov	r3, r2
 80048b0:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	68ba      	ldr	r2, [r7, #8]
 80048b6:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	88fa      	ldrh	r2, [r7, #6]
 80048bc:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	88fa      	ldrh	r2, [r7, #6]
 80048c4:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	2200      	movs	r2, #0
 80048cc:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	689b      	ldr	r3, [r3, #8]
 80048d2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80048d6:	d10e      	bne.n	80048f6 <UART_Start_Receive_IT+0x52>
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	691b      	ldr	r3, [r3, #16]
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d105      	bne.n	80048ec <UART_Start_Receive_IT+0x48>
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	f240 12ff 	movw	r2, #511	; 0x1ff
 80048e6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80048ea:	e02d      	b.n	8004948 <UART_Start_Receive_IT+0xa4>
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	22ff      	movs	r2, #255	; 0xff
 80048f0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80048f4:	e028      	b.n	8004948 <UART_Start_Receive_IT+0xa4>
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	689b      	ldr	r3, [r3, #8]
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d10d      	bne.n	800491a <UART_Start_Receive_IT+0x76>
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	691b      	ldr	r3, [r3, #16]
 8004902:	2b00      	cmp	r3, #0
 8004904:	d104      	bne.n	8004910 <UART_Start_Receive_IT+0x6c>
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	22ff      	movs	r2, #255	; 0xff
 800490a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800490e:	e01b      	b.n	8004948 <UART_Start_Receive_IT+0xa4>
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	227f      	movs	r2, #127	; 0x7f
 8004914:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004918:	e016      	b.n	8004948 <UART_Start_Receive_IT+0xa4>
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	689b      	ldr	r3, [r3, #8]
 800491e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004922:	d10d      	bne.n	8004940 <UART_Start_Receive_IT+0x9c>
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	691b      	ldr	r3, [r3, #16]
 8004928:	2b00      	cmp	r3, #0
 800492a:	d104      	bne.n	8004936 <UART_Start_Receive_IT+0x92>
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	227f      	movs	r2, #127	; 0x7f
 8004930:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004934:	e008      	b.n	8004948 <UART_Start_Receive_IT+0xa4>
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	223f      	movs	r2, #63	; 0x3f
 800493a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800493e:	e003      	b.n	8004948 <UART_Start_Receive_IT+0xa4>
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	2200      	movs	r2, #0
 8004944:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	2200      	movs	r2, #0
 800494c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	2222      	movs	r2, #34	; 0x22
 8004954:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	3308      	adds	r3, #8
 800495e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004960:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004962:	e853 3f00 	ldrex	r3, [r3]
 8004966:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004968:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800496a:	f043 0301 	orr.w	r3, r3, #1
 800496e:	657b      	str	r3, [r7, #84]	; 0x54
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	3308      	adds	r3, #8
 8004976:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8004978:	64ba      	str	r2, [r7, #72]	; 0x48
 800497a:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800497c:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800497e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004980:	e841 2300 	strex	r3, r2, [r1]
 8004984:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004986:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004988:	2b00      	cmp	r3, #0
 800498a:	d1e5      	bne.n	8004958 <UART_Start_Receive_IT+0xb4>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	689b      	ldr	r3, [r3, #8]
 8004990:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004994:	d107      	bne.n	80049a6 <UART_Start_Receive_IT+0x102>
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	691b      	ldr	r3, [r3, #16]
 800499a:	2b00      	cmp	r3, #0
 800499c:	d103      	bne.n	80049a6 <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	4a21      	ldr	r2, [pc, #132]	; (8004a28 <UART_Start_Receive_IT+0x184>)
 80049a2:	669a      	str	r2, [r3, #104]	; 0x68
 80049a4:	e002      	b.n	80049ac <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	4a20      	ldr	r2, [pc, #128]	; (8004a2c <UART_Start_Receive_IT+0x188>)
 80049aa:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	691b      	ldr	r3, [r3, #16]
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d019      	beq.n	80049e8 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049bc:	e853 3f00 	ldrex	r3, [r3]
 80049c0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80049c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049c4:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 80049c8:	64fb      	str	r3, [r7, #76]	; 0x4c
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	461a      	mov	r2, r3
 80049d0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80049d2:	637b      	str	r3, [r7, #52]	; 0x34
 80049d4:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049d6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80049d8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80049da:	e841 2300 	strex	r3, r2, [r1]
 80049de:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80049e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d1e6      	bne.n	80049b4 <UART_Start_Receive_IT+0x110>
 80049e6:	e018      	b.n	8004a1a <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049ee:	697b      	ldr	r3, [r7, #20]
 80049f0:	e853 3f00 	ldrex	r3, [r3]
 80049f4:	613b      	str	r3, [r7, #16]
   return(result);
 80049f6:	693b      	ldr	r3, [r7, #16]
 80049f8:	f043 0320 	orr.w	r3, r3, #32
 80049fc:	653b      	str	r3, [r7, #80]	; 0x50
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	461a      	mov	r2, r3
 8004a04:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004a06:	623b      	str	r3, [r7, #32]
 8004a08:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a0a:	69f9      	ldr	r1, [r7, #28]
 8004a0c:	6a3a      	ldr	r2, [r7, #32]
 8004a0e:	e841 2300 	strex	r3, r2, [r1]
 8004a12:	61bb      	str	r3, [r7, #24]
   return(result);
 8004a14:	69bb      	ldr	r3, [r7, #24]
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d1e6      	bne.n	80049e8 <UART_Start_Receive_IT+0x144>
  }
  return HAL_OK;
 8004a1a:	2300      	movs	r3, #0
}
 8004a1c:	4618      	mov	r0, r3
 8004a1e:	375c      	adds	r7, #92	; 0x5c
 8004a20:	46bd      	mov	sp, r7
 8004a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a26:	4770      	bx	lr
 8004a28:	08004e55 	.word	0x08004e55
 8004a2c:	08004cef 	.word	0x08004cef

08004a30 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004a30:	b480      	push	{r7}
 8004a32:	b095      	sub	sp, #84	; 0x54
 8004a34:	af00      	add	r7, sp, #0
 8004a36:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a40:	e853 3f00 	ldrex	r3, [r3]
 8004a44:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004a46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a48:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004a4c:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	461a      	mov	r2, r3
 8004a54:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004a56:	643b      	str	r3, [r7, #64]	; 0x40
 8004a58:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a5a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004a5c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004a5e:	e841 2300 	strex	r3, r2, [r1]
 8004a62:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004a64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d1e6      	bne.n	8004a38 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	3308      	adds	r3, #8
 8004a70:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a72:	6a3b      	ldr	r3, [r7, #32]
 8004a74:	e853 3f00 	ldrex	r3, [r3]
 8004a78:	61fb      	str	r3, [r7, #28]
   return(result);
 8004a7a:	69fb      	ldr	r3, [r7, #28]
 8004a7c:	f023 0301 	bic.w	r3, r3, #1
 8004a80:	64bb      	str	r3, [r7, #72]	; 0x48
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	3308      	adds	r3, #8
 8004a88:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004a8a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004a8c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a8e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004a90:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004a92:	e841 2300 	strex	r3, r2, [r1]
 8004a96:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004a98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d1e5      	bne.n	8004a6a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004aa2:	2b01      	cmp	r3, #1
 8004aa4:	d118      	bne.n	8004ad8 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	e853 3f00 	ldrex	r3, [r3]
 8004ab2:	60bb      	str	r3, [r7, #8]
   return(result);
 8004ab4:	68bb      	ldr	r3, [r7, #8]
 8004ab6:	f023 0310 	bic.w	r3, r3, #16
 8004aba:	647b      	str	r3, [r7, #68]	; 0x44
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	461a      	mov	r2, r3
 8004ac2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004ac4:	61bb      	str	r3, [r7, #24]
 8004ac6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ac8:	6979      	ldr	r1, [r7, #20]
 8004aca:	69ba      	ldr	r2, [r7, #24]
 8004acc:	e841 2300 	strex	r3, r2, [r1]
 8004ad0:	613b      	str	r3, [r7, #16]
   return(result);
 8004ad2:	693b      	ldr	r3, [r7, #16]
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d1e6      	bne.n	8004aa6 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	2220      	movs	r2, #32
 8004adc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	2200      	movs	r2, #0
 8004ae4:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	2200      	movs	r2, #0
 8004aea:	669a      	str	r2, [r3, #104]	; 0x68
}
 8004aec:	bf00      	nop
 8004aee:	3754      	adds	r7, #84	; 0x54
 8004af0:	46bd      	mov	sp, r7
 8004af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004af6:	4770      	bx	lr

08004af8 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004af8:	b580      	push	{r7, lr}
 8004afa:	b084      	sub	sp, #16
 8004afc:	af00      	add	r7, sp, #0
 8004afe:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b04:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	2200      	movs	r2, #0
 8004b0a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	2200      	movs	r2, #0
 8004b12:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004b16:	68f8      	ldr	r0, [r7, #12]
 8004b18:	f7ff faaa 	bl	8004070 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004b1c:	bf00      	nop
 8004b1e:	3710      	adds	r7, #16
 8004b20:	46bd      	mov	sp, r7
 8004b22:	bd80      	pop	{r7, pc}

08004b24 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 8004b24:	b480      	push	{r7}
 8004b26:	b08f      	sub	sp, #60	; 0x3c
 8004b28:	af00      	add	r7, sp, #0
 8004b2a:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004b30:	2b21      	cmp	r3, #33	; 0x21
 8004b32:	d14c      	bne.n	8004bce <UART_TxISR_8BIT+0xaa>
  {
    if (huart->TxXferCount == 0U)
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004b3a:	b29b      	uxth	r3, r3
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d132      	bne.n	8004ba6 <UART_TxISR_8BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b46:	6a3b      	ldr	r3, [r7, #32]
 8004b48:	e853 3f00 	ldrex	r3, [r3]
 8004b4c:	61fb      	str	r3, [r7, #28]
   return(result);
 8004b4e:	69fb      	ldr	r3, [r7, #28]
 8004b50:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004b54:	637b      	str	r3, [r7, #52]	; 0x34
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	461a      	mov	r2, r3
 8004b5c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b5e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004b60:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b62:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004b64:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004b66:	e841 2300 	strex	r3, r2, [r1]
 8004b6a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004b6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d1e6      	bne.n	8004b40 <UART_TxISR_8BIT+0x1c>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	e853 3f00 	ldrex	r3, [r3]
 8004b7e:	60bb      	str	r3, [r7, #8]
   return(result);
 8004b80:	68bb      	ldr	r3, [r7, #8]
 8004b82:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004b86:	633b      	str	r3, [r7, #48]	; 0x30
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	461a      	mov	r2, r3
 8004b8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b90:	61bb      	str	r3, [r7, #24]
 8004b92:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b94:	6979      	ldr	r1, [r7, #20]
 8004b96:	69ba      	ldr	r2, [r7, #24]
 8004b98:	e841 2300 	strex	r3, r2, [r1]
 8004b9c:	613b      	str	r3, [r7, #16]
   return(result);
 8004b9e:	693b      	ldr	r3, [r7, #16]
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d1e6      	bne.n	8004b72 <UART_TxISR_8BIT+0x4e>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 8004ba4:	e013      	b.n	8004bce <UART_TxISR_8BIT+0xaa>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004baa:	781a      	ldrb	r2, [r3, #0]
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004bb6:	1c5a      	adds	r2, r3, #1
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004bc2:	b29b      	uxth	r3, r3
 8004bc4:	3b01      	subs	r3, #1
 8004bc6:	b29a      	uxth	r2, r3
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 8004bce:	bf00      	nop
 8004bd0:	373c      	adds	r7, #60	; 0x3c
 8004bd2:	46bd      	mov	sp, r7
 8004bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bd8:	4770      	bx	lr

08004bda <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 8004bda:	b480      	push	{r7}
 8004bdc:	b091      	sub	sp, #68	; 0x44
 8004bde:	af00      	add	r7, sp, #0
 8004be0:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004be6:	2b21      	cmp	r3, #33	; 0x21
 8004be8:	d151      	bne.n	8004c8e <UART_TxISR_16BIT+0xb4>
  {
    if (huart->TxXferCount == 0U)
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004bf0:	b29b      	uxth	r3, r3
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d132      	bne.n	8004c5c <UART_TxISR_16BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bfe:	e853 3f00 	ldrex	r3, [r3]
 8004c02:	623b      	str	r3, [r7, #32]
   return(result);
 8004c04:	6a3b      	ldr	r3, [r7, #32]
 8004c06:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004c0a:	63bb      	str	r3, [r7, #56]	; 0x38
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	461a      	mov	r2, r3
 8004c12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c14:	633b      	str	r3, [r7, #48]	; 0x30
 8004c16:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c18:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004c1a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004c1c:	e841 2300 	strex	r3, r2, [r1]
 8004c20:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004c22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d1e6      	bne.n	8004bf6 <UART_TxISR_16BIT+0x1c>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c2e:	693b      	ldr	r3, [r7, #16]
 8004c30:	e853 3f00 	ldrex	r3, [r3]
 8004c34:	60fb      	str	r3, [r7, #12]
   return(result);
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004c3c:	637b      	str	r3, [r7, #52]	; 0x34
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	461a      	mov	r2, r3
 8004c44:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c46:	61fb      	str	r3, [r7, #28]
 8004c48:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c4a:	69b9      	ldr	r1, [r7, #24]
 8004c4c:	69fa      	ldr	r2, [r7, #28]
 8004c4e:	e841 2300 	strex	r3, r2, [r1]
 8004c52:	617b      	str	r3, [r7, #20]
   return(result);
 8004c54:	697b      	ldr	r3, [r7, #20]
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d1e6      	bne.n	8004c28 <UART_TxISR_16BIT+0x4e>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8004c5a:	e018      	b.n	8004c8e <UART_TxISR_16BIT+0xb4>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c60:	63fb      	str	r3, [r7, #60]	; 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8004c62:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004c64:	881b      	ldrh	r3, [r3, #0]
 8004c66:	461a      	mov	r2, r3
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004c70:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c76:	1c9a      	adds	r2, r3, #2
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004c82:	b29b      	uxth	r3, r3
 8004c84:	3b01      	subs	r3, #1
 8004c86:	b29a      	uxth	r2, r3
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 8004c8e:	bf00      	nop
 8004c90:	3744      	adds	r7, #68	; 0x44
 8004c92:	46bd      	mov	sp, r7
 8004c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c98:	4770      	bx	lr

08004c9a <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004c9a:	b580      	push	{r7, lr}
 8004c9c:	b088      	sub	sp, #32
 8004c9e:	af00      	add	r7, sp, #0
 8004ca0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	e853 3f00 	ldrex	r3, [r3]
 8004cae:	60bb      	str	r3, [r7, #8]
   return(result);
 8004cb0:	68bb      	ldr	r3, [r7, #8]
 8004cb2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004cb6:	61fb      	str	r3, [r7, #28]
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	461a      	mov	r2, r3
 8004cbe:	69fb      	ldr	r3, [r7, #28]
 8004cc0:	61bb      	str	r3, [r7, #24]
 8004cc2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cc4:	6979      	ldr	r1, [r7, #20]
 8004cc6:	69ba      	ldr	r2, [r7, #24]
 8004cc8:	e841 2300 	strex	r3, r2, [r1]
 8004ccc:	613b      	str	r3, [r7, #16]
   return(result);
 8004cce:	693b      	ldr	r3, [r7, #16]
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d1e6      	bne.n	8004ca2 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	2220      	movs	r2, #32
 8004cd8:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	2200      	movs	r2, #0
 8004cde:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004ce0:	6878      	ldr	r0, [r7, #4]
 8004ce2:	f7fc f90d 	bl	8000f00 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004ce6:	bf00      	nop
 8004ce8:	3720      	adds	r7, #32
 8004cea:	46bd      	mov	sp, r7
 8004cec:	bd80      	pop	{r7, pc}

08004cee <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8004cee:	b580      	push	{r7, lr}
 8004cf0:	b096      	sub	sp, #88	; 0x58
 8004cf2:	af00      	add	r7, sp, #0
 8004cf4:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8004cfc:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004d06:	2b22      	cmp	r3, #34	; 0x22
 8004d08:	f040 8098 	bne.w	8004e3c <UART_RxISR_8BIT+0x14e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d12:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8004d16:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8004d1a:	b2d9      	uxtb	r1, r3
 8004d1c:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8004d20:	b2da      	uxtb	r2, r3
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d26:	400a      	ands	r2, r1
 8004d28:	b2d2      	uxtb	r2, r2
 8004d2a:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d30:	1c5a      	adds	r2, r3, #1
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004d3c:	b29b      	uxth	r3, r3
 8004d3e:	3b01      	subs	r3, #1
 8004d40:	b29a      	uxth	r2, r3
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004d4e:	b29b      	uxth	r3, r3
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d17b      	bne.n	8004e4c <UART_RxISR_8BIT+0x15e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d5c:	e853 3f00 	ldrex	r3, [r3]
 8004d60:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004d62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d64:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004d68:	653b      	str	r3, [r7, #80]	; 0x50
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	461a      	mov	r2, r3
 8004d70:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004d72:	647b      	str	r3, [r7, #68]	; 0x44
 8004d74:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d76:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004d78:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004d7a:	e841 2300 	strex	r3, r2, [r1]
 8004d7e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004d80:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d1e6      	bne.n	8004d54 <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	3308      	adds	r3, #8
 8004d8c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d90:	e853 3f00 	ldrex	r3, [r3]
 8004d94:	623b      	str	r3, [r7, #32]
   return(result);
 8004d96:	6a3b      	ldr	r3, [r7, #32]
 8004d98:	f023 0301 	bic.w	r3, r3, #1
 8004d9c:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	3308      	adds	r3, #8
 8004da4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004da6:	633a      	str	r2, [r7, #48]	; 0x30
 8004da8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004daa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004dac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004dae:	e841 2300 	strex	r3, r2, [r1]
 8004db2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004db4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d1e5      	bne.n	8004d86 <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	2220      	movs	r2, #32
 8004dbe:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	2200      	movs	r2, #0
 8004dc6:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	2200      	movs	r2, #0
 8004dcc:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004dd2:	2b01      	cmp	r3, #1
 8004dd4:	d12e      	bne.n	8004e34 <UART_RxISR_8BIT+0x146>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	2200      	movs	r2, #0
 8004dda:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004de2:	693b      	ldr	r3, [r7, #16]
 8004de4:	e853 3f00 	ldrex	r3, [r3]
 8004de8:	60fb      	str	r3, [r7, #12]
   return(result);
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	f023 0310 	bic.w	r3, r3, #16
 8004df0:	64bb      	str	r3, [r7, #72]	; 0x48
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	461a      	mov	r2, r3
 8004df8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004dfa:	61fb      	str	r3, [r7, #28]
 8004dfc:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004dfe:	69b9      	ldr	r1, [r7, #24]
 8004e00:	69fa      	ldr	r2, [r7, #28]
 8004e02:	e841 2300 	strex	r3, r2, [r1]
 8004e06:	617b      	str	r3, [r7, #20]
   return(result);
 8004e08:	697b      	ldr	r3, [r7, #20]
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d1e6      	bne.n	8004ddc <UART_RxISR_8BIT+0xee>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	69db      	ldr	r3, [r3, #28]
 8004e14:	f003 0310 	and.w	r3, r3, #16
 8004e18:	2b10      	cmp	r3, #16
 8004e1a:	d103      	bne.n	8004e24 <UART_RxISR_8BIT+0x136>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	2210      	movs	r2, #16
 8004e22:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8004e2a:	4619      	mov	r1, r3
 8004e2c:	6878      	ldr	r0, [r7, #4]
 8004e2e:	f7ff f929 	bl	8004084 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004e32:	e00b      	b.n	8004e4c <UART_RxISR_8BIT+0x15e>
        HAL_UART_RxCpltCallback(huart);
 8004e34:	6878      	ldr	r0, [r7, #4]
 8004e36:	f7fc f831 	bl	8000e9c <HAL_UART_RxCpltCallback>
}
 8004e3a:	e007      	b.n	8004e4c <UART_RxISR_8BIT+0x15e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	699a      	ldr	r2, [r3, #24]
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	f042 0208 	orr.w	r2, r2, #8
 8004e4a:	619a      	str	r2, [r3, #24]
}
 8004e4c:	bf00      	nop
 8004e4e:	3758      	adds	r7, #88	; 0x58
 8004e50:	46bd      	mov	sp, r7
 8004e52:	bd80      	pop	{r7, pc}

08004e54 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8004e54:	b580      	push	{r7, lr}
 8004e56:	b096      	sub	sp, #88	; 0x58
 8004e58:	af00      	add	r7, sp, #0
 8004e5a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8004e62:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004e6c:	2b22      	cmp	r3, #34	; 0x22
 8004e6e:	f040 8098 	bne.w	8004fa2 <UART_RxISR_16BIT+0x14e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e78:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e80:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 8004e82:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8004e86:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8004e8a:	4013      	ands	r3, r2
 8004e8c:	b29a      	uxth	r2, r3
 8004e8e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004e90:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e96:	1c9a      	adds	r2, r3, #2
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004ea2:	b29b      	uxth	r3, r3
 8004ea4:	3b01      	subs	r3, #1
 8004ea6:	b29a      	uxth	r2, r3
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004eb4:	b29b      	uxth	r3, r3
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d17b      	bne.n	8004fb2 <UART_RxISR_16BIT+0x15e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ec0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ec2:	e853 3f00 	ldrex	r3, [r3]
 8004ec6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004ec8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004eca:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004ece:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	461a      	mov	r2, r3
 8004ed6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004ed8:	643b      	str	r3, [r7, #64]	; 0x40
 8004eda:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004edc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004ede:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004ee0:	e841 2300 	strex	r3, r2, [r1]
 8004ee4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004ee6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d1e6      	bne.n	8004eba <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	3308      	adds	r3, #8
 8004ef2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ef4:	6a3b      	ldr	r3, [r7, #32]
 8004ef6:	e853 3f00 	ldrex	r3, [r3]
 8004efa:	61fb      	str	r3, [r7, #28]
   return(result);
 8004efc:	69fb      	ldr	r3, [r7, #28]
 8004efe:	f023 0301 	bic.w	r3, r3, #1
 8004f02:	64bb      	str	r3, [r7, #72]	; 0x48
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	3308      	adds	r3, #8
 8004f0a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004f0c:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004f0e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f10:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004f12:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004f14:	e841 2300 	strex	r3, r2, [r1]
 8004f18:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004f1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d1e5      	bne.n	8004eec <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	2220      	movs	r2, #32
 8004f24:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	2200      	movs	r2, #0
 8004f2c:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	2200      	movs	r2, #0
 8004f32:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004f38:	2b01      	cmp	r3, #1
 8004f3a:	d12e      	bne.n	8004f9a <UART_RxISR_16BIT+0x146>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	2200      	movs	r2, #0
 8004f40:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	e853 3f00 	ldrex	r3, [r3]
 8004f4e:	60bb      	str	r3, [r7, #8]
   return(result);
 8004f50:	68bb      	ldr	r3, [r7, #8]
 8004f52:	f023 0310 	bic.w	r3, r3, #16
 8004f56:	647b      	str	r3, [r7, #68]	; 0x44
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	461a      	mov	r2, r3
 8004f5e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004f60:	61bb      	str	r3, [r7, #24]
 8004f62:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f64:	6979      	ldr	r1, [r7, #20]
 8004f66:	69ba      	ldr	r2, [r7, #24]
 8004f68:	e841 2300 	strex	r3, r2, [r1]
 8004f6c:	613b      	str	r3, [r7, #16]
   return(result);
 8004f6e:	693b      	ldr	r3, [r7, #16]
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d1e6      	bne.n	8004f42 <UART_RxISR_16BIT+0xee>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	69db      	ldr	r3, [r3, #28]
 8004f7a:	f003 0310 	and.w	r3, r3, #16
 8004f7e:	2b10      	cmp	r3, #16
 8004f80:	d103      	bne.n	8004f8a <UART_RxISR_16BIT+0x136>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	2210      	movs	r2, #16
 8004f88:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8004f90:	4619      	mov	r1, r3
 8004f92:	6878      	ldr	r0, [r7, #4]
 8004f94:	f7ff f876 	bl	8004084 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004f98:	e00b      	b.n	8004fb2 <UART_RxISR_16BIT+0x15e>
        HAL_UART_RxCpltCallback(huart);
 8004f9a:	6878      	ldr	r0, [r7, #4]
 8004f9c:	f7fb ff7e 	bl	8000e9c <HAL_UART_RxCpltCallback>
}
 8004fa0:	e007      	b.n	8004fb2 <UART_RxISR_16BIT+0x15e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	699a      	ldr	r2, [r3, #24]
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	f042 0208 	orr.w	r2, r2, #8
 8004fb0:	619a      	str	r2, [r3, #24]
}
 8004fb2:	bf00      	nop
 8004fb4:	3758      	adds	r7, #88	; 0x58
 8004fb6:	46bd      	mov	sp, r7
 8004fb8:	bd80      	pop	{r7, pc}
	...

08004fbc <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004fbc:	b084      	sub	sp, #16
 8004fbe:	b580      	push	{r7, lr}
 8004fc0:	b084      	sub	sp, #16
 8004fc2:	af00      	add	r7, sp, #0
 8004fc4:	6078      	str	r0, [r7, #4]
 8004fc6:	f107 001c 	add.w	r0, r7, #28
 8004fca:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004fce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fd0:	2b01      	cmp	r3, #1
 8004fd2:	d126      	bne.n	8005022 <USB_CoreInit+0x66>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fd8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	68da      	ldr	r2, [r3, #12]
 8004fe4:	4b38      	ldr	r3, [pc, #224]	; (80050c8 <USB_CoreInit+0x10c>)
 8004fe6:	4013      	ands	r3, r2
 8004fe8:	687a      	ldr	r2, [r7, #4]
 8004fea:	60d3      	str	r3, [r2, #12]

#if defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx)
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	68db      	ldr	r3, [r3, #12]
 8004ff0:	f043 0210 	orr.w	r2, r3, #16
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	60da      	str	r2, [r3, #12]
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	68db      	ldr	r3, [r3, #12]
 8004ffc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005004:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005006:	2b01      	cmp	r3, #1
 8005008:	d105      	bne.n	8005016 <USB_CoreInit+0x5a>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	68db      	ldr	r3, [r3, #12]
 800500e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005016:	6878      	ldr	r0, [r7, #4]
 8005018:	f000 fad0 	bl	80055bc <USB_CoreReset>
 800501c:	4603      	mov	r3, r0
 800501e:	73fb      	strb	r3, [r7, #15]
 8005020:	e03a      	b.n	8005098 <USB_CoreInit+0xdc>
  }
#if defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx)
  else if (cfg.phy_itface == USB_OTG_HS_EMBEDDED_PHY)
 8005022:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005024:	2b03      	cmp	r3, #3
 8005026:	d126      	bne.n	8005076 <USB_CoreInit+0xba>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800502c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The UTMI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	68da      	ldr	r2, [r3, #12]
 8005038:	4b23      	ldr	r3, [pc, #140]	; (80050c8 <USB_CoreInit+0x10c>)
 800503a:	4013      	ands	r3, r2
 800503c:	687a      	ldr	r2, [r7, #4]
 800503e:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	68db      	ldr	r3, [r3, #12]
 8005044:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	60da      	str	r2, [r3, #12]

    /* Select UTMI Interface */
    USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	68db      	ldr	r3, [r3, #12]
 8005050:	f023 0210 	bic.w	r2, r3, #16
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	60da      	str	r2, [r3, #12]
    {
      return HAL_ERROR;
    }
#endif /* USBPHYC */

    if (cfg.use_external_vbus == 1U)
 8005058:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800505a:	2b01      	cmp	r3, #1
 800505c:	d105      	bne.n	800506a <USB_CoreInit+0xae>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	68db      	ldr	r3, [r3, #12]
 8005062:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800506a:	6878      	ldr	r0, [r7, #4]
 800506c:	f000 faa6 	bl	80055bc <USB_CoreReset>
 8005070:	4603      	mov	r3, r0
 8005072:	73fb      	strb	r3, [r7, #15]
 8005074:	e010      	b.n	8005098 <USB_CoreInit+0xdc>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	68db      	ldr	r3, [r3, #12]
 800507a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005082:	6878      	ldr	r0, [r7, #4]
 8005084:	f000 fa9a 	bl	80055bc <USB_CoreReset>
 8005088:	4603      	mov	r3, r0
 800508a:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005090:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 8005098:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800509a:	2b01      	cmp	r3, #1
 800509c:	d10b      	bne.n	80050b6 <USB_CoreInit+0xfa>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	689b      	ldr	r3, [r3, #8]
 80050a2:	f043 0206 	orr.w	r2, r3, #6
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	689b      	ldr	r3, [r3, #8]
 80050ae:	f043 0220 	orr.w	r2, r3, #32
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80050b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80050b8:	4618      	mov	r0, r3
 80050ba:	3710      	adds	r7, #16
 80050bc:	46bd      	mov	sp, r7
 80050be:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80050c2:	b004      	add	sp, #16
 80050c4:	4770      	bx	lr
 80050c6:	bf00      	nop
 80050c8:	ffbdffbf 	.word	0xffbdffbf

080050cc <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80050cc:	b480      	push	{r7}
 80050ce:	b083      	sub	sp, #12
 80050d0:	af00      	add	r7, sp, #0
 80050d2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	689b      	ldr	r3, [r3, #8]
 80050d8:	f023 0201 	bic.w	r2, r3, #1
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80050e0:	2300      	movs	r3, #0
}
 80050e2:	4618      	mov	r0, r3
 80050e4:	370c      	adds	r7, #12
 80050e6:	46bd      	mov	sp, r7
 80050e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ec:	4770      	bx	lr

080050ee <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80050ee:	b580      	push	{r7, lr}
 80050f0:	b084      	sub	sp, #16
 80050f2:	af00      	add	r7, sp, #0
 80050f4:	6078      	str	r0, [r7, #4]
 80050f6:	460b      	mov	r3, r1
 80050f8:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80050fa:	2300      	movs	r3, #0
 80050fc:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	68db      	ldr	r3, [r3, #12]
 8005102:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800510a:	78fb      	ldrb	r3, [r7, #3]
 800510c:	2b01      	cmp	r3, #1
 800510e:	d115      	bne.n	800513c <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	68db      	ldr	r3, [r3, #12]
 8005114:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800511c:	2001      	movs	r0, #1
 800511e:	f7fc fba3 	bl	8001868 <HAL_Delay>
      ms++;
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	3301      	adds	r3, #1
 8005126:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8005128:	6878      	ldr	r0, [r7, #4]
 800512a:	f000 fa39 	bl	80055a0 <USB_GetMode>
 800512e:	4603      	mov	r3, r0
 8005130:	2b01      	cmp	r3, #1
 8005132:	d01e      	beq.n	8005172 <USB_SetCurrentMode+0x84>
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	2b31      	cmp	r3, #49	; 0x31
 8005138:	d9f0      	bls.n	800511c <USB_SetCurrentMode+0x2e>
 800513a:	e01a      	b.n	8005172 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800513c:	78fb      	ldrb	r3, [r7, #3]
 800513e:	2b00      	cmp	r3, #0
 8005140:	d115      	bne.n	800516e <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	68db      	ldr	r3, [r3, #12]
 8005146:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800514e:	2001      	movs	r0, #1
 8005150:	f7fc fb8a 	bl	8001868 <HAL_Delay>
      ms++;
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	3301      	adds	r3, #1
 8005158:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800515a:	6878      	ldr	r0, [r7, #4]
 800515c:	f000 fa20 	bl	80055a0 <USB_GetMode>
 8005160:	4603      	mov	r3, r0
 8005162:	2b00      	cmp	r3, #0
 8005164:	d005      	beq.n	8005172 <USB_SetCurrentMode+0x84>
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	2b31      	cmp	r3, #49	; 0x31
 800516a:	d9f0      	bls.n	800514e <USB_SetCurrentMode+0x60>
 800516c:	e001      	b.n	8005172 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800516e:	2301      	movs	r3, #1
 8005170:	e005      	b.n	800517e <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	2b32      	cmp	r3, #50	; 0x32
 8005176:	d101      	bne.n	800517c <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8005178:	2301      	movs	r3, #1
 800517a:	e000      	b.n	800517e <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800517c:	2300      	movs	r3, #0
}
 800517e:	4618      	mov	r0, r3
 8005180:	3710      	adds	r7, #16
 8005182:	46bd      	mov	sp, r7
 8005184:	bd80      	pop	{r7, pc}
	...

08005188 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005188:	b084      	sub	sp, #16
 800518a:	b580      	push	{r7, lr}
 800518c:	b086      	sub	sp, #24
 800518e:	af00      	add	r7, sp, #0
 8005190:	6078      	str	r0, [r7, #4]
 8005192:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8005196:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800519a:	2300      	movs	r3, #0
 800519c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80051a2:	2300      	movs	r3, #0
 80051a4:	613b      	str	r3, [r7, #16]
 80051a6:	e009      	b.n	80051bc <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80051a8:	687a      	ldr	r2, [r7, #4]
 80051aa:	693b      	ldr	r3, [r7, #16]
 80051ac:	3340      	adds	r3, #64	; 0x40
 80051ae:	009b      	lsls	r3, r3, #2
 80051b0:	4413      	add	r3, r2
 80051b2:	2200      	movs	r2, #0
 80051b4:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80051b6:	693b      	ldr	r3, [r7, #16]
 80051b8:	3301      	adds	r3, #1
 80051ba:	613b      	str	r3, [r7, #16]
 80051bc:	693b      	ldr	r3, [r7, #16]
 80051be:	2b0e      	cmp	r3, #14
 80051c0:	d9f2      	bls.n	80051a8 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80051c2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d11c      	bne.n	8005202 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80051ce:	685b      	ldr	r3, [r3, #4]
 80051d0:	68fa      	ldr	r2, [r7, #12]
 80051d2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80051d6:	f043 0302 	orr.w	r3, r3, #2
 80051da:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051e0:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	601a      	str	r2, [r3, #0]
 8005200:	e005      	b.n	800520e <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005206:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005214:	461a      	mov	r2, r3
 8005216:	2300      	movs	r3, #0
 8005218:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005220:	4619      	mov	r1, r3
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005228:	461a      	mov	r2, r3
 800522a:	680b      	ldr	r3, [r1, #0]
 800522c:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800522e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005230:	2b01      	cmp	r3, #1
 8005232:	d10c      	bne.n	800524e <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8005234:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005236:	2b00      	cmp	r3, #0
 8005238:	d104      	bne.n	8005244 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800523a:	2100      	movs	r1, #0
 800523c:	6878      	ldr	r0, [r7, #4]
 800523e:	f000 f975 	bl	800552c <USB_SetDevSpeed>
 8005242:	e018      	b.n	8005276 <USB_DevInit+0xee>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8005244:	2101      	movs	r1, #1
 8005246:	6878      	ldr	r0, [r7, #4]
 8005248:	f000 f970 	bl	800552c <USB_SetDevSpeed>
 800524c:	e013      	b.n	8005276 <USB_DevInit+0xee>
    }
  }
#if defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx)
  else if (cfg.phy_itface == USB_OTG_HS_EMBEDDED_PHY)
 800524e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005250:	2b03      	cmp	r3, #3
 8005252:	d10c      	bne.n	800526e <USB_DevInit+0xe6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8005254:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005256:	2b00      	cmp	r3, #0
 8005258:	d104      	bne.n	8005264 <USB_DevInit+0xdc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800525a:	2100      	movs	r1, #0
 800525c:	6878      	ldr	r0, [r7, #4]
 800525e:	f000 f965 	bl	800552c <USB_SetDevSpeed>
 8005262:	e008      	b.n	8005276 <USB_DevInit+0xee>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8005264:	2101      	movs	r1, #1
 8005266:	6878      	ldr	r0, [r7, #4]
 8005268:	f000 f960 	bl	800552c <USB_SetDevSpeed>
 800526c:	e003      	b.n	8005276 <USB_DevInit+0xee>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800526e:	2103      	movs	r1, #3
 8005270:	6878      	ldr	r0, [r7, #4]
 8005272:	f000 f95b 	bl	800552c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005276:	2110      	movs	r1, #16
 8005278:	6878      	ldr	r0, [r7, #4]
 800527a:	f000 f8f3 	bl	8005464 <USB_FlushTxFifo>
 800527e:	4603      	mov	r3, r0
 8005280:	2b00      	cmp	r3, #0
 8005282:	d001      	beq.n	8005288 <USB_DevInit+0x100>
  {
    ret = HAL_ERROR;
 8005284:	2301      	movs	r3, #1
 8005286:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005288:	6878      	ldr	r0, [r7, #4]
 800528a:	f000 f91f 	bl	80054cc <USB_FlushRxFifo>
 800528e:	4603      	mov	r3, r0
 8005290:	2b00      	cmp	r3, #0
 8005292:	d001      	beq.n	8005298 <USB_DevInit+0x110>
  {
    ret = HAL_ERROR;
 8005294:	2301      	movs	r3, #1
 8005296:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800529e:	461a      	mov	r2, r3
 80052a0:	2300      	movs	r3, #0
 80052a2:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80052aa:	461a      	mov	r2, r3
 80052ac:	2300      	movs	r3, #0
 80052ae:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80052b6:	461a      	mov	r2, r3
 80052b8:	2300      	movs	r3, #0
 80052ba:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80052bc:	2300      	movs	r3, #0
 80052be:	613b      	str	r3, [r7, #16]
 80052c0:	e043      	b.n	800534a <USB_DevInit+0x1c2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80052c2:	693b      	ldr	r3, [r7, #16]
 80052c4:	015a      	lsls	r2, r3, #5
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	4413      	add	r3, r2
 80052ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80052d4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80052d8:	d118      	bne.n	800530c <USB_DevInit+0x184>
    {
      if (i == 0U)
 80052da:	693b      	ldr	r3, [r7, #16]
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d10a      	bne.n	80052f6 <USB_DevInit+0x16e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80052e0:	693b      	ldr	r3, [r7, #16]
 80052e2:	015a      	lsls	r2, r3, #5
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	4413      	add	r3, r2
 80052e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80052ec:	461a      	mov	r2, r3
 80052ee:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80052f2:	6013      	str	r3, [r2, #0]
 80052f4:	e013      	b.n	800531e <USB_DevInit+0x196>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80052f6:	693b      	ldr	r3, [r7, #16]
 80052f8:	015a      	lsls	r2, r3, #5
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	4413      	add	r3, r2
 80052fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005302:	461a      	mov	r2, r3
 8005304:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005308:	6013      	str	r3, [r2, #0]
 800530a:	e008      	b.n	800531e <USB_DevInit+0x196>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800530c:	693b      	ldr	r3, [r7, #16]
 800530e:	015a      	lsls	r2, r3, #5
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	4413      	add	r3, r2
 8005314:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005318:	461a      	mov	r2, r3
 800531a:	2300      	movs	r3, #0
 800531c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800531e:	693b      	ldr	r3, [r7, #16]
 8005320:	015a      	lsls	r2, r3, #5
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	4413      	add	r3, r2
 8005326:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800532a:	461a      	mov	r2, r3
 800532c:	2300      	movs	r3, #0
 800532e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8005330:	693b      	ldr	r3, [r7, #16]
 8005332:	015a      	lsls	r2, r3, #5
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	4413      	add	r3, r2
 8005338:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800533c:	461a      	mov	r2, r3
 800533e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005342:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005344:	693b      	ldr	r3, [r7, #16]
 8005346:	3301      	adds	r3, #1
 8005348:	613b      	str	r3, [r7, #16]
 800534a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800534c:	693a      	ldr	r2, [r7, #16]
 800534e:	429a      	cmp	r2, r3
 8005350:	d3b7      	bcc.n	80052c2 <USB_DevInit+0x13a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005352:	2300      	movs	r3, #0
 8005354:	613b      	str	r3, [r7, #16]
 8005356:	e043      	b.n	80053e0 <USB_DevInit+0x258>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005358:	693b      	ldr	r3, [r7, #16]
 800535a:	015a      	lsls	r2, r3, #5
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	4413      	add	r3, r2
 8005360:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800536a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800536e:	d118      	bne.n	80053a2 <USB_DevInit+0x21a>
    {
      if (i == 0U)
 8005370:	693b      	ldr	r3, [r7, #16]
 8005372:	2b00      	cmp	r3, #0
 8005374:	d10a      	bne.n	800538c <USB_DevInit+0x204>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8005376:	693b      	ldr	r3, [r7, #16]
 8005378:	015a      	lsls	r2, r3, #5
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	4413      	add	r3, r2
 800537e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005382:	461a      	mov	r2, r3
 8005384:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005388:	6013      	str	r3, [r2, #0]
 800538a:	e013      	b.n	80053b4 <USB_DevInit+0x22c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800538c:	693b      	ldr	r3, [r7, #16]
 800538e:	015a      	lsls	r2, r3, #5
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	4413      	add	r3, r2
 8005394:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005398:	461a      	mov	r2, r3
 800539a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800539e:	6013      	str	r3, [r2, #0]
 80053a0:	e008      	b.n	80053b4 <USB_DevInit+0x22c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80053a2:	693b      	ldr	r3, [r7, #16]
 80053a4:	015a      	lsls	r2, r3, #5
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	4413      	add	r3, r2
 80053aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80053ae:	461a      	mov	r2, r3
 80053b0:	2300      	movs	r3, #0
 80053b2:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80053b4:	693b      	ldr	r3, [r7, #16]
 80053b6:	015a      	lsls	r2, r3, #5
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	4413      	add	r3, r2
 80053bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80053c0:	461a      	mov	r2, r3
 80053c2:	2300      	movs	r3, #0
 80053c4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80053c6:	693b      	ldr	r3, [r7, #16]
 80053c8:	015a      	lsls	r2, r3, #5
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	4413      	add	r3, r2
 80053ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80053d2:	461a      	mov	r2, r3
 80053d4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80053d8:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80053da:	693b      	ldr	r3, [r7, #16]
 80053dc:	3301      	adds	r3, #1
 80053de:	613b      	str	r3, [r7, #16]
 80053e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053e2:	693a      	ldr	r2, [r7, #16]
 80053e4:	429a      	cmp	r2, r3
 80053e6:	d3b7      	bcc.n	8005358 <USB_DevInit+0x1d0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80053ee:	691b      	ldr	r3, [r3, #16]
 80053f0:	68fa      	ldr	r2, [r7, #12]
 80053f2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80053f6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80053fa:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	2200      	movs	r2, #0
 8005400:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8005408:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800540a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800540c:	2b00      	cmp	r3, #0
 800540e:	d105      	bne.n	800541c <USB_DevInit+0x294>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	699b      	ldr	r3, [r3, #24]
 8005414:	f043 0210 	orr.w	r2, r3, #16
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	699a      	ldr	r2, [r3, #24]
 8005420:	4b0e      	ldr	r3, [pc, #56]	; (800545c <USB_DevInit+0x2d4>)
 8005422:	4313      	orrs	r3, r2
 8005424:	687a      	ldr	r2, [r7, #4]
 8005426:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8005428:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800542a:	2b00      	cmp	r3, #0
 800542c:	d005      	beq.n	800543a <USB_DevInit+0x2b2>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	699b      	ldr	r3, [r3, #24]
 8005432:	f043 0208 	orr.w	r2, r3, #8
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800543a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800543c:	2b01      	cmp	r3, #1
 800543e:	d105      	bne.n	800544c <USB_DevInit+0x2c4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	699a      	ldr	r2, [r3, #24]
 8005444:	4b06      	ldr	r3, [pc, #24]	; (8005460 <USB_DevInit+0x2d8>)
 8005446:	4313      	orrs	r3, r2
 8005448:	687a      	ldr	r2, [r7, #4]
 800544a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800544c:	7dfb      	ldrb	r3, [r7, #23]
}
 800544e:	4618      	mov	r0, r3
 8005450:	3718      	adds	r7, #24
 8005452:	46bd      	mov	sp, r7
 8005454:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005458:	b004      	add	sp, #16
 800545a:	4770      	bx	lr
 800545c:	803c3800 	.word	0x803c3800
 8005460:	40000004 	.word	0x40000004

08005464 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005464:	b480      	push	{r7}
 8005466:	b085      	sub	sp, #20
 8005468:	af00      	add	r7, sp, #0
 800546a:	6078      	str	r0, [r7, #4]
 800546c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800546e:	2300      	movs	r3, #0
 8005470:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	3301      	adds	r3, #1
 8005476:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	4a13      	ldr	r2, [pc, #76]	; (80054c8 <USB_FlushTxFifo+0x64>)
 800547c:	4293      	cmp	r3, r2
 800547e:	d901      	bls.n	8005484 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8005480:	2303      	movs	r3, #3
 8005482:	e01b      	b.n	80054bc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	691b      	ldr	r3, [r3, #16]
 8005488:	2b00      	cmp	r3, #0
 800548a:	daf2      	bge.n	8005472 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800548c:	2300      	movs	r3, #0
 800548e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005490:	683b      	ldr	r3, [r7, #0]
 8005492:	019b      	lsls	r3, r3, #6
 8005494:	f043 0220 	orr.w	r2, r3, #32
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	3301      	adds	r3, #1
 80054a0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	4a08      	ldr	r2, [pc, #32]	; (80054c8 <USB_FlushTxFifo+0x64>)
 80054a6:	4293      	cmp	r3, r2
 80054a8:	d901      	bls.n	80054ae <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80054aa:	2303      	movs	r3, #3
 80054ac:	e006      	b.n	80054bc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	691b      	ldr	r3, [r3, #16]
 80054b2:	f003 0320 	and.w	r3, r3, #32
 80054b6:	2b20      	cmp	r3, #32
 80054b8:	d0f0      	beq.n	800549c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80054ba:	2300      	movs	r3, #0
}
 80054bc:	4618      	mov	r0, r3
 80054be:	3714      	adds	r7, #20
 80054c0:	46bd      	mov	sp, r7
 80054c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054c6:	4770      	bx	lr
 80054c8:	00030d40 	.word	0x00030d40

080054cc <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80054cc:	b480      	push	{r7}
 80054ce:	b085      	sub	sp, #20
 80054d0:	af00      	add	r7, sp, #0
 80054d2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80054d4:	2300      	movs	r3, #0
 80054d6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	3301      	adds	r3, #1
 80054dc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	4a11      	ldr	r2, [pc, #68]	; (8005528 <USB_FlushRxFifo+0x5c>)
 80054e2:	4293      	cmp	r3, r2
 80054e4:	d901      	bls.n	80054ea <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80054e6:	2303      	movs	r3, #3
 80054e8:	e018      	b.n	800551c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	691b      	ldr	r3, [r3, #16]
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	daf2      	bge.n	80054d8 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80054f2:	2300      	movs	r3, #0
 80054f4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	2210      	movs	r2, #16
 80054fa:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	3301      	adds	r3, #1
 8005500:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	4a08      	ldr	r2, [pc, #32]	; (8005528 <USB_FlushRxFifo+0x5c>)
 8005506:	4293      	cmp	r3, r2
 8005508:	d901      	bls.n	800550e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800550a:	2303      	movs	r3, #3
 800550c:	e006      	b.n	800551c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	691b      	ldr	r3, [r3, #16]
 8005512:	f003 0310 	and.w	r3, r3, #16
 8005516:	2b10      	cmp	r3, #16
 8005518:	d0f0      	beq.n	80054fc <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800551a:	2300      	movs	r3, #0
}
 800551c:	4618      	mov	r0, r3
 800551e:	3714      	adds	r7, #20
 8005520:	46bd      	mov	sp, r7
 8005522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005526:	4770      	bx	lr
 8005528:	00030d40 	.word	0x00030d40

0800552c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800552c:	b480      	push	{r7}
 800552e:	b085      	sub	sp, #20
 8005530:	af00      	add	r7, sp, #0
 8005532:	6078      	str	r0, [r7, #4]
 8005534:	460b      	mov	r3, r1
 8005536:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005542:	681a      	ldr	r2, [r3, #0]
 8005544:	78fb      	ldrb	r3, [r7, #3]
 8005546:	68f9      	ldr	r1, [r7, #12]
 8005548:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800554c:	4313      	orrs	r3, r2
 800554e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8005550:	2300      	movs	r3, #0
}
 8005552:	4618      	mov	r0, r3
 8005554:	3714      	adds	r7, #20
 8005556:	46bd      	mov	sp, r7
 8005558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800555c:	4770      	bx	lr

0800555e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800555e:	b480      	push	{r7}
 8005560:	b085      	sub	sp, #20
 8005562:	af00      	add	r7, sp, #0
 8005564:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	68fa      	ldr	r2, [r7, #12]
 8005574:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8005578:	f023 0303 	bic.w	r3, r3, #3
 800557c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005584:	685b      	ldr	r3, [r3, #4]
 8005586:	68fa      	ldr	r2, [r7, #12]
 8005588:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800558c:	f043 0302 	orr.w	r3, r3, #2
 8005590:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005592:	2300      	movs	r3, #0
}
 8005594:	4618      	mov	r0, r3
 8005596:	3714      	adds	r7, #20
 8005598:	46bd      	mov	sp, r7
 800559a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800559e:	4770      	bx	lr

080055a0 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80055a0:	b480      	push	{r7}
 80055a2:	b083      	sub	sp, #12
 80055a4:	af00      	add	r7, sp, #0
 80055a6:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	695b      	ldr	r3, [r3, #20]
 80055ac:	f003 0301 	and.w	r3, r3, #1
}
 80055b0:	4618      	mov	r0, r3
 80055b2:	370c      	adds	r7, #12
 80055b4:	46bd      	mov	sp, r7
 80055b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ba:	4770      	bx	lr

080055bc <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80055bc:	b480      	push	{r7}
 80055be:	b085      	sub	sp, #20
 80055c0:	af00      	add	r7, sp, #0
 80055c2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80055c4:	2300      	movs	r3, #0
 80055c6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	3301      	adds	r3, #1
 80055cc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	4a13      	ldr	r2, [pc, #76]	; (8005620 <USB_CoreReset+0x64>)
 80055d2:	4293      	cmp	r3, r2
 80055d4:	d901      	bls.n	80055da <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80055d6:	2303      	movs	r3, #3
 80055d8:	e01b      	b.n	8005612 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	691b      	ldr	r3, [r3, #16]
 80055de:	2b00      	cmp	r3, #0
 80055e0:	daf2      	bge.n	80055c8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80055e2:	2300      	movs	r3, #0
 80055e4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	691b      	ldr	r3, [r3, #16]
 80055ea:	f043 0201 	orr.w	r2, r3, #1
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	3301      	adds	r3, #1
 80055f6:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	4a09      	ldr	r2, [pc, #36]	; (8005620 <USB_CoreReset+0x64>)
 80055fc:	4293      	cmp	r3, r2
 80055fe:	d901      	bls.n	8005604 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005600:	2303      	movs	r3, #3
 8005602:	e006      	b.n	8005612 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	691b      	ldr	r3, [r3, #16]
 8005608:	f003 0301 	and.w	r3, r3, #1
 800560c:	2b01      	cmp	r3, #1
 800560e:	d0f0      	beq.n	80055f2 <USB_CoreReset+0x36>

  return HAL_OK;
 8005610:	2300      	movs	r3, #0
}
 8005612:	4618      	mov	r0, r3
 8005614:	3714      	adds	r7, #20
 8005616:	46bd      	mov	sp, r7
 8005618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800561c:	4770      	bx	lr
 800561e:	bf00      	nop
 8005620:	00030d40 	.word	0x00030d40

08005624 <atoi>:
 8005624:	220a      	movs	r2, #10
 8005626:	2100      	movs	r1, #0
 8005628:	f000 b882 	b.w	8005730 <strtol>

0800562c <_strtol_l.constprop.0>:
 800562c:	2b01      	cmp	r3, #1
 800562e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005632:	d001      	beq.n	8005638 <_strtol_l.constprop.0+0xc>
 8005634:	2b24      	cmp	r3, #36	; 0x24
 8005636:	d906      	bls.n	8005646 <_strtol_l.constprop.0+0x1a>
 8005638:	f000 f88c 	bl	8005754 <__errno>
 800563c:	2316      	movs	r3, #22
 800563e:	6003      	str	r3, [r0, #0]
 8005640:	2000      	movs	r0, #0
 8005642:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005646:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800572c <_strtol_l.constprop.0+0x100>
 800564a:	460d      	mov	r5, r1
 800564c:	462e      	mov	r6, r5
 800564e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005652:	f81c 7004 	ldrb.w	r7, [ip, r4]
 8005656:	f017 0708 	ands.w	r7, r7, #8
 800565a:	d1f7      	bne.n	800564c <_strtol_l.constprop.0+0x20>
 800565c:	2c2d      	cmp	r4, #45	; 0x2d
 800565e:	d132      	bne.n	80056c6 <_strtol_l.constprop.0+0x9a>
 8005660:	782c      	ldrb	r4, [r5, #0]
 8005662:	2701      	movs	r7, #1
 8005664:	1cb5      	adds	r5, r6, #2
 8005666:	2b00      	cmp	r3, #0
 8005668:	d05b      	beq.n	8005722 <_strtol_l.constprop.0+0xf6>
 800566a:	2b10      	cmp	r3, #16
 800566c:	d109      	bne.n	8005682 <_strtol_l.constprop.0+0x56>
 800566e:	2c30      	cmp	r4, #48	; 0x30
 8005670:	d107      	bne.n	8005682 <_strtol_l.constprop.0+0x56>
 8005672:	782c      	ldrb	r4, [r5, #0]
 8005674:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8005678:	2c58      	cmp	r4, #88	; 0x58
 800567a:	d14d      	bne.n	8005718 <_strtol_l.constprop.0+0xec>
 800567c:	786c      	ldrb	r4, [r5, #1]
 800567e:	2310      	movs	r3, #16
 8005680:	3502      	adds	r5, #2
 8005682:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8005686:	f108 38ff 	add.w	r8, r8, #4294967295
 800568a:	f04f 0e00 	mov.w	lr, #0
 800568e:	fbb8 f9f3 	udiv	r9, r8, r3
 8005692:	4676      	mov	r6, lr
 8005694:	fb03 8a19 	mls	sl, r3, r9, r8
 8005698:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800569c:	f1bc 0f09 	cmp.w	ip, #9
 80056a0:	d816      	bhi.n	80056d0 <_strtol_l.constprop.0+0xa4>
 80056a2:	4664      	mov	r4, ip
 80056a4:	42a3      	cmp	r3, r4
 80056a6:	dd24      	ble.n	80056f2 <_strtol_l.constprop.0+0xc6>
 80056a8:	f1be 3fff 	cmp.w	lr, #4294967295
 80056ac:	d008      	beq.n	80056c0 <_strtol_l.constprop.0+0x94>
 80056ae:	45b1      	cmp	r9, r6
 80056b0:	d31c      	bcc.n	80056ec <_strtol_l.constprop.0+0xc0>
 80056b2:	d101      	bne.n	80056b8 <_strtol_l.constprop.0+0x8c>
 80056b4:	45a2      	cmp	sl, r4
 80056b6:	db19      	blt.n	80056ec <_strtol_l.constprop.0+0xc0>
 80056b8:	fb06 4603 	mla	r6, r6, r3, r4
 80056bc:	f04f 0e01 	mov.w	lr, #1
 80056c0:	f815 4b01 	ldrb.w	r4, [r5], #1
 80056c4:	e7e8      	b.n	8005698 <_strtol_l.constprop.0+0x6c>
 80056c6:	2c2b      	cmp	r4, #43	; 0x2b
 80056c8:	bf04      	itt	eq
 80056ca:	782c      	ldrbeq	r4, [r5, #0]
 80056cc:	1cb5      	addeq	r5, r6, #2
 80056ce:	e7ca      	b.n	8005666 <_strtol_l.constprop.0+0x3a>
 80056d0:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 80056d4:	f1bc 0f19 	cmp.w	ip, #25
 80056d8:	d801      	bhi.n	80056de <_strtol_l.constprop.0+0xb2>
 80056da:	3c37      	subs	r4, #55	; 0x37
 80056dc:	e7e2      	b.n	80056a4 <_strtol_l.constprop.0+0x78>
 80056de:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 80056e2:	f1bc 0f19 	cmp.w	ip, #25
 80056e6:	d804      	bhi.n	80056f2 <_strtol_l.constprop.0+0xc6>
 80056e8:	3c57      	subs	r4, #87	; 0x57
 80056ea:	e7db      	b.n	80056a4 <_strtol_l.constprop.0+0x78>
 80056ec:	f04f 3eff 	mov.w	lr, #4294967295
 80056f0:	e7e6      	b.n	80056c0 <_strtol_l.constprop.0+0x94>
 80056f2:	f1be 3fff 	cmp.w	lr, #4294967295
 80056f6:	d105      	bne.n	8005704 <_strtol_l.constprop.0+0xd8>
 80056f8:	2322      	movs	r3, #34	; 0x22
 80056fa:	6003      	str	r3, [r0, #0]
 80056fc:	4646      	mov	r6, r8
 80056fe:	b942      	cbnz	r2, 8005712 <_strtol_l.constprop.0+0xe6>
 8005700:	4630      	mov	r0, r6
 8005702:	e79e      	b.n	8005642 <_strtol_l.constprop.0+0x16>
 8005704:	b107      	cbz	r7, 8005708 <_strtol_l.constprop.0+0xdc>
 8005706:	4276      	negs	r6, r6
 8005708:	2a00      	cmp	r2, #0
 800570a:	d0f9      	beq.n	8005700 <_strtol_l.constprop.0+0xd4>
 800570c:	f1be 0f00 	cmp.w	lr, #0
 8005710:	d000      	beq.n	8005714 <_strtol_l.constprop.0+0xe8>
 8005712:	1e69      	subs	r1, r5, #1
 8005714:	6011      	str	r1, [r2, #0]
 8005716:	e7f3      	b.n	8005700 <_strtol_l.constprop.0+0xd4>
 8005718:	2430      	movs	r4, #48	; 0x30
 800571a:	2b00      	cmp	r3, #0
 800571c:	d1b1      	bne.n	8005682 <_strtol_l.constprop.0+0x56>
 800571e:	2308      	movs	r3, #8
 8005720:	e7af      	b.n	8005682 <_strtol_l.constprop.0+0x56>
 8005722:	2c30      	cmp	r4, #48	; 0x30
 8005724:	d0a5      	beq.n	8005672 <_strtol_l.constprop.0+0x46>
 8005726:	230a      	movs	r3, #10
 8005728:	e7ab      	b.n	8005682 <_strtol_l.constprop.0+0x56>
 800572a:	bf00      	nop
 800572c:	08005ca9 	.word	0x08005ca9

08005730 <strtol>:
 8005730:	4613      	mov	r3, r2
 8005732:	460a      	mov	r2, r1
 8005734:	4601      	mov	r1, r0
 8005736:	4802      	ldr	r0, [pc, #8]	; (8005740 <strtol+0x10>)
 8005738:	6800      	ldr	r0, [r0, #0]
 800573a:	f7ff bf77 	b.w	800562c <_strtol_l.constprop.0>
 800573e:	bf00      	nop
 8005740:	2000005c 	.word	0x2000005c

08005744 <memset>:
 8005744:	4402      	add	r2, r0
 8005746:	4603      	mov	r3, r0
 8005748:	4293      	cmp	r3, r2
 800574a:	d100      	bne.n	800574e <memset+0xa>
 800574c:	4770      	bx	lr
 800574e:	f803 1b01 	strb.w	r1, [r3], #1
 8005752:	e7f9      	b.n	8005748 <memset+0x4>

08005754 <__errno>:
 8005754:	4b01      	ldr	r3, [pc, #4]	; (800575c <__errno+0x8>)
 8005756:	6818      	ldr	r0, [r3, #0]
 8005758:	4770      	bx	lr
 800575a:	bf00      	nop
 800575c:	2000005c 	.word	0x2000005c

08005760 <__libc_init_array>:
 8005760:	b570      	push	{r4, r5, r6, lr}
 8005762:	4d0d      	ldr	r5, [pc, #52]	; (8005798 <__libc_init_array+0x38>)
 8005764:	4c0d      	ldr	r4, [pc, #52]	; (800579c <__libc_init_array+0x3c>)
 8005766:	1b64      	subs	r4, r4, r5
 8005768:	10a4      	asrs	r4, r4, #2
 800576a:	2600      	movs	r6, #0
 800576c:	42a6      	cmp	r6, r4
 800576e:	d109      	bne.n	8005784 <__libc_init_array+0x24>
 8005770:	4d0b      	ldr	r5, [pc, #44]	; (80057a0 <__libc_init_array+0x40>)
 8005772:	4c0c      	ldr	r4, [pc, #48]	; (80057a4 <__libc_init_array+0x44>)
 8005774:	f000 f826 	bl	80057c4 <_init>
 8005778:	1b64      	subs	r4, r4, r5
 800577a:	10a4      	asrs	r4, r4, #2
 800577c:	2600      	movs	r6, #0
 800577e:	42a6      	cmp	r6, r4
 8005780:	d105      	bne.n	800578e <__libc_init_array+0x2e>
 8005782:	bd70      	pop	{r4, r5, r6, pc}
 8005784:	f855 3b04 	ldr.w	r3, [r5], #4
 8005788:	4798      	blx	r3
 800578a:	3601      	adds	r6, #1
 800578c:	e7ee      	b.n	800576c <__libc_init_array+0xc>
 800578e:	f855 3b04 	ldr.w	r3, [r5], #4
 8005792:	4798      	blx	r3
 8005794:	3601      	adds	r6, #1
 8005796:	e7f2      	b.n	800577e <__libc_init_array+0x1e>
 8005798:	08005db4 	.word	0x08005db4
 800579c:	08005db4 	.word	0x08005db4
 80057a0:	08005db4 	.word	0x08005db4
 80057a4:	08005db8 	.word	0x08005db8

080057a8 <memcpy>:
 80057a8:	440a      	add	r2, r1
 80057aa:	4291      	cmp	r1, r2
 80057ac:	f100 33ff 	add.w	r3, r0, #4294967295
 80057b0:	d100      	bne.n	80057b4 <memcpy+0xc>
 80057b2:	4770      	bx	lr
 80057b4:	b510      	push	{r4, lr}
 80057b6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80057ba:	f803 4f01 	strb.w	r4, [r3, #1]!
 80057be:	4291      	cmp	r1, r2
 80057c0:	d1f9      	bne.n	80057b6 <memcpy+0xe>
 80057c2:	bd10      	pop	{r4, pc}

080057c4 <_init>:
 80057c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80057c6:	bf00      	nop
 80057c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80057ca:	bc08      	pop	{r3}
 80057cc:	469e      	mov	lr, r3
 80057ce:	4770      	bx	lr

080057d0 <_fini>:
 80057d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80057d2:	bf00      	nop
 80057d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80057d6:	bc08      	pop	{r3}
 80057d8:	469e      	mov	lr, r3
 80057da:	4770      	bx	lr
