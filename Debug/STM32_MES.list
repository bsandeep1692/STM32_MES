
STM32_MES.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004a44  080001e0  080001e0  000101e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000050  08004c24  08004c24  00014c24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004c74  08004c74  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08004c74  08004c74  00014c74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004c7c  08004c7c  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004c7c  08004c7c  00014c7c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004c80  08004c80  00014c80  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08004c84  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000614  2000000c  08004c90  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000620  08004c90  00020620  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00013cfb  00000000  00000000  0002007f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002909  00000000  00000000  00033d7a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001128  00000000  00000000  00036688  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000d64  00000000  00000000  000377b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00022881  00000000  00000000  00038514  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00014d92  00000000  00000000  0005ad95  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000da752  00000000  00000000  0006fb27  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000048e8  00000000  00000000  0014a27c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000066  00000000  00000000  0014eb64  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	2000000c 	.word	0x2000000c
 80001fc:	00000000 	.word	0x00000000
 8000200:	08004c0c 	.word	0x08004c0c

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000010 	.word	0x20000010
 800021c:	08004c0c 	.word	0x08004c0c

08000220 <__aeabi_uldivmod>:
 8000220:	b953      	cbnz	r3, 8000238 <__aeabi_uldivmod+0x18>
 8000222:	b94a      	cbnz	r2, 8000238 <__aeabi_uldivmod+0x18>
 8000224:	2900      	cmp	r1, #0
 8000226:	bf08      	it	eq
 8000228:	2800      	cmpeq	r0, #0
 800022a:	bf1c      	itt	ne
 800022c:	f04f 31ff 	movne.w	r1, #4294967295
 8000230:	f04f 30ff 	movne.w	r0, #4294967295
 8000234:	f000 b970 	b.w	8000518 <__aeabi_idiv0>
 8000238:	f1ad 0c08 	sub.w	ip, sp, #8
 800023c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000240:	f000 f806 	bl	8000250 <__udivmoddi4>
 8000244:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000248:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800024c:	b004      	add	sp, #16
 800024e:	4770      	bx	lr

08000250 <__udivmoddi4>:
 8000250:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000254:	9e08      	ldr	r6, [sp, #32]
 8000256:	460d      	mov	r5, r1
 8000258:	4604      	mov	r4, r0
 800025a:	460f      	mov	r7, r1
 800025c:	2b00      	cmp	r3, #0
 800025e:	d14a      	bne.n	80002f6 <__udivmoddi4+0xa6>
 8000260:	428a      	cmp	r2, r1
 8000262:	4694      	mov	ip, r2
 8000264:	d965      	bls.n	8000332 <__udivmoddi4+0xe2>
 8000266:	fab2 f382 	clz	r3, r2
 800026a:	b143      	cbz	r3, 800027e <__udivmoddi4+0x2e>
 800026c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000270:	f1c3 0220 	rsb	r2, r3, #32
 8000274:	409f      	lsls	r7, r3
 8000276:	fa20 f202 	lsr.w	r2, r0, r2
 800027a:	4317      	orrs	r7, r2
 800027c:	409c      	lsls	r4, r3
 800027e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000282:	fa1f f58c 	uxth.w	r5, ip
 8000286:	fbb7 f1fe 	udiv	r1, r7, lr
 800028a:	0c22      	lsrs	r2, r4, #16
 800028c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000290:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000294:	fb01 f005 	mul.w	r0, r1, r5
 8000298:	4290      	cmp	r0, r2
 800029a:	d90a      	bls.n	80002b2 <__udivmoddi4+0x62>
 800029c:	eb1c 0202 	adds.w	r2, ip, r2
 80002a0:	f101 37ff 	add.w	r7, r1, #4294967295
 80002a4:	f080 811c 	bcs.w	80004e0 <__udivmoddi4+0x290>
 80002a8:	4290      	cmp	r0, r2
 80002aa:	f240 8119 	bls.w	80004e0 <__udivmoddi4+0x290>
 80002ae:	3902      	subs	r1, #2
 80002b0:	4462      	add	r2, ip
 80002b2:	1a12      	subs	r2, r2, r0
 80002b4:	b2a4      	uxth	r4, r4
 80002b6:	fbb2 f0fe 	udiv	r0, r2, lr
 80002ba:	fb0e 2210 	mls	r2, lr, r0, r2
 80002be:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002c2:	fb00 f505 	mul.w	r5, r0, r5
 80002c6:	42a5      	cmp	r5, r4
 80002c8:	d90a      	bls.n	80002e0 <__udivmoddi4+0x90>
 80002ca:	eb1c 0404 	adds.w	r4, ip, r4
 80002ce:	f100 32ff 	add.w	r2, r0, #4294967295
 80002d2:	f080 8107 	bcs.w	80004e4 <__udivmoddi4+0x294>
 80002d6:	42a5      	cmp	r5, r4
 80002d8:	f240 8104 	bls.w	80004e4 <__udivmoddi4+0x294>
 80002dc:	4464      	add	r4, ip
 80002de:	3802      	subs	r0, #2
 80002e0:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002e4:	1b64      	subs	r4, r4, r5
 80002e6:	2100      	movs	r1, #0
 80002e8:	b11e      	cbz	r6, 80002f2 <__udivmoddi4+0xa2>
 80002ea:	40dc      	lsrs	r4, r3
 80002ec:	2300      	movs	r3, #0
 80002ee:	e9c6 4300 	strd	r4, r3, [r6]
 80002f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d908      	bls.n	800030c <__udivmoddi4+0xbc>
 80002fa:	2e00      	cmp	r6, #0
 80002fc:	f000 80ed 	beq.w	80004da <__udivmoddi4+0x28a>
 8000300:	2100      	movs	r1, #0
 8000302:	e9c6 0500 	strd	r0, r5, [r6]
 8000306:	4608      	mov	r0, r1
 8000308:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800030c:	fab3 f183 	clz	r1, r3
 8000310:	2900      	cmp	r1, #0
 8000312:	d149      	bne.n	80003a8 <__udivmoddi4+0x158>
 8000314:	42ab      	cmp	r3, r5
 8000316:	d302      	bcc.n	800031e <__udivmoddi4+0xce>
 8000318:	4282      	cmp	r2, r0
 800031a:	f200 80f8 	bhi.w	800050e <__udivmoddi4+0x2be>
 800031e:	1a84      	subs	r4, r0, r2
 8000320:	eb65 0203 	sbc.w	r2, r5, r3
 8000324:	2001      	movs	r0, #1
 8000326:	4617      	mov	r7, r2
 8000328:	2e00      	cmp	r6, #0
 800032a:	d0e2      	beq.n	80002f2 <__udivmoddi4+0xa2>
 800032c:	e9c6 4700 	strd	r4, r7, [r6]
 8000330:	e7df      	b.n	80002f2 <__udivmoddi4+0xa2>
 8000332:	b902      	cbnz	r2, 8000336 <__udivmoddi4+0xe6>
 8000334:	deff      	udf	#255	; 0xff
 8000336:	fab2 f382 	clz	r3, r2
 800033a:	2b00      	cmp	r3, #0
 800033c:	f040 8090 	bne.w	8000460 <__udivmoddi4+0x210>
 8000340:	1a8a      	subs	r2, r1, r2
 8000342:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000346:	fa1f fe8c 	uxth.w	lr, ip
 800034a:	2101      	movs	r1, #1
 800034c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000350:	fb07 2015 	mls	r0, r7, r5, r2
 8000354:	0c22      	lsrs	r2, r4, #16
 8000356:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800035a:	fb0e f005 	mul.w	r0, lr, r5
 800035e:	4290      	cmp	r0, r2
 8000360:	d908      	bls.n	8000374 <__udivmoddi4+0x124>
 8000362:	eb1c 0202 	adds.w	r2, ip, r2
 8000366:	f105 38ff 	add.w	r8, r5, #4294967295
 800036a:	d202      	bcs.n	8000372 <__udivmoddi4+0x122>
 800036c:	4290      	cmp	r0, r2
 800036e:	f200 80cb 	bhi.w	8000508 <__udivmoddi4+0x2b8>
 8000372:	4645      	mov	r5, r8
 8000374:	1a12      	subs	r2, r2, r0
 8000376:	b2a4      	uxth	r4, r4
 8000378:	fbb2 f0f7 	udiv	r0, r2, r7
 800037c:	fb07 2210 	mls	r2, r7, r0, r2
 8000380:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000384:	fb0e fe00 	mul.w	lr, lr, r0
 8000388:	45a6      	cmp	lr, r4
 800038a:	d908      	bls.n	800039e <__udivmoddi4+0x14e>
 800038c:	eb1c 0404 	adds.w	r4, ip, r4
 8000390:	f100 32ff 	add.w	r2, r0, #4294967295
 8000394:	d202      	bcs.n	800039c <__udivmoddi4+0x14c>
 8000396:	45a6      	cmp	lr, r4
 8000398:	f200 80bb 	bhi.w	8000512 <__udivmoddi4+0x2c2>
 800039c:	4610      	mov	r0, r2
 800039e:	eba4 040e 	sub.w	r4, r4, lr
 80003a2:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80003a6:	e79f      	b.n	80002e8 <__udivmoddi4+0x98>
 80003a8:	f1c1 0720 	rsb	r7, r1, #32
 80003ac:	408b      	lsls	r3, r1
 80003ae:	fa22 fc07 	lsr.w	ip, r2, r7
 80003b2:	ea4c 0c03 	orr.w	ip, ip, r3
 80003b6:	fa05 f401 	lsl.w	r4, r5, r1
 80003ba:	fa20 f307 	lsr.w	r3, r0, r7
 80003be:	40fd      	lsrs	r5, r7
 80003c0:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003c4:	4323      	orrs	r3, r4
 80003c6:	fbb5 f8f9 	udiv	r8, r5, r9
 80003ca:	fa1f fe8c 	uxth.w	lr, ip
 80003ce:	fb09 5518 	mls	r5, r9, r8, r5
 80003d2:	0c1c      	lsrs	r4, r3, #16
 80003d4:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003d8:	fb08 f50e 	mul.w	r5, r8, lr
 80003dc:	42a5      	cmp	r5, r4
 80003de:	fa02 f201 	lsl.w	r2, r2, r1
 80003e2:	fa00 f001 	lsl.w	r0, r0, r1
 80003e6:	d90b      	bls.n	8000400 <__udivmoddi4+0x1b0>
 80003e8:	eb1c 0404 	adds.w	r4, ip, r4
 80003ec:	f108 3aff 	add.w	sl, r8, #4294967295
 80003f0:	f080 8088 	bcs.w	8000504 <__udivmoddi4+0x2b4>
 80003f4:	42a5      	cmp	r5, r4
 80003f6:	f240 8085 	bls.w	8000504 <__udivmoddi4+0x2b4>
 80003fa:	f1a8 0802 	sub.w	r8, r8, #2
 80003fe:	4464      	add	r4, ip
 8000400:	1b64      	subs	r4, r4, r5
 8000402:	b29d      	uxth	r5, r3
 8000404:	fbb4 f3f9 	udiv	r3, r4, r9
 8000408:	fb09 4413 	mls	r4, r9, r3, r4
 800040c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000410:	fb03 fe0e 	mul.w	lr, r3, lr
 8000414:	45a6      	cmp	lr, r4
 8000416:	d908      	bls.n	800042a <__udivmoddi4+0x1da>
 8000418:	eb1c 0404 	adds.w	r4, ip, r4
 800041c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000420:	d26c      	bcs.n	80004fc <__udivmoddi4+0x2ac>
 8000422:	45a6      	cmp	lr, r4
 8000424:	d96a      	bls.n	80004fc <__udivmoddi4+0x2ac>
 8000426:	3b02      	subs	r3, #2
 8000428:	4464      	add	r4, ip
 800042a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800042e:	fba3 9502 	umull	r9, r5, r3, r2
 8000432:	eba4 040e 	sub.w	r4, r4, lr
 8000436:	42ac      	cmp	r4, r5
 8000438:	46c8      	mov	r8, r9
 800043a:	46ae      	mov	lr, r5
 800043c:	d356      	bcc.n	80004ec <__udivmoddi4+0x29c>
 800043e:	d053      	beq.n	80004e8 <__udivmoddi4+0x298>
 8000440:	b156      	cbz	r6, 8000458 <__udivmoddi4+0x208>
 8000442:	ebb0 0208 	subs.w	r2, r0, r8
 8000446:	eb64 040e 	sbc.w	r4, r4, lr
 800044a:	fa04 f707 	lsl.w	r7, r4, r7
 800044e:	40ca      	lsrs	r2, r1
 8000450:	40cc      	lsrs	r4, r1
 8000452:	4317      	orrs	r7, r2
 8000454:	e9c6 7400 	strd	r7, r4, [r6]
 8000458:	4618      	mov	r0, r3
 800045a:	2100      	movs	r1, #0
 800045c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000460:	f1c3 0120 	rsb	r1, r3, #32
 8000464:	fa02 fc03 	lsl.w	ip, r2, r3
 8000468:	fa20 f201 	lsr.w	r2, r0, r1
 800046c:	fa25 f101 	lsr.w	r1, r5, r1
 8000470:	409d      	lsls	r5, r3
 8000472:	432a      	orrs	r2, r5
 8000474:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000478:	fa1f fe8c 	uxth.w	lr, ip
 800047c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000480:	fb07 1510 	mls	r5, r7, r0, r1
 8000484:	0c11      	lsrs	r1, r2, #16
 8000486:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800048a:	fb00 f50e 	mul.w	r5, r0, lr
 800048e:	428d      	cmp	r5, r1
 8000490:	fa04 f403 	lsl.w	r4, r4, r3
 8000494:	d908      	bls.n	80004a8 <__udivmoddi4+0x258>
 8000496:	eb1c 0101 	adds.w	r1, ip, r1
 800049a:	f100 38ff 	add.w	r8, r0, #4294967295
 800049e:	d22f      	bcs.n	8000500 <__udivmoddi4+0x2b0>
 80004a0:	428d      	cmp	r5, r1
 80004a2:	d92d      	bls.n	8000500 <__udivmoddi4+0x2b0>
 80004a4:	3802      	subs	r0, #2
 80004a6:	4461      	add	r1, ip
 80004a8:	1b49      	subs	r1, r1, r5
 80004aa:	b292      	uxth	r2, r2
 80004ac:	fbb1 f5f7 	udiv	r5, r1, r7
 80004b0:	fb07 1115 	mls	r1, r7, r5, r1
 80004b4:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004b8:	fb05 f10e 	mul.w	r1, r5, lr
 80004bc:	4291      	cmp	r1, r2
 80004be:	d908      	bls.n	80004d2 <__udivmoddi4+0x282>
 80004c0:	eb1c 0202 	adds.w	r2, ip, r2
 80004c4:	f105 38ff 	add.w	r8, r5, #4294967295
 80004c8:	d216      	bcs.n	80004f8 <__udivmoddi4+0x2a8>
 80004ca:	4291      	cmp	r1, r2
 80004cc:	d914      	bls.n	80004f8 <__udivmoddi4+0x2a8>
 80004ce:	3d02      	subs	r5, #2
 80004d0:	4462      	add	r2, ip
 80004d2:	1a52      	subs	r2, r2, r1
 80004d4:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004d8:	e738      	b.n	800034c <__udivmoddi4+0xfc>
 80004da:	4631      	mov	r1, r6
 80004dc:	4630      	mov	r0, r6
 80004de:	e708      	b.n	80002f2 <__udivmoddi4+0xa2>
 80004e0:	4639      	mov	r1, r7
 80004e2:	e6e6      	b.n	80002b2 <__udivmoddi4+0x62>
 80004e4:	4610      	mov	r0, r2
 80004e6:	e6fb      	b.n	80002e0 <__udivmoddi4+0x90>
 80004e8:	4548      	cmp	r0, r9
 80004ea:	d2a9      	bcs.n	8000440 <__udivmoddi4+0x1f0>
 80004ec:	ebb9 0802 	subs.w	r8, r9, r2
 80004f0:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004f4:	3b01      	subs	r3, #1
 80004f6:	e7a3      	b.n	8000440 <__udivmoddi4+0x1f0>
 80004f8:	4645      	mov	r5, r8
 80004fa:	e7ea      	b.n	80004d2 <__udivmoddi4+0x282>
 80004fc:	462b      	mov	r3, r5
 80004fe:	e794      	b.n	800042a <__udivmoddi4+0x1da>
 8000500:	4640      	mov	r0, r8
 8000502:	e7d1      	b.n	80004a8 <__udivmoddi4+0x258>
 8000504:	46d0      	mov	r8, sl
 8000506:	e77b      	b.n	8000400 <__udivmoddi4+0x1b0>
 8000508:	3d02      	subs	r5, #2
 800050a:	4462      	add	r2, ip
 800050c:	e732      	b.n	8000374 <__udivmoddi4+0x124>
 800050e:	4608      	mov	r0, r1
 8000510:	e70a      	b.n	8000328 <__udivmoddi4+0xd8>
 8000512:	4464      	add	r4, ip
 8000514:	3802      	subs	r0, #2
 8000516:	e742      	b.n	800039e <__udivmoddi4+0x14e>

08000518 <__aeabi_idiv0>:
 8000518:	4770      	bx	lr
 800051a:	bf00      	nop

0800051c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800051c:	b580      	push	{r7, lr}
 800051e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000520:	f000 fc0d 	bl	8000d3e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000524:	f000 f856 	bl	80005d4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000528:	f000 f946 	bl	80007b8 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 800052c:	f000 f8e4 	bl	80006f8 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000530:	f000 f912 	bl	8000758 <MX_USB_OTG_FS_PCD_Init>
  MX_TIM13_Init();
 8000534:	f000 f8bc 	bl	80006b0 <MX_TIM13_Init>
  /* USER CODE BEGIN 2 */

  // Start timer
  HAL_TIM_Base_Start_IT(&htim13);
 8000538:	4820      	ldr	r0, [pc, #128]	; (80005bc <main+0xa0>)
 800053a:	f002 fa21 	bl	8002980 <HAL_TIM_Base_Start_IT>
  HAL_UART_Transmit_IT(&huart3, "Main function\n\r" , strlen("Main function\n\r"));
 800053e:	220f      	movs	r2, #15
 8000540:	491f      	ldr	r1, [pc, #124]	; (80005c0 <main+0xa4>)
 8000542:	4820      	ldr	r0, [pc, #128]	; (80005c4 <main+0xa8>)
 8000544:	f002 fce8 	bl	8002f18 <HAL_UART_Transmit_IT>
  while (1)
  {
	  //HAL_UART_Receive(&huart3, rx_buffer, 10, 1000000); /*Blocking fucnction for UART RX*/
	                                                       /* It stays blocked untill 10 bytes are recieved*/
	  //while(1);
	  if(BlinkSpeed == 0)
 8000548:	4b1f      	ldr	r3, [pc, #124]	; (80005c8 <main+0xac>)
 800054a:	781b      	ldrb	r3, [r3, #0]
 800054c:	2b00      	cmp	r3, #0
 800054e:	d10a      	bne.n	8000566 <main+0x4a>
	  {
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, 1);
 8000550:	2201      	movs	r2, #1
 8000552:	2101      	movs	r1, #1
 8000554:	481d      	ldr	r0, [pc, #116]	; (80005cc <main+0xb0>)
 8000556:	f000 ffcb 	bl	80014f0 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, 0);
 800055a:	2200      	movs	r2, #0
 800055c:	2180      	movs	r1, #128	; 0x80
 800055e:	481b      	ldr	r0, [pc, #108]	; (80005cc <main+0xb0>)
 8000560:	f000 ffc6 	bl	80014f0 <HAL_GPIO_WritePin>
 8000564:	e021      	b.n	80005aa <main+0x8e>
		  //HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, 0);
		  //HAL_UART_Transmit(&huart3, (uint8_t *)"Hello Green\n", 15, 1000);
		  //HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0);//green
		  //HAL_Delay(500);/*comment*/
	  }
	  else if(BlinkSpeed == 1)
 8000566:	4b18      	ldr	r3, [pc, #96]	; (80005c8 <main+0xac>)
 8000568:	781b      	ldrb	r3, [r3, #0]
 800056a:	2b01      	cmp	r3, #1
 800056c:	d10a      	bne.n	8000584 <main+0x68>
	  {
		  //HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_7);//blue
		  //HAL_Delay(100);
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, 0);
 800056e:	2200      	movs	r2, #0
 8000570:	2101      	movs	r1, #1
 8000572:	4816      	ldr	r0, [pc, #88]	; (80005cc <main+0xb0>)
 8000574:	f000 ffbc 	bl	80014f0 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, 1);
 8000578:	2201      	movs	r2, #1
 800057a:	2180      	movs	r1, #128	; 0x80
 800057c:	4813      	ldr	r0, [pc, #76]	; (80005cc <main+0xb0>)
 800057e:	f000 ffb7 	bl	80014f0 <HAL_GPIO_WritePin>
 8000582:	e012      	b.n	80005aa <main+0x8e>
		  //HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, 0);
		  //HAL_UART_Transmit(&huart3, (uint8_t *)"Hello Blue\n", 15, 1000);
	  }
	  else if(BlinkSpeed == 2)
 8000584:	4b10      	ldr	r3, [pc, #64]	; (80005c8 <main+0xac>)
 8000586:	781b      	ldrb	r3, [r3, #0]
 8000588:	2b02      	cmp	r3, #2
 800058a:	d10e      	bne.n	80005aa <main+0x8e>
	  {
		  //HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14);//red
		  //HAL_Delay(50);
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, 0);
 800058c:	2200      	movs	r2, #0
 800058e:	2101      	movs	r1, #1
 8000590:	480e      	ldr	r0, [pc, #56]	; (80005cc <main+0xb0>)
 8000592:	f000 ffad 	bl	80014f0 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, 0);
 8000596:	2200      	movs	r2, #0
 8000598:	2180      	movs	r1, #128	; 0x80
 800059a:	480c      	ldr	r0, [pc, #48]	; (80005cc <main+0xb0>)
 800059c:	f000 ffa8 	bl	80014f0 <HAL_GPIO_WritePin>
		  //HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, 0);
		  //HAL_UART_Transmit(&huart3, (uint8_t *)"Hello Red\n", 15, 1000);
		  //test
		  HAL_UART_Receive_IT(&huart3, rx_buffer, 10);
 80005a0:	220a      	movs	r2, #10
 80005a2:	490b      	ldr	r1, [pc, #44]	; (80005d0 <main+0xb4>)
 80005a4:	4807      	ldr	r0, [pc, #28]	; (80005c4 <main+0xa8>)
 80005a6:	f002 fd15 	bl	8002fd4 <HAL_UART_Receive_IT>
	  }
	  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14);//red
 80005aa:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80005ae:	4807      	ldr	r0, [pc, #28]	; (80005cc <main+0xb0>)
 80005b0:	f000 ffb7 	bl	8001522 <HAL_GPIO_TogglePin>
	  HAL_Delay(50);
 80005b4:	2032      	movs	r0, #50	; 0x32
 80005b6:	f000 fc1f 	bl	8000df8 <HAL_Delay>
	  if(BlinkSpeed == 0)
 80005ba:	e7c5      	b.n	8000548 <main+0x2c>
 80005bc:	20000028 	.word	0x20000028
 80005c0:	08004c24 	.word	0x08004c24
 80005c4:	20000074 	.word	0x20000074
 80005c8:	20000604 	.word	0x20000604
 80005cc:	40020400 	.word	0x40020400
 80005d0:	20000608 	.word	0x20000608

080005d4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005d4:	b580      	push	{r7, lr}
 80005d6:	b094      	sub	sp, #80	; 0x50
 80005d8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005da:	f107 0320 	add.w	r3, r7, #32
 80005de:	2230      	movs	r2, #48	; 0x30
 80005e0:	2100      	movs	r1, #0
 80005e2:	4618      	mov	r0, r3
 80005e4:	f004 fae6 	bl	8004bb4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005e8:	f107 030c 	add.w	r3, r7, #12
 80005ec:	2200      	movs	r2, #0
 80005ee:	601a      	str	r2, [r3, #0]
 80005f0:	605a      	str	r2, [r3, #4]
 80005f2:	609a      	str	r2, [r3, #8]
 80005f4:	60da      	str	r2, [r3, #12]
 80005f6:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80005f8:	f001 f8f6 	bl	80017e8 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005fc:	4b2a      	ldr	r3, [pc, #168]	; (80006a8 <SystemClock_Config+0xd4>)
 80005fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000600:	4a29      	ldr	r2, [pc, #164]	; (80006a8 <SystemClock_Config+0xd4>)
 8000602:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000606:	6413      	str	r3, [r2, #64]	; 0x40
 8000608:	4b27      	ldr	r3, [pc, #156]	; (80006a8 <SystemClock_Config+0xd4>)
 800060a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800060c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000610:	60bb      	str	r3, [r7, #8]
 8000612:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000614:	4b25      	ldr	r3, [pc, #148]	; (80006ac <SystemClock_Config+0xd8>)
 8000616:	681b      	ldr	r3, [r3, #0]
 8000618:	4a24      	ldr	r2, [pc, #144]	; (80006ac <SystemClock_Config+0xd8>)
 800061a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800061e:	6013      	str	r3, [r2, #0]
 8000620:	4b22      	ldr	r3, [pc, #136]	; (80006ac <SystemClock_Config+0xd8>)
 8000622:	681b      	ldr	r3, [r3, #0]
 8000624:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000628:	607b      	str	r3, [r7, #4]
 800062a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800062c:	2301      	movs	r3, #1
 800062e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000630:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000634:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000636:	2302      	movs	r3, #2
 8000638:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800063a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800063e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000640:	2304      	movs	r3, #4
 8000642:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 216;
 8000644:	23d8      	movs	r3, #216	; 0xd8
 8000646:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000648:	2302      	movs	r3, #2
 800064a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 9;
 800064c:	2309      	movs	r3, #9
 800064e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000650:	f107 0320 	add.w	r3, r7, #32
 8000654:	4618      	mov	r0, r3
 8000656:	f001 f927 	bl	80018a8 <HAL_RCC_OscConfig>
 800065a:	4603      	mov	r3, r0
 800065c:	2b00      	cmp	r3, #0
 800065e:	d001      	beq.n	8000664 <SystemClock_Config+0x90>
  {
    Error_Handler();
 8000660:	f000 f9c2 	bl	80009e8 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000664:	f001 f8d0 	bl	8001808 <HAL_PWREx_EnableOverDrive>
 8000668:	4603      	mov	r3, r0
 800066a:	2b00      	cmp	r3, #0
 800066c:	d001      	beq.n	8000672 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 800066e:	f000 f9bb 	bl	80009e8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000672:	230f      	movs	r3, #15
 8000674:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000676:	2302      	movs	r3, #2
 8000678:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800067a:	2300      	movs	r3, #0
 800067c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800067e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000682:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000684:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000688:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 800068a:	f107 030c 	add.w	r3, r7, #12
 800068e:	2107      	movs	r1, #7
 8000690:	4618      	mov	r0, r3
 8000692:	f001 fbad 	bl	8001df0 <HAL_RCC_ClockConfig>
 8000696:	4603      	mov	r3, r0
 8000698:	2b00      	cmp	r3, #0
 800069a:	d001      	beq.n	80006a0 <SystemClock_Config+0xcc>
  {
    Error_Handler();
 800069c:	f000 f9a4 	bl	80009e8 <Error_Handler>
  }
}
 80006a0:	bf00      	nop
 80006a2:	3750      	adds	r7, #80	; 0x50
 80006a4:	46bd      	mov	sp, r7
 80006a6:	bd80      	pop	{r7, pc}
 80006a8:	40023800 	.word	0x40023800
 80006ac:	40007000 	.word	0x40007000

080006b0 <MX_TIM13_Init>:
  * @brief TIM13 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM13_Init(void)
{
 80006b0:	b580      	push	{r7, lr}
 80006b2:	af00      	add	r7, sp, #0
  /* USER CODE END TIM13_Init 0 */

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 80006b4:	4b0e      	ldr	r3, [pc, #56]	; (80006f0 <MX_TIM13_Init+0x40>)
 80006b6:	4a0f      	ldr	r2, [pc, #60]	; (80006f4 <MX_TIM13_Init+0x44>)
 80006b8:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 108-1;
 80006ba:	4b0d      	ldr	r3, [pc, #52]	; (80006f0 <MX_TIM13_Init+0x40>)
 80006bc:	226b      	movs	r2, #107	; 0x6b
 80006be:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 80006c0:	4b0b      	ldr	r3, [pc, #44]	; (80006f0 <MX_TIM13_Init+0x40>)
 80006c2:	2200      	movs	r2, #0
 80006c4:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 10000-1;
 80006c6:	4b0a      	ldr	r3, [pc, #40]	; (80006f0 <MX_TIM13_Init+0x40>)
 80006c8:	f242 720f 	movw	r2, #9999	; 0x270f
 80006cc:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80006ce:	4b08      	ldr	r3, [pc, #32]	; (80006f0 <MX_TIM13_Init+0x40>)
 80006d0:	2200      	movs	r2, #0
 80006d2:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80006d4:	4b06      	ldr	r3, [pc, #24]	; (80006f0 <MX_TIM13_Init+0x40>)
 80006d6:	2200      	movs	r2, #0
 80006d8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 80006da:	4805      	ldr	r0, [pc, #20]	; (80006f0 <MX_TIM13_Init+0x40>)
 80006dc:	f002 f8f8 	bl	80028d0 <HAL_TIM_Base_Init>
 80006e0:	4603      	mov	r3, r0
 80006e2:	2b00      	cmp	r3, #0
 80006e4:	d001      	beq.n	80006ea <MX_TIM13_Init+0x3a>
  {
    Error_Handler();
 80006e6:	f000 f97f 	bl	80009e8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */

}
 80006ea:	bf00      	nop
 80006ec:	bd80      	pop	{r7, pc}
 80006ee:	bf00      	nop
 80006f0:	20000028 	.word	0x20000028
 80006f4:	40001c00 	.word	0x40001c00

080006f8 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80006f8:	b580      	push	{r7, lr}
 80006fa:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80006fc:	4b14      	ldr	r3, [pc, #80]	; (8000750 <MX_USART3_UART_Init+0x58>)
 80006fe:	4a15      	ldr	r2, [pc, #84]	; (8000754 <MX_USART3_UART_Init+0x5c>)
 8000700:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000702:	4b13      	ldr	r3, [pc, #76]	; (8000750 <MX_USART3_UART_Init+0x58>)
 8000704:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000708:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800070a:	4b11      	ldr	r3, [pc, #68]	; (8000750 <MX_USART3_UART_Init+0x58>)
 800070c:	2200      	movs	r2, #0
 800070e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000710:	4b0f      	ldr	r3, [pc, #60]	; (8000750 <MX_USART3_UART_Init+0x58>)
 8000712:	2200      	movs	r2, #0
 8000714:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000716:	4b0e      	ldr	r3, [pc, #56]	; (8000750 <MX_USART3_UART_Init+0x58>)
 8000718:	2200      	movs	r2, #0
 800071a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800071c:	4b0c      	ldr	r3, [pc, #48]	; (8000750 <MX_USART3_UART_Init+0x58>)
 800071e:	220c      	movs	r2, #12
 8000720:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000722:	4b0b      	ldr	r3, [pc, #44]	; (8000750 <MX_USART3_UART_Init+0x58>)
 8000724:	2200      	movs	r2, #0
 8000726:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000728:	4b09      	ldr	r3, [pc, #36]	; (8000750 <MX_USART3_UART_Init+0x58>)
 800072a:	2200      	movs	r2, #0
 800072c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800072e:	4b08      	ldr	r3, [pc, #32]	; (8000750 <MX_USART3_UART_Init+0x58>)
 8000730:	2200      	movs	r2, #0
 8000732:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000734:	4b06      	ldr	r3, [pc, #24]	; (8000750 <MX_USART3_UART_Init+0x58>)
 8000736:	2200      	movs	r2, #0
 8000738:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800073a:	4805      	ldr	r0, [pc, #20]	; (8000750 <MX_USART3_UART_Init+0x58>)
 800073c:	f002 fb9e 	bl	8002e7c <HAL_UART_Init>
 8000740:	4603      	mov	r3, r0
 8000742:	2b00      	cmp	r3, #0
 8000744:	d001      	beq.n	800074a <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000746:	f000 f94f 	bl	80009e8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800074a:	bf00      	nop
 800074c:	bd80      	pop	{r7, pc}
 800074e:	bf00      	nop
 8000750:	20000074 	.word	0x20000074
 8000754:	40004800 	.word	0x40004800

08000758 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000758:	b580      	push	{r7, lr}
 800075a:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800075c:	4b15      	ldr	r3, [pc, #84]	; (80007b4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800075e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000762:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8000764:	4b13      	ldr	r3, [pc, #76]	; (80007b4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000766:	2206      	movs	r2, #6
 8000768:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800076a:	4b12      	ldr	r3, [pc, #72]	; (80007b4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800076c:	2202      	movs	r2, #2
 800076e:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000770:	4b10      	ldr	r3, [pc, #64]	; (80007b4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000772:	2200      	movs	r2, #0
 8000774:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000776:	4b0f      	ldr	r3, [pc, #60]	; (80007b4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000778:	2202      	movs	r2, #2
 800077a:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 800077c:	4b0d      	ldr	r3, [pc, #52]	; (80007b4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800077e:	2201      	movs	r2, #1
 8000780:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000782:	4b0c      	ldr	r3, [pc, #48]	; (80007b4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000784:	2200      	movs	r2, #0
 8000786:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000788:	4b0a      	ldr	r3, [pc, #40]	; (80007b4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800078a:	2200      	movs	r2, #0
 800078c:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 800078e:	4b09      	ldr	r3, [pc, #36]	; (80007b4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000790:	2201      	movs	r2, #1
 8000792:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000794:	4b07      	ldr	r3, [pc, #28]	; (80007b4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000796:	2201      	movs	r2, #1
 8000798:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800079a:	4b06      	ldr	r3, [pc, #24]	; (80007b4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800079c:	2200      	movs	r2, #0
 800079e:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80007a0:	4804      	ldr	r0, [pc, #16]	; (80007b4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80007a2:	f000 fed8 	bl	8001556 <HAL_PCD_Init>
 80007a6:	4603      	mov	r3, r0
 80007a8:	2b00      	cmp	r3, #0
 80007aa:	d001      	beq.n	80007b0 <MX_USB_OTG_FS_PCD_Init+0x58>
  {
    Error_Handler();
 80007ac:	f000 f91c 	bl	80009e8 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 80007b0:	bf00      	nop
 80007b2:	bd80      	pop	{r7, pc}
 80007b4:	200000fc 	.word	0x200000fc

080007b8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007b8:	b580      	push	{r7, lr}
 80007ba:	b08c      	sub	sp, #48	; 0x30
 80007bc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007be:	f107 031c 	add.w	r3, r7, #28
 80007c2:	2200      	movs	r2, #0
 80007c4:	601a      	str	r2, [r3, #0]
 80007c6:	605a      	str	r2, [r3, #4]
 80007c8:	609a      	str	r2, [r3, #8]
 80007ca:	60da      	str	r2, [r3, #12]
 80007cc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007ce:	4b47      	ldr	r3, [pc, #284]	; (80008ec <MX_GPIO_Init+0x134>)
 80007d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007d2:	4a46      	ldr	r2, [pc, #280]	; (80008ec <MX_GPIO_Init+0x134>)
 80007d4:	f043 0304 	orr.w	r3, r3, #4
 80007d8:	6313      	str	r3, [r2, #48]	; 0x30
 80007da:	4b44      	ldr	r3, [pc, #272]	; (80008ec <MX_GPIO_Init+0x134>)
 80007dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007de:	f003 0304 	and.w	r3, r3, #4
 80007e2:	61bb      	str	r3, [r7, #24]
 80007e4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007e6:	4b41      	ldr	r3, [pc, #260]	; (80008ec <MX_GPIO_Init+0x134>)
 80007e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ea:	4a40      	ldr	r2, [pc, #256]	; (80008ec <MX_GPIO_Init+0x134>)
 80007ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80007f0:	6313      	str	r3, [r2, #48]	; 0x30
 80007f2:	4b3e      	ldr	r3, [pc, #248]	; (80008ec <MX_GPIO_Init+0x134>)
 80007f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80007fa:	617b      	str	r3, [r7, #20]
 80007fc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007fe:	4b3b      	ldr	r3, [pc, #236]	; (80008ec <MX_GPIO_Init+0x134>)
 8000800:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000802:	4a3a      	ldr	r2, [pc, #232]	; (80008ec <MX_GPIO_Init+0x134>)
 8000804:	f043 0302 	orr.w	r3, r3, #2
 8000808:	6313      	str	r3, [r2, #48]	; 0x30
 800080a:	4b38      	ldr	r3, [pc, #224]	; (80008ec <MX_GPIO_Init+0x134>)
 800080c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800080e:	f003 0302 	and.w	r3, r3, #2
 8000812:	613b      	str	r3, [r7, #16]
 8000814:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000816:	4b35      	ldr	r3, [pc, #212]	; (80008ec <MX_GPIO_Init+0x134>)
 8000818:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800081a:	4a34      	ldr	r2, [pc, #208]	; (80008ec <MX_GPIO_Init+0x134>)
 800081c:	f043 0308 	orr.w	r3, r3, #8
 8000820:	6313      	str	r3, [r2, #48]	; 0x30
 8000822:	4b32      	ldr	r3, [pc, #200]	; (80008ec <MX_GPIO_Init+0x134>)
 8000824:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000826:	f003 0308 	and.w	r3, r3, #8
 800082a:	60fb      	str	r3, [r7, #12]
 800082c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800082e:	4b2f      	ldr	r3, [pc, #188]	; (80008ec <MX_GPIO_Init+0x134>)
 8000830:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000832:	4a2e      	ldr	r2, [pc, #184]	; (80008ec <MX_GPIO_Init+0x134>)
 8000834:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000838:	6313      	str	r3, [r2, #48]	; 0x30
 800083a:	4b2c      	ldr	r3, [pc, #176]	; (80008ec <MX_GPIO_Init+0x134>)
 800083c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800083e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000842:	60bb      	str	r3, [r7, #8]
 8000844:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000846:	4b29      	ldr	r3, [pc, #164]	; (80008ec <MX_GPIO_Init+0x134>)
 8000848:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800084a:	4a28      	ldr	r2, [pc, #160]	; (80008ec <MX_GPIO_Init+0x134>)
 800084c:	f043 0301 	orr.w	r3, r3, #1
 8000850:	6313      	str	r3, [r2, #48]	; 0x30
 8000852:	4b26      	ldr	r3, [pc, #152]	; (80008ec <MX_GPIO_Init+0x134>)
 8000854:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000856:	f003 0301 	and.w	r3, r3, #1
 800085a:	607b      	str	r3, [r7, #4]
 800085c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 800085e:	2200      	movs	r2, #0
 8000860:	f244 0181 	movw	r1, #16513	; 0x4081
 8000864:	4822      	ldr	r0, [pc, #136]	; (80008f0 <MX_GPIO_Init+0x138>)
 8000866:	f000 fe43 	bl	80014f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 800086a:	2200      	movs	r2, #0
 800086c:	2140      	movs	r1, #64	; 0x40
 800086e:	4821      	ldr	r0, [pc, #132]	; (80008f4 <MX_GPIO_Init+0x13c>)
 8000870:	f000 fe3e 	bl	80014f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000874:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000878:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800087a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800087e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000880:	2300      	movs	r3, #0
 8000882:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000884:	f107 031c 	add.w	r3, r7, #28
 8000888:	4619      	mov	r1, r3
 800088a:	481b      	ldr	r0, [pc, #108]	; (80008f8 <MX_GPIO_Init+0x140>)
 800088c:	f000 fc7c 	bl	8001188 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000890:	f244 0381 	movw	r3, #16513	; 0x4081
 8000894:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000896:	2301      	movs	r3, #1
 8000898:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800089a:	2300      	movs	r3, #0
 800089c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800089e:	2300      	movs	r3, #0
 80008a0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008a2:	f107 031c 	add.w	r3, r7, #28
 80008a6:	4619      	mov	r1, r3
 80008a8:	4811      	ldr	r0, [pc, #68]	; (80008f0 <MX_GPIO_Init+0x138>)
 80008aa:	f000 fc6d 	bl	8001188 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80008ae:	2340      	movs	r3, #64	; 0x40
 80008b0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008b2:	2301      	movs	r3, #1
 80008b4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008b6:	2300      	movs	r3, #0
 80008b8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008ba:	2300      	movs	r3, #0
 80008bc:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80008be:	f107 031c 	add.w	r3, r7, #28
 80008c2:	4619      	mov	r1, r3
 80008c4:	480b      	ldr	r0, [pc, #44]	; (80008f4 <MX_GPIO_Init+0x13c>)
 80008c6:	f000 fc5f 	bl	8001188 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80008ca:	2380      	movs	r3, #128	; 0x80
 80008cc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008ce:	2300      	movs	r3, #0
 80008d0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008d2:	2300      	movs	r3, #0
 80008d4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80008d6:	f107 031c 	add.w	r3, r7, #28
 80008da:	4619      	mov	r1, r3
 80008dc:	4805      	ldr	r0, [pc, #20]	; (80008f4 <MX_GPIO_Init+0x13c>)
 80008de:	f000 fc53 	bl	8001188 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80008e2:	bf00      	nop
 80008e4:	3730      	adds	r7, #48	; 0x30
 80008e6:	46bd      	mov	sp, r7
 80008e8:	bd80      	pop	{r7, pc}
 80008ea:	bf00      	nop
 80008ec:	40023800 	.word	0x40023800
 80008f0:	40020400 	.word	0x40020400
 80008f4:	40021800 	.word	0x40021800
 80008f8:	40020800 	.word	0x40020800

080008fc <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
/* Timer13 interupt that fires every 5 ms to check push button press and handle debouncing*/
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80008fc:	b580      	push	{r7, lr}
 80008fe:	b082      	sub	sp, #8
 8000900:	af00      	add	r7, sp, #0
 8000902:	6078      	str	r0, [r7, #4]
	if (htim == &htim13 )
 8000904:	687b      	ldr	r3, [r7, #4]
 8000906:	4a23      	ldr	r2, [pc, #140]	; (8000994 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8000908:	4293      	cmp	r3, r2
 800090a:	d13e      	bne.n	800098a <HAL_TIM_PeriodElapsedCallback+0x8e>
	{
		if (!debounceRequest)
 800090c:	4b22      	ldr	r3, [pc, #136]	; (8000998 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 800090e:	781b      	ldrb	r3, [r3, #0]
 8000910:	2b00      	cmp	r3, #0
 8000912:	d11e      	bne.n	8000952 <HAL_TIM_PeriodElapsedCallback+0x56>
		{
			if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13) == 1)
 8000914:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000918:	4820      	ldr	r0, [pc, #128]	; (800099c <HAL_TIM_PeriodElapsedCallback+0xa0>)
 800091a:	f000 fdd1 	bl	80014c0 <HAL_GPIO_ReadPin>
 800091e:	4603      	mov	r3, r0
 8000920:	2b01      	cmp	r3, #1
 8000922:	d132      	bne.n	800098a <HAL_TIM_PeriodElapsedCallback+0x8e>
			{
				HAL_UART_Transmit_IT(&huart3, "Button Pressed\n\r" , strlen("Button Pressed\n\r"));
 8000924:	2210      	movs	r2, #16
 8000926:	491e      	ldr	r1, [pc, #120]	; (80009a0 <HAL_TIM_PeriodElapsedCallback+0xa4>)
 8000928:	481e      	ldr	r0, [pc, #120]	; (80009a4 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 800092a:	f002 faf5 	bl	8002f18 <HAL_UART_Transmit_IT>
				if(BlinkSpeed == 2)
 800092e:	4b1e      	ldr	r3, [pc, #120]	; (80009a8 <HAL_TIM_PeriodElapsedCallback+0xac>)
 8000930:	781b      	ldrb	r3, [r3, #0]
 8000932:	2b02      	cmp	r3, #2
 8000934:	d103      	bne.n	800093e <HAL_TIM_PeriodElapsedCallback+0x42>
				{
					BlinkSpeed = 0;
 8000936:	4b1c      	ldr	r3, [pc, #112]	; (80009a8 <HAL_TIM_PeriodElapsedCallback+0xac>)
 8000938:	2200      	movs	r2, #0
 800093a:	701a      	strb	r2, [r3, #0]
 800093c:	e005      	b.n	800094a <HAL_TIM_PeriodElapsedCallback+0x4e>
				}
				else
				{
					BlinkSpeed ++;
 800093e:	4b1a      	ldr	r3, [pc, #104]	; (80009a8 <HAL_TIM_PeriodElapsedCallback+0xac>)
 8000940:	781b      	ldrb	r3, [r3, #0]
 8000942:	3301      	adds	r3, #1
 8000944:	b2da      	uxtb	r2, r3
 8000946:	4b18      	ldr	r3, [pc, #96]	; (80009a8 <HAL_TIM_PeriodElapsedCallback+0xac>)
 8000948:	701a      	strb	r2, [r3, #0]

				}
				debounceRequest = 1;
 800094a:	4b13      	ldr	r3, [pc, #76]	; (8000998 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 800094c:	2201      	movs	r2, #1
 800094e:	701a      	strb	r2, [r3, #0]
					debounceRequest = 0;
				}
			}
		}
	}
}
 8000950:	e01b      	b.n	800098a <HAL_TIM_PeriodElapsedCallback+0x8e>
			if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13) == 1)
 8000952:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000956:	4811      	ldr	r0, [pc, #68]	; (800099c <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8000958:	f000 fdb2 	bl	80014c0 <HAL_GPIO_ReadPin>
 800095c:	4603      	mov	r3, r0
 800095e:	2b01      	cmp	r3, #1
 8000960:	d103      	bne.n	800096a <HAL_TIM_PeriodElapsedCallback+0x6e>
				debounceCount = 0;
 8000962:	4b12      	ldr	r3, [pc, #72]	; (80009ac <HAL_TIM_PeriodElapsedCallback+0xb0>)
 8000964:	2200      	movs	r2, #0
 8000966:	701a      	strb	r2, [r3, #0]
}
 8000968:	e00f      	b.n	800098a <HAL_TIM_PeriodElapsedCallback+0x8e>
				debounceCount ++;
 800096a:	4b10      	ldr	r3, [pc, #64]	; (80009ac <HAL_TIM_PeriodElapsedCallback+0xb0>)
 800096c:	781b      	ldrb	r3, [r3, #0]
 800096e:	3301      	adds	r3, #1
 8000970:	b2da      	uxtb	r2, r3
 8000972:	4b0e      	ldr	r3, [pc, #56]	; (80009ac <HAL_TIM_PeriodElapsedCallback+0xb0>)
 8000974:	701a      	strb	r2, [r3, #0]
				if (debounceCount == 10)
 8000976:	4b0d      	ldr	r3, [pc, #52]	; (80009ac <HAL_TIM_PeriodElapsedCallback+0xb0>)
 8000978:	781b      	ldrb	r3, [r3, #0]
 800097a:	2b0a      	cmp	r3, #10
 800097c:	d105      	bne.n	800098a <HAL_TIM_PeriodElapsedCallback+0x8e>
					debounceCount = 0;
 800097e:	4b0b      	ldr	r3, [pc, #44]	; (80009ac <HAL_TIM_PeriodElapsedCallback+0xb0>)
 8000980:	2200      	movs	r2, #0
 8000982:	701a      	strb	r2, [r3, #0]
					debounceRequest = 0;
 8000984:	4b04      	ldr	r3, [pc, #16]	; (8000998 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 8000986:	2200      	movs	r2, #0
 8000988:	701a      	strb	r2, [r3, #0]
}
 800098a:	bf00      	nop
 800098c:	3708      	adds	r7, #8
 800098e:	46bd      	mov	sp, r7
 8000990:	bd80      	pop	{r7, pc}
 8000992:	bf00      	nop
 8000994:	20000028 	.word	0x20000028
 8000998:	20000605 	.word	0x20000605
 800099c:	40020800 	.word	0x40020800
 80009a0:	08004c34 	.word	0x08004c34
 80009a4:	20000074 	.word	0x20000074
 80009a8:	20000604 	.word	0x20000604
 80009ac:	20000606 	.word	0x20000606

080009b0 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80009b0:	b480      	push	{r7}
 80009b2:	b083      	sub	sp, #12
 80009b4:	af00      	add	r7, sp, #0
 80009b6:	6078      	str	r0, [r7, #4]

}
 80009b8:	bf00      	nop
 80009ba:	370c      	adds	r7, #12
 80009bc:	46bd      	mov	sp, r7
 80009be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c2:	4770      	bx	lr

080009c4 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80009c4:	b580      	push	{r7, lr}
 80009c6:	b082      	sub	sp, #8
 80009c8:	af00      	add	r7, sp, #0
 80009ca:	6078      	str	r0, [r7, #4]
   HAL_UART_Transmit_IT(&huart3, "\n\rUART Recieved\n\r" , strlen("\n\rUART Recieved\n\r"));
 80009cc:	2211      	movs	r2, #17
 80009ce:	4904      	ldr	r1, [pc, #16]	; (80009e0 <HAL_UART_RxCpltCallback+0x1c>)
 80009d0:	4804      	ldr	r0, [pc, #16]	; (80009e4 <HAL_UART_RxCpltCallback+0x20>)
 80009d2:	f002 faa1 	bl	8002f18 <HAL_UART_Transmit_IT>
}
 80009d6:	bf00      	nop
 80009d8:	3708      	adds	r7, #8
 80009da:	46bd      	mov	sp, r7
 80009dc:	bd80      	pop	{r7, pc}
 80009de:	bf00      	nop
 80009e0:	08004c48 	.word	0x08004c48
 80009e4:	20000074 	.word	0x20000074

080009e8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009e8:	b480      	push	{r7}
 80009ea:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009ec:	b672      	cpsid	i
}
 80009ee:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009f0:	e7fe      	b.n	80009f0 <Error_Handler+0x8>
	...

080009f4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009f4:	b480      	push	{r7}
 80009f6:	b083      	sub	sp, #12
 80009f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80009fa:	4b0f      	ldr	r3, [pc, #60]	; (8000a38 <HAL_MspInit+0x44>)
 80009fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009fe:	4a0e      	ldr	r2, [pc, #56]	; (8000a38 <HAL_MspInit+0x44>)
 8000a00:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a04:	6413      	str	r3, [r2, #64]	; 0x40
 8000a06:	4b0c      	ldr	r3, [pc, #48]	; (8000a38 <HAL_MspInit+0x44>)
 8000a08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a0e:	607b      	str	r3, [r7, #4]
 8000a10:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a12:	4b09      	ldr	r3, [pc, #36]	; (8000a38 <HAL_MspInit+0x44>)
 8000a14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a16:	4a08      	ldr	r2, [pc, #32]	; (8000a38 <HAL_MspInit+0x44>)
 8000a18:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a1c:	6453      	str	r3, [r2, #68]	; 0x44
 8000a1e:	4b06      	ldr	r3, [pc, #24]	; (8000a38 <HAL_MspInit+0x44>)
 8000a20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a22:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a26:	603b      	str	r3, [r7, #0]
 8000a28:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a2a:	bf00      	nop
 8000a2c:	370c      	adds	r7, #12
 8000a2e:	46bd      	mov	sp, r7
 8000a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a34:	4770      	bx	lr
 8000a36:	bf00      	nop
 8000a38:	40023800 	.word	0x40023800

08000a3c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	b084      	sub	sp, #16
 8000a40:	af00      	add	r7, sp, #0
 8000a42:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM13)
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	681b      	ldr	r3, [r3, #0]
 8000a48:	4a0d      	ldr	r2, [pc, #52]	; (8000a80 <HAL_TIM_Base_MspInit+0x44>)
 8000a4a:	4293      	cmp	r3, r2
 8000a4c:	d113      	bne.n	8000a76 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM13_MspInit 0 */

  /* USER CODE END TIM13_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM13_CLK_ENABLE();
 8000a4e:	4b0d      	ldr	r3, [pc, #52]	; (8000a84 <HAL_TIM_Base_MspInit+0x48>)
 8000a50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a52:	4a0c      	ldr	r2, [pc, #48]	; (8000a84 <HAL_TIM_Base_MspInit+0x48>)
 8000a54:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a58:	6413      	str	r3, [r2, #64]	; 0x40
 8000a5a:	4b0a      	ldr	r3, [pc, #40]	; (8000a84 <HAL_TIM_Base_MspInit+0x48>)
 8000a5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a62:	60fb      	str	r3, [r7, #12]
 8000a64:	68fb      	ldr	r3, [r7, #12]
    /* TIM13 interrupt Init */
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 0, 0);
 8000a66:	2200      	movs	r2, #0
 8000a68:	2100      	movs	r1, #0
 8000a6a:	202c      	movs	r0, #44	; 0x2c
 8000a6c:	f000 fac3 	bl	8000ff6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 8000a70:	202c      	movs	r0, #44	; 0x2c
 8000a72:	f000 fadc 	bl	800102e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM13_MspInit 1 */

  /* USER CODE END TIM13_MspInit 1 */
  }

}
 8000a76:	bf00      	nop
 8000a78:	3710      	adds	r7, #16
 8000a7a:	46bd      	mov	sp, r7
 8000a7c:	bd80      	pop	{r7, pc}
 8000a7e:	bf00      	nop
 8000a80:	40001c00 	.word	0x40001c00
 8000a84:	40023800 	.word	0x40023800

08000a88 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	b0aa      	sub	sp, #168	; 0xa8
 8000a8c:	af00      	add	r7, sp, #0
 8000a8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a90:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8000a94:	2200      	movs	r2, #0
 8000a96:	601a      	str	r2, [r3, #0]
 8000a98:	605a      	str	r2, [r3, #4]
 8000a9a:	609a      	str	r2, [r3, #8]
 8000a9c:	60da      	str	r2, [r3, #12]
 8000a9e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000aa0:	f107 0314 	add.w	r3, r7, #20
 8000aa4:	2280      	movs	r2, #128	; 0x80
 8000aa6:	2100      	movs	r1, #0
 8000aa8:	4618      	mov	r0, r3
 8000aaa:	f004 f883 	bl	8004bb4 <memset>
  if(huart->Instance==USART3)
 8000aae:	687b      	ldr	r3, [r7, #4]
 8000ab0:	681b      	ldr	r3, [r3, #0]
 8000ab2:	4a26      	ldr	r2, [pc, #152]	; (8000b4c <HAL_UART_MspInit+0xc4>)
 8000ab4:	4293      	cmp	r3, r2
 8000ab6:	d144      	bne.n	8000b42 <HAL_UART_MspInit+0xba>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000ab8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000abc:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000abe:	2300      	movs	r3, #0
 8000ac0:	65bb      	str	r3, [r7, #88]	; 0x58
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000ac2:	f107 0314 	add.w	r3, r7, #20
 8000ac6:	4618      	mov	r0, r3
 8000ac8:	f001 fbb8 	bl	800223c <HAL_RCCEx_PeriphCLKConfig>
 8000acc:	4603      	mov	r3, r0
 8000ace:	2b00      	cmp	r3, #0
 8000ad0:	d001      	beq.n	8000ad6 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000ad2:	f7ff ff89 	bl	80009e8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000ad6:	4b1e      	ldr	r3, [pc, #120]	; (8000b50 <HAL_UART_MspInit+0xc8>)
 8000ad8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ada:	4a1d      	ldr	r2, [pc, #116]	; (8000b50 <HAL_UART_MspInit+0xc8>)
 8000adc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000ae0:	6413      	str	r3, [r2, #64]	; 0x40
 8000ae2:	4b1b      	ldr	r3, [pc, #108]	; (8000b50 <HAL_UART_MspInit+0xc8>)
 8000ae4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ae6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000aea:	613b      	str	r3, [r7, #16]
 8000aec:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000aee:	4b18      	ldr	r3, [pc, #96]	; (8000b50 <HAL_UART_MspInit+0xc8>)
 8000af0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000af2:	4a17      	ldr	r2, [pc, #92]	; (8000b50 <HAL_UART_MspInit+0xc8>)
 8000af4:	f043 0308 	orr.w	r3, r3, #8
 8000af8:	6313      	str	r3, [r2, #48]	; 0x30
 8000afa:	4b15      	ldr	r3, [pc, #84]	; (8000b50 <HAL_UART_MspInit+0xc8>)
 8000afc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000afe:	f003 0308 	and.w	r3, r3, #8
 8000b02:	60fb      	str	r3, [r7, #12]
 8000b04:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000b06:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000b0a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b0e:	2302      	movs	r3, #2
 8000b10:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b14:	2300      	movs	r3, #0
 8000b16:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b1a:	2303      	movs	r3, #3
 8000b1c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000b20:	2307      	movs	r3, #7
 8000b22:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000b26:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8000b2a:	4619      	mov	r1, r3
 8000b2c:	4809      	ldr	r0, [pc, #36]	; (8000b54 <HAL_UART_MspInit+0xcc>)
 8000b2e:	f000 fb2b 	bl	8001188 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8000b32:	2200      	movs	r2, #0
 8000b34:	2100      	movs	r1, #0
 8000b36:	2027      	movs	r0, #39	; 0x27
 8000b38:	f000 fa5d 	bl	8000ff6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8000b3c:	2027      	movs	r0, #39	; 0x27
 8000b3e:	f000 fa76 	bl	800102e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000b42:	bf00      	nop
 8000b44:	37a8      	adds	r7, #168	; 0xa8
 8000b46:	46bd      	mov	sp, r7
 8000b48:	bd80      	pop	{r7, pc}
 8000b4a:	bf00      	nop
 8000b4c:	40004800 	.word	0x40004800
 8000b50:	40023800 	.word	0x40023800
 8000b54:	40020c00 	.word	0x40020c00

08000b58 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	b0aa      	sub	sp, #168	; 0xa8
 8000b5c:	af00      	add	r7, sp, #0
 8000b5e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b60:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8000b64:	2200      	movs	r2, #0
 8000b66:	601a      	str	r2, [r3, #0]
 8000b68:	605a      	str	r2, [r3, #4]
 8000b6a:	609a      	str	r2, [r3, #8]
 8000b6c:	60da      	str	r2, [r3, #12]
 8000b6e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000b70:	f107 0314 	add.w	r3, r7, #20
 8000b74:	2280      	movs	r2, #128	; 0x80
 8000b76:	2100      	movs	r1, #0
 8000b78:	4618      	mov	r0, r3
 8000b7a:	f004 f81b 	bl	8004bb4 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	681b      	ldr	r3, [r3, #0]
 8000b82:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000b86:	d159      	bne.n	8000c3c <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8000b88:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8000b8c:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8000b8e:	2300      	movs	r3, #0
 8000b90:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000b94:	f107 0314 	add.w	r3, r7, #20
 8000b98:	4618      	mov	r0, r3
 8000b9a:	f001 fb4f 	bl	800223c <HAL_RCCEx_PeriphCLKConfig>
 8000b9e:	4603      	mov	r3, r0
 8000ba0:	2b00      	cmp	r3, #0
 8000ba2:	d001      	beq.n	8000ba8 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 8000ba4:	f7ff ff20 	bl	80009e8 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ba8:	4b26      	ldr	r3, [pc, #152]	; (8000c44 <HAL_PCD_MspInit+0xec>)
 8000baa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bac:	4a25      	ldr	r2, [pc, #148]	; (8000c44 <HAL_PCD_MspInit+0xec>)
 8000bae:	f043 0301 	orr.w	r3, r3, #1
 8000bb2:	6313      	str	r3, [r2, #48]	; 0x30
 8000bb4:	4b23      	ldr	r3, [pc, #140]	; (8000c44 <HAL_PCD_MspInit+0xec>)
 8000bb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bb8:	f003 0301 	and.w	r3, r3, #1
 8000bbc:	613b      	str	r3, [r7, #16]
 8000bbe:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000bc0:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8000bc4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bc8:	2302      	movs	r3, #2
 8000bca:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bce:	2300      	movs	r3, #0
 8000bd0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bd4:	2303      	movs	r3, #3
 8000bd6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000bda:	230a      	movs	r3, #10
 8000bdc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000be0:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8000be4:	4619      	mov	r1, r3
 8000be6:	4818      	ldr	r0, [pc, #96]	; (8000c48 <HAL_PCD_MspInit+0xf0>)
 8000be8:	f000 face 	bl	8001188 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000bec:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000bf0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000bf4:	2300      	movs	r3, #0
 8000bf6:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000c00:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8000c04:	4619      	mov	r1, r3
 8000c06:	4810      	ldr	r0, [pc, #64]	; (8000c48 <HAL_PCD_MspInit+0xf0>)
 8000c08:	f000 fabe 	bl	8001188 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000c0c:	4b0d      	ldr	r3, [pc, #52]	; (8000c44 <HAL_PCD_MspInit+0xec>)
 8000c0e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000c10:	4a0c      	ldr	r2, [pc, #48]	; (8000c44 <HAL_PCD_MspInit+0xec>)
 8000c12:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000c16:	6353      	str	r3, [r2, #52]	; 0x34
 8000c18:	4b0a      	ldr	r3, [pc, #40]	; (8000c44 <HAL_PCD_MspInit+0xec>)
 8000c1a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000c1c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000c20:	60fb      	str	r3, [r7, #12]
 8000c22:	68fb      	ldr	r3, [r7, #12]
 8000c24:	4b07      	ldr	r3, [pc, #28]	; (8000c44 <HAL_PCD_MspInit+0xec>)
 8000c26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c28:	4a06      	ldr	r2, [pc, #24]	; (8000c44 <HAL_PCD_MspInit+0xec>)
 8000c2a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c2e:	6453      	str	r3, [r2, #68]	; 0x44
 8000c30:	4b04      	ldr	r3, [pc, #16]	; (8000c44 <HAL_PCD_MspInit+0xec>)
 8000c32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c34:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c38:	60bb      	str	r3, [r7, #8]
 8000c3a:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8000c3c:	bf00      	nop
 8000c3e:	37a8      	adds	r7, #168	; 0xa8
 8000c40:	46bd      	mov	sp, r7
 8000c42:	bd80      	pop	{r7, pc}
 8000c44:	40023800 	.word	0x40023800
 8000c48:	40020000 	.word	0x40020000

08000c4c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c4c:	b480      	push	{r7}
 8000c4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c50:	e7fe      	b.n	8000c50 <NMI_Handler+0x4>

08000c52 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c52:	b480      	push	{r7}
 8000c54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c56:	e7fe      	b.n	8000c56 <HardFault_Handler+0x4>

08000c58 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c58:	b480      	push	{r7}
 8000c5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c5c:	e7fe      	b.n	8000c5c <MemManage_Handler+0x4>

08000c5e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c5e:	b480      	push	{r7}
 8000c60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c62:	e7fe      	b.n	8000c62 <BusFault_Handler+0x4>

08000c64 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c64:	b480      	push	{r7}
 8000c66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c68:	e7fe      	b.n	8000c68 <UsageFault_Handler+0x4>

08000c6a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c6a:	b480      	push	{r7}
 8000c6c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c6e:	bf00      	nop
 8000c70:	46bd      	mov	sp, r7
 8000c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c76:	4770      	bx	lr

08000c78 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c78:	b480      	push	{r7}
 8000c7a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c7c:	bf00      	nop
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c84:	4770      	bx	lr

08000c86 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c86:	b480      	push	{r7}
 8000c88:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c8a:	bf00      	nop
 8000c8c:	46bd      	mov	sp, r7
 8000c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c92:	4770      	bx	lr

08000c94 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c94:	b580      	push	{r7, lr}
 8000c96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c98:	f000 f88e 	bl	8000db8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c9c:	bf00      	nop
 8000c9e:	bd80      	pop	{r7, pc}

08000ca0 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8000ca4:	4802      	ldr	r0, [pc, #8]	; (8000cb0 <USART3_IRQHandler+0x10>)
 8000ca6:	f002 f9d9 	bl	800305c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8000caa:	bf00      	nop
 8000cac:	bd80      	pop	{r7, pc}
 8000cae:	bf00      	nop
 8000cb0:	20000074 	.word	0x20000074

08000cb4 <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim13);
 8000cb8:	4802      	ldr	r0, [pc, #8]	; (8000cc4 <TIM8_UP_TIM13_IRQHandler+0x10>)
 8000cba:	f001 fed9 	bl	8002a70 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 8000cbe:	bf00      	nop
 8000cc0:	bd80      	pop	{r7, pc}
 8000cc2:	bf00      	nop
 8000cc4:	20000028 	.word	0x20000028

08000cc8 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000cc8:	b480      	push	{r7}
 8000cca:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000ccc:	4b06      	ldr	r3, [pc, #24]	; (8000ce8 <SystemInit+0x20>)
 8000cce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000cd2:	4a05      	ldr	r2, [pc, #20]	; (8000ce8 <SystemInit+0x20>)
 8000cd4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000cd8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000cdc:	bf00      	nop
 8000cde:	46bd      	mov	sp, r7
 8000ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce4:	4770      	bx	lr
 8000ce6:	bf00      	nop
 8000ce8:	e000ed00 	.word	0xe000ed00

08000cec <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000cec:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000d24 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000cf0:	480d      	ldr	r0, [pc, #52]	; (8000d28 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000cf2:	490e      	ldr	r1, [pc, #56]	; (8000d2c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000cf4:	4a0e      	ldr	r2, [pc, #56]	; (8000d30 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000cf6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000cf8:	e002      	b.n	8000d00 <LoopCopyDataInit>

08000cfa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000cfa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000cfc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000cfe:	3304      	adds	r3, #4

08000d00 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d00:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d02:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d04:	d3f9      	bcc.n	8000cfa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d06:	4a0b      	ldr	r2, [pc, #44]	; (8000d34 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000d08:	4c0b      	ldr	r4, [pc, #44]	; (8000d38 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000d0a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d0c:	e001      	b.n	8000d12 <LoopFillZerobss>

08000d0e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d0e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d10:	3204      	adds	r2, #4

08000d12 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d12:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d14:	d3fb      	bcc.n	8000d0e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000d16:	f7ff ffd7 	bl	8000cc8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000d1a:	f003 ff53 	bl	8004bc4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000d1e:	f7ff fbfd 	bl	800051c <main>
  bx  lr    
 8000d22:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000d24:	20040000 	.word	0x20040000
  ldr r0, =_sdata
 8000d28:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d2c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000d30:	08004c84 	.word	0x08004c84
  ldr r2, =_sbss
 8000d34:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000d38:	20000620 	.word	0x20000620

08000d3c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000d3c:	e7fe      	b.n	8000d3c <ADC_IRQHandler>

08000d3e <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d3e:	b580      	push	{r7, lr}
 8000d40:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d42:	2003      	movs	r0, #3
 8000d44:	f000 f94c 	bl	8000fe0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d48:	2000      	movs	r0, #0
 8000d4a:	f000 f805 	bl	8000d58 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d4e:	f7ff fe51 	bl	80009f4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d52:	2300      	movs	r3, #0
}
 8000d54:	4618      	mov	r0, r3
 8000d56:	bd80      	pop	{r7, pc}

08000d58 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	b082      	sub	sp, #8
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000d60:	4b12      	ldr	r3, [pc, #72]	; (8000dac <HAL_InitTick+0x54>)
 8000d62:	681a      	ldr	r2, [r3, #0]
 8000d64:	4b12      	ldr	r3, [pc, #72]	; (8000db0 <HAL_InitTick+0x58>)
 8000d66:	781b      	ldrb	r3, [r3, #0]
 8000d68:	4619      	mov	r1, r3
 8000d6a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d6e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d72:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d76:	4618      	mov	r0, r3
 8000d78:	f000 f967 	bl	800104a <HAL_SYSTICK_Config>
 8000d7c:	4603      	mov	r3, r0
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	d001      	beq.n	8000d86 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000d82:	2301      	movs	r3, #1
 8000d84:	e00e      	b.n	8000da4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	2b0f      	cmp	r3, #15
 8000d8a:	d80a      	bhi.n	8000da2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	6879      	ldr	r1, [r7, #4]
 8000d90:	f04f 30ff 	mov.w	r0, #4294967295
 8000d94:	f000 f92f 	bl	8000ff6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000d98:	4a06      	ldr	r2, [pc, #24]	; (8000db4 <HAL_InitTick+0x5c>)
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000d9e:	2300      	movs	r3, #0
 8000da0:	e000      	b.n	8000da4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000da2:	2301      	movs	r3, #1
}
 8000da4:	4618      	mov	r0, r3
 8000da6:	3708      	adds	r7, #8
 8000da8:	46bd      	mov	sp, r7
 8000daa:	bd80      	pop	{r7, pc}
 8000dac:	20000000 	.word	0x20000000
 8000db0:	20000008 	.word	0x20000008
 8000db4:	20000004 	.word	0x20000004

08000db8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000db8:	b480      	push	{r7}
 8000dba:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000dbc:	4b06      	ldr	r3, [pc, #24]	; (8000dd8 <HAL_IncTick+0x20>)
 8000dbe:	781b      	ldrb	r3, [r3, #0]
 8000dc0:	461a      	mov	r2, r3
 8000dc2:	4b06      	ldr	r3, [pc, #24]	; (8000ddc <HAL_IncTick+0x24>)
 8000dc4:	681b      	ldr	r3, [r3, #0]
 8000dc6:	4413      	add	r3, r2
 8000dc8:	4a04      	ldr	r2, [pc, #16]	; (8000ddc <HAL_IncTick+0x24>)
 8000dca:	6013      	str	r3, [r2, #0]
}
 8000dcc:	bf00      	nop
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd4:	4770      	bx	lr
 8000dd6:	bf00      	nop
 8000dd8:	20000008 	.word	0x20000008
 8000ddc:	2000061c 	.word	0x2000061c

08000de0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000de0:	b480      	push	{r7}
 8000de2:	af00      	add	r7, sp, #0
  return uwTick;
 8000de4:	4b03      	ldr	r3, [pc, #12]	; (8000df4 <HAL_GetTick+0x14>)
 8000de6:	681b      	ldr	r3, [r3, #0]
}
 8000de8:	4618      	mov	r0, r3
 8000dea:	46bd      	mov	sp, r7
 8000dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df0:	4770      	bx	lr
 8000df2:	bf00      	nop
 8000df4:	2000061c 	.word	0x2000061c

08000df8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	b084      	sub	sp, #16
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000e00:	f7ff ffee 	bl	8000de0 <HAL_GetTick>
 8000e04:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e0a:	68fb      	ldr	r3, [r7, #12]
 8000e0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e10:	d005      	beq.n	8000e1e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000e12:	4b0a      	ldr	r3, [pc, #40]	; (8000e3c <HAL_Delay+0x44>)
 8000e14:	781b      	ldrb	r3, [r3, #0]
 8000e16:	461a      	mov	r2, r3
 8000e18:	68fb      	ldr	r3, [r7, #12]
 8000e1a:	4413      	add	r3, r2
 8000e1c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000e1e:	bf00      	nop
 8000e20:	f7ff ffde 	bl	8000de0 <HAL_GetTick>
 8000e24:	4602      	mov	r2, r0
 8000e26:	68bb      	ldr	r3, [r7, #8]
 8000e28:	1ad3      	subs	r3, r2, r3
 8000e2a:	68fa      	ldr	r2, [r7, #12]
 8000e2c:	429a      	cmp	r2, r3
 8000e2e:	d8f7      	bhi.n	8000e20 <HAL_Delay+0x28>
  {
  }
}
 8000e30:	bf00      	nop
 8000e32:	bf00      	nop
 8000e34:	3710      	adds	r7, #16
 8000e36:	46bd      	mov	sp, r7
 8000e38:	bd80      	pop	{r7, pc}
 8000e3a:	bf00      	nop
 8000e3c:	20000008 	.word	0x20000008

08000e40 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e40:	b480      	push	{r7}
 8000e42:	b085      	sub	sp, #20
 8000e44:	af00      	add	r7, sp, #0
 8000e46:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	f003 0307 	and.w	r3, r3, #7
 8000e4e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e50:	4b0b      	ldr	r3, [pc, #44]	; (8000e80 <__NVIC_SetPriorityGrouping+0x40>)
 8000e52:	68db      	ldr	r3, [r3, #12]
 8000e54:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e56:	68ba      	ldr	r2, [r7, #8]
 8000e58:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000e5c:	4013      	ands	r3, r2
 8000e5e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e60:	68fb      	ldr	r3, [r7, #12]
 8000e62:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e64:	68bb      	ldr	r3, [r7, #8]
 8000e66:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000e68:	4b06      	ldr	r3, [pc, #24]	; (8000e84 <__NVIC_SetPriorityGrouping+0x44>)
 8000e6a:	4313      	orrs	r3, r2
 8000e6c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e6e:	4a04      	ldr	r2, [pc, #16]	; (8000e80 <__NVIC_SetPriorityGrouping+0x40>)
 8000e70:	68bb      	ldr	r3, [r7, #8]
 8000e72:	60d3      	str	r3, [r2, #12]
}
 8000e74:	bf00      	nop
 8000e76:	3714      	adds	r7, #20
 8000e78:	46bd      	mov	sp, r7
 8000e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e7e:	4770      	bx	lr
 8000e80:	e000ed00 	.word	0xe000ed00
 8000e84:	05fa0000 	.word	0x05fa0000

08000e88 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e88:	b480      	push	{r7}
 8000e8a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e8c:	4b04      	ldr	r3, [pc, #16]	; (8000ea0 <__NVIC_GetPriorityGrouping+0x18>)
 8000e8e:	68db      	ldr	r3, [r3, #12]
 8000e90:	0a1b      	lsrs	r3, r3, #8
 8000e92:	f003 0307 	and.w	r3, r3, #7
}
 8000e96:	4618      	mov	r0, r3
 8000e98:	46bd      	mov	sp, r7
 8000e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e9e:	4770      	bx	lr
 8000ea0:	e000ed00 	.word	0xe000ed00

08000ea4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ea4:	b480      	push	{r7}
 8000ea6:	b083      	sub	sp, #12
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	4603      	mov	r3, r0
 8000eac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000eae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	db0b      	blt.n	8000ece <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000eb6:	79fb      	ldrb	r3, [r7, #7]
 8000eb8:	f003 021f 	and.w	r2, r3, #31
 8000ebc:	4907      	ldr	r1, [pc, #28]	; (8000edc <__NVIC_EnableIRQ+0x38>)
 8000ebe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ec2:	095b      	lsrs	r3, r3, #5
 8000ec4:	2001      	movs	r0, #1
 8000ec6:	fa00 f202 	lsl.w	r2, r0, r2
 8000eca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000ece:	bf00      	nop
 8000ed0:	370c      	adds	r7, #12
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed8:	4770      	bx	lr
 8000eda:	bf00      	nop
 8000edc:	e000e100 	.word	0xe000e100

08000ee0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ee0:	b480      	push	{r7}
 8000ee2:	b083      	sub	sp, #12
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	4603      	mov	r3, r0
 8000ee8:	6039      	str	r1, [r7, #0]
 8000eea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000eec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	db0a      	blt.n	8000f0a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ef4:	683b      	ldr	r3, [r7, #0]
 8000ef6:	b2da      	uxtb	r2, r3
 8000ef8:	490c      	ldr	r1, [pc, #48]	; (8000f2c <__NVIC_SetPriority+0x4c>)
 8000efa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000efe:	0112      	lsls	r2, r2, #4
 8000f00:	b2d2      	uxtb	r2, r2
 8000f02:	440b      	add	r3, r1
 8000f04:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f08:	e00a      	b.n	8000f20 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f0a:	683b      	ldr	r3, [r7, #0]
 8000f0c:	b2da      	uxtb	r2, r3
 8000f0e:	4908      	ldr	r1, [pc, #32]	; (8000f30 <__NVIC_SetPriority+0x50>)
 8000f10:	79fb      	ldrb	r3, [r7, #7]
 8000f12:	f003 030f 	and.w	r3, r3, #15
 8000f16:	3b04      	subs	r3, #4
 8000f18:	0112      	lsls	r2, r2, #4
 8000f1a:	b2d2      	uxtb	r2, r2
 8000f1c:	440b      	add	r3, r1
 8000f1e:	761a      	strb	r2, [r3, #24]
}
 8000f20:	bf00      	nop
 8000f22:	370c      	adds	r7, #12
 8000f24:	46bd      	mov	sp, r7
 8000f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f2a:	4770      	bx	lr
 8000f2c:	e000e100 	.word	0xe000e100
 8000f30:	e000ed00 	.word	0xe000ed00

08000f34 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f34:	b480      	push	{r7}
 8000f36:	b089      	sub	sp, #36	; 0x24
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	60f8      	str	r0, [r7, #12]
 8000f3c:	60b9      	str	r1, [r7, #8]
 8000f3e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f40:	68fb      	ldr	r3, [r7, #12]
 8000f42:	f003 0307 	and.w	r3, r3, #7
 8000f46:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f48:	69fb      	ldr	r3, [r7, #28]
 8000f4a:	f1c3 0307 	rsb	r3, r3, #7
 8000f4e:	2b04      	cmp	r3, #4
 8000f50:	bf28      	it	cs
 8000f52:	2304      	movcs	r3, #4
 8000f54:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f56:	69fb      	ldr	r3, [r7, #28]
 8000f58:	3304      	adds	r3, #4
 8000f5a:	2b06      	cmp	r3, #6
 8000f5c:	d902      	bls.n	8000f64 <NVIC_EncodePriority+0x30>
 8000f5e:	69fb      	ldr	r3, [r7, #28]
 8000f60:	3b03      	subs	r3, #3
 8000f62:	e000      	b.n	8000f66 <NVIC_EncodePriority+0x32>
 8000f64:	2300      	movs	r3, #0
 8000f66:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f68:	f04f 32ff 	mov.w	r2, #4294967295
 8000f6c:	69bb      	ldr	r3, [r7, #24]
 8000f6e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f72:	43da      	mvns	r2, r3
 8000f74:	68bb      	ldr	r3, [r7, #8]
 8000f76:	401a      	ands	r2, r3
 8000f78:	697b      	ldr	r3, [r7, #20]
 8000f7a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f7c:	f04f 31ff 	mov.w	r1, #4294967295
 8000f80:	697b      	ldr	r3, [r7, #20]
 8000f82:	fa01 f303 	lsl.w	r3, r1, r3
 8000f86:	43d9      	mvns	r1, r3
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f8c:	4313      	orrs	r3, r2
         );
}
 8000f8e:	4618      	mov	r0, r3
 8000f90:	3724      	adds	r7, #36	; 0x24
 8000f92:	46bd      	mov	sp, r7
 8000f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f98:	4770      	bx	lr
	...

08000f9c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	b082      	sub	sp, #8
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	3b01      	subs	r3, #1
 8000fa8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000fac:	d301      	bcc.n	8000fb2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000fae:	2301      	movs	r3, #1
 8000fb0:	e00f      	b.n	8000fd2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000fb2:	4a0a      	ldr	r2, [pc, #40]	; (8000fdc <SysTick_Config+0x40>)
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	3b01      	subs	r3, #1
 8000fb8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000fba:	210f      	movs	r1, #15
 8000fbc:	f04f 30ff 	mov.w	r0, #4294967295
 8000fc0:	f7ff ff8e 	bl	8000ee0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000fc4:	4b05      	ldr	r3, [pc, #20]	; (8000fdc <SysTick_Config+0x40>)
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000fca:	4b04      	ldr	r3, [pc, #16]	; (8000fdc <SysTick_Config+0x40>)
 8000fcc:	2207      	movs	r2, #7
 8000fce:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000fd0:	2300      	movs	r3, #0
}
 8000fd2:	4618      	mov	r0, r3
 8000fd4:	3708      	adds	r7, #8
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	bd80      	pop	{r7, pc}
 8000fda:	bf00      	nop
 8000fdc:	e000e010 	.word	0xe000e010

08000fe0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	b082      	sub	sp, #8
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000fe8:	6878      	ldr	r0, [r7, #4]
 8000fea:	f7ff ff29 	bl	8000e40 <__NVIC_SetPriorityGrouping>
}
 8000fee:	bf00      	nop
 8000ff0:	3708      	adds	r7, #8
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	bd80      	pop	{r7, pc}

08000ff6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000ff6:	b580      	push	{r7, lr}
 8000ff8:	b086      	sub	sp, #24
 8000ffa:	af00      	add	r7, sp, #0
 8000ffc:	4603      	mov	r3, r0
 8000ffe:	60b9      	str	r1, [r7, #8]
 8001000:	607a      	str	r2, [r7, #4]
 8001002:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001004:	2300      	movs	r3, #0
 8001006:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001008:	f7ff ff3e 	bl	8000e88 <__NVIC_GetPriorityGrouping>
 800100c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800100e:	687a      	ldr	r2, [r7, #4]
 8001010:	68b9      	ldr	r1, [r7, #8]
 8001012:	6978      	ldr	r0, [r7, #20]
 8001014:	f7ff ff8e 	bl	8000f34 <NVIC_EncodePriority>
 8001018:	4602      	mov	r2, r0
 800101a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800101e:	4611      	mov	r1, r2
 8001020:	4618      	mov	r0, r3
 8001022:	f7ff ff5d 	bl	8000ee0 <__NVIC_SetPriority>
}
 8001026:	bf00      	nop
 8001028:	3718      	adds	r7, #24
 800102a:	46bd      	mov	sp, r7
 800102c:	bd80      	pop	{r7, pc}

0800102e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800102e:	b580      	push	{r7, lr}
 8001030:	b082      	sub	sp, #8
 8001032:	af00      	add	r7, sp, #0
 8001034:	4603      	mov	r3, r0
 8001036:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001038:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800103c:	4618      	mov	r0, r3
 800103e:	f7ff ff31 	bl	8000ea4 <__NVIC_EnableIRQ>
}
 8001042:	bf00      	nop
 8001044:	3708      	adds	r7, #8
 8001046:	46bd      	mov	sp, r7
 8001048:	bd80      	pop	{r7, pc}

0800104a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800104a:	b580      	push	{r7, lr}
 800104c:	b082      	sub	sp, #8
 800104e:	af00      	add	r7, sp, #0
 8001050:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001052:	6878      	ldr	r0, [r7, #4]
 8001054:	f7ff ffa2 	bl	8000f9c <SysTick_Config>
 8001058:	4603      	mov	r3, r0
}
 800105a:	4618      	mov	r0, r3
 800105c:	3708      	adds	r7, #8
 800105e:	46bd      	mov	sp, r7
 8001060:	bd80      	pop	{r7, pc}

08001062 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001062:	b580      	push	{r7, lr}
 8001064:	b084      	sub	sp, #16
 8001066:	af00      	add	r7, sp, #0
 8001068:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800106e:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001070:	f7ff feb6 	bl	8000de0 <HAL_GetTick>
 8001074:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800107c:	b2db      	uxtb	r3, r3
 800107e:	2b02      	cmp	r3, #2
 8001080:	d008      	beq.n	8001094 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	2280      	movs	r2, #128	; 0x80
 8001086:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	2200      	movs	r2, #0
 800108c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001090:	2301      	movs	r3, #1
 8001092:	e052      	b.n	800113a <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	681a      	ldr	r2, [r3, #0]
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	f022 0216 	bic.w	r2, r2, #22
 80010a2:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	695a      	ldr	r2, [r3, #20]
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80010b2:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d103      	bne.n	80010c4 <HAL_DMA_Abort+0x62>
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d007      	beq.n	80010d4 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	681a      	ldr	r2, [r3, #0]
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	f022 0208 	bic.w	r2, r2, #8
 80010d2:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	681a      	ldr	r2, [r3, #0]
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	f022 0201 	bic.w	r2, r2, #1
 80010e2:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80010e4:	e013      	b.n	800110e <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80010e6:	f7ff fe7b 	bl	8000de0 <HAL_GetTick>
 80010ea:	4602      	mov	r2, r0
 80010ec:	68bb      	ldr	r3, [r7, #8]
 80010ee:	1ad3      	subs	r3, r2, r3
 80010f0:	2b05      	cmp	r3, #5
 80010f2:	d90c      	bls.n	800110e <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	2220      	movs	r2, #32
 80010f8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	2203      	movs	r2, #3
 80010fe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	2200      	movs	r2, #0
 8001106:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 800110a:	2303      	movs	r3, #3
 800110c:	e015      	b.n	800113a <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	f003 0301 	and.w	r3, r3, #1
 8001118:	2b00      	cmp	r3, #0
 800111a:	d1e4      	bne.n	80010e6 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001120:	223f      	movs	r2, #63	; 0x3f
 8001122:	409a      	lsls	r2, r3
 8001124:	68fb      	ldr	r3, [r7, #12]
 8001126:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	2201      	movs	r2, #1
 800112c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	2200      	movs	r2, #0
 8001134:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 8001138:	2300      	movs	r3, #0
}
 800113a:	4618      	mov	r0, r3
 800113c:	3710      	adds	r7, #16
 800113e:	46bd      	mov	sp, r7
 8001140:	bd80      	pop	{r7, pc}

08001142 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001142:	b480      	push	{r7}
 8001144:	b083      	sub	sp, #12
 8001146:	af00      	add	r7, sp, #0
 8001148:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001150:	b2db      	uxtb	r3, r3
 8001152:	2b02      	cmp	r3, #2
 8001154:	d004      	beq.n	8001160 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	2280      	movs	r2, #128	; 0x80
 800115a:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800115c:	2301      	movs	r3, #1
 800115e:	e00c      	b.n	800117a <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	2205      	movs	r2, #5
 8001164:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	681a      	ldr	r2, [r3, #0]
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	f022 0201 	bic.w	r2, r2, #1
 8001176:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001178:	2300      	movs	r3, #0
}
 800117a:	4618      	mov	r0, r3
 800117c:	370c      	adds	r7, #12
 800117e:	46bd      	mov	sp, r7
 8001180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001184:	4770      	bx	lr
	...

08001188 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001188:	b480      	push	{r7}
 800118a:	b089      	sub	sp, #36	; 0x24
 800118c:	af00      	add	r7, sp, #0
 800118e:	6078      	str	r0, [r7, #4]
 8001190:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8001192:	2300      	movs	r3, #0
 8001194:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8001196:	2300      	movs	r3, #0
 8001198:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800119a:	2300      	movs	r3, #0
 800119c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800119e:	2300      	movs	r3, #0
 80011a0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80011a2:	2300      	movs	r3, #0
 80011a4:	61fb      	str	r3, [r7, #28]
 80011a6:	e169      	b.n	800147c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80011a8:	2201      	movs	r2, #1
 80011aa:	69fb      	ldr	r3, [r7, #28]
 80011ac:	fa02 f303 	lsl.w	r3, r2, r3
 80011b0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80011b2:	683b      	ldr	r3, [r7, #0]
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	697a      	ldr	r2, [r7, #20]
 80011b8:	4013      	ands	r3, r2
 80011ba:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80011bc:	693a      	ldr	r2, [r7, #16]
 80011be:	697b      	ldr	r3, [r7, #20]
 80011c0:	429a      	cmp	r2, r3
 80011c2:	f040 8158 	bne.w	8001476 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80011c6:	683b      	ldr	r3, [r7, #0]
 80011c8:	685b      	ldr	r3, [r3, #4]
 80011ca:	f003 0303 	and.w	r3, r3, #3
 80011ce:	2b01      	cmp	r3, #1
 80011d0:	d005      	beq.n	80011de <HAL_GPIO_Init+0x56>
 80011d2:	683b      	ldr	r3, [r7, #0]
 80011d4:	685b      	ldr	r3, [r3, #4]
 80011d6:	f003 0303 	and.w	r3, r3, #3
 80011da:	2b02      	cmp	r3, #2
 80011dc:	d130      	bne.n	8001240 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	689b      	ldr	r3, [r3, #8]
 80011e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80011e4:	69fb      	ldr	r3, [r7, #28]
 80011e6:	005b      	lsls	r3, r3, #1
 80011e8:	2203      	movs	r2, #3
 80011ea:	fa02 f303 	lsl.w	r3, r2, r3
 80011ee:	43db      	mvns	r3, r3
 80011f0:	69ba      	ldr	r2, [r7, #24]
 80011f2:	4013      	ands	r3, r2
 80011f4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80011f6:	683b      	ldr	r3, [r7, #0]
 80011f8:	68da      	ldr	r2, [r3, #12]
 80011fa:	69fb      	ldr	r3, [r7, #28]
 80011fc:	005b      	lsls	r3, r3, #1
 80011fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001202:	69ba      	ldr	r2, [r7, #24]
 8001204:	4313      	orrs	r3, r2
 8001206:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	69ba      	ldr	r2, [r7, #24]
 800120c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	685b      	ldr	r3, [r3, #4]
 8001212:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001214:	2201      	movs	r2, #1
 8001216:	69fb      	ldr	r3, [r7, #28]
 8001218:	fa02 f303 	lsl.w	r3, r2, r3
 800121c:	43db      	mvns	r3, r3
 800121e:	69ba      	ldr	r2, [r7, #24]
 8001220:	4013      	ands	r3, r2
 8001222:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001224:	683b      	ldr	r3, [r7, #0]
 8001226:	685b      	ldr	r3, [r3, #4]
 8001228:	091b      	lsrs	r3, r3, #4
 800122a:	f003 0201 	and.w	r2, r3, #1
 800122e:	69fb      	ldr	r3, [r7, #28]
 8001230:	fa02 f303 	lsl.w	r3, r2, r3
 8001234:	69ba      	ldr	r2, [r7, #24]
 8001236:	4313      	orrs	r3, r2
 8001238:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	69ba      	ldr	r2, [r7, #24]
 800123e:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001240:	683b      	ldr	r3, [r7, #0]
 8001242:	685b      	ldr	r3, [r3, #4]
 8001244:	f003 0303 	and.w	r3, r3, #3
 8001248:	2b03      	cmp	r3, #3
 800124a:	d017      	beq.n	800127c <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	68db      	ldr	r3, [r3, #12]
 8001250:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8001252:	69fb      	ldr	r3, [r7, #28]
 8001254:	005b      	lsls	r3, r3, #1
 8001256:	2203      	movs	r2, #3
 8001258:	fa02 f303 	lsl.w	r3, r2, r3
 800125c:	43db      	mvns	r3, r3
 800125e:	69ba      	ldr	r2, [r7, #24]
 8001260:	4013      	ands	r3, r2
 8001262:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8001264:	683b      	ldr	r3, [r7, #0]
 8001266:	689a      	ldr	r2, [r3, #8]
 8001268:	69fb      	ldr	r3, [r7, #28]
 800126a:	005b      	lsls	r3, r3, #1
 800126c:	fa02 f303 	lsl.w	r3, r2, r3
 8001270:	69ba      	ldr	r2, [r7, #24]
 8001272:	4313      	orrs	r3, r2
 8001274:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	69ba      	ldr	r2, [r7, #24]
 800127a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800127c:	683b      	ldr	r3, [r7, #0]
 800127e:	685b      	ldr	r3, [r3, #4]
 8001280:	f003 0303 	and.w	r3, r3, #3
 8001284:	2b02      	cmp	r3, #2
 8001286:	d123      	bne.n	80012d0 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001288:	69fb      	ldr	r3, [r7, #28]
 800128a:	08da      	lsrs	r2, r3, #3
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	3208      	adds	r2, #8
 8001290:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001294:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001296:	69fb      	ldr	r3, [r7, #28]
 8001298:	f003 0307 	and.w	r3, r3, #7
 800129c:	009b      	lsls	r3, r3, #2
 800129e:	220f      	movs	r2, #15
 80012a0:	fa02 f303 	lsl.w	r3, r2, r3
 80012a4:	43db      	mvns	r3, r3
 80012a6:	69ba      	ldr	r2, [r7, #24]
 80012a8:	4013      	ands	r3, r2
 80012aa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80012ac:	683b      	ldr	r3, [r7, #0]
 80012ae:	691a      	ldr	r2, [r3, #16]
 80012b0:	69fb      	ldr	r3, [r7, #28]
 80012b2:	f003 0307 	and.w	r3, r3, #7
 80012b6:	009b      	lsls	r3, r3, #2
 80012b8:	fa02 f303 	lsl.w	r3, r2, r3
 80012bc:	69ba      	ldr	r2, [r7, #24]
 80012be:	4313      	orrs	r3, r2
 80012c0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80012c2:	69fb      	ldr	r3, [r7, #28]
 80012c4:	08da      	lsrs	r2, r3, #3
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	3208      	adds	r2, #8
 80012ca:	69b9      	ldr	r1, [r7, #24]
 80012cc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80012d6:	69fb      	ldr	r3, [r7, #28]
 80012d8:	005b      	lsls	r3, r3, #1
 80012da:	2203      	movs	r2, #3
 80012dc:	fa02 f303 	lsl.w	r3, r2, r3
 80012e0:	43db      	mvns	r3, r3
 80012e2:	69ba      	ldr	r2, [r7, #24]
 80012e4:	4013      	ands	r3, r2
 80012e6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80012e8:	683b      	ldr	r3, [r7, #0]
 80012ea:	685b      	ldr	r3, [r3, #4]
 80012ec:	f003 0203 	and.w	r2, r3, #3
 80012f0:	69fb      	ldr	r3, [r7, #28]
 80012f2:	005b      	lsls	r3, r3, #1
 80012f4:	fa02 f303 	lsl.w	r3, r2, r3
 80012f8:	69ba      	ldr	r2, [r7, #24]
 80012fa:	4313      	orrs	r3, r2
 80012fc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	69ba      	ldr	r2, [r7, #24]
 8001302:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001304:	683b      	ldr	r3, [r7, #0]
 8001306:	685b      	ldr	r3, [r3, #4]
 8001308:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800130c:	2b00      	cmp	r3, #0
 800130e:	f000 80b2 	beq.w	8001476 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001312:	4b60      	ldr	r3, [pc, #384]	; (8001494 <HAL_GPIO_Init+0x30c>)
 8001314:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001316:	4a5f      	ldr	r2, [pc, #380]	; (8001494 <HAL_GPIO_Init+0x30c>)
 8001318:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800131c:	6453      	str	r3, [r2, #68]	; 0x44
 800131e:	4b5d      	ldr	r3, [pc, #372]	; (8001494 <HAL_GPIO_Init+0x30c>)
 8001320:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001322:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001326:	60fb      	str	r3, [r7, #12]
 8001328:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800132a:	4a5b      	ldr	r2, [pc, #364]	; (8001498 <HAL_GPIO_Init+0x310>)
 800132c:	69fb      	ldr	r3, [r7, #28]
 800132e:	089b      	lsrs	r3, r3, #2
 8001330:	3302      	adds	r3, #2
 8001332:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001336:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001338:	69fb      	ldr	r3, [r7, #28]
 800133a:	f003 0303 	and.w	r3, r3, #3
 800133e:	009b      	lsls	r3, r3, #2
 8001340:	220f      	movs	r2, #15
 8001342:	fa02 f303 	lsl.w	r3, r2, r3
 8001346:	43db      	mvns	r3, r3
 8001348:	69ba      	ldr	r2, [r7, #24]
 800134a:	4013      	ands	r3, r2
 800134c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	4a52      	ldr	r2, [pc, #328]	; (800149c <HAL_GPIO_Init+0x314>)
 8001352:	4293      	cmp	r3, r2
 8001354:	d02b      	beq.n	80013ae <HAL_GPIO_Init+0x226>
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	4a51      	ldr	r2, [pc, #324]	; (80014a0 <HAL_GPIO_Init+0x318>)
 800135a:	4293      	cmp	r3, r2
 800135c:	d025      	beq.n	80013aa <HAL_GPIO_Init+0x222>
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	4a50      	ldr	r2, [pc, #320]	; (80014a4 <HAL_GPIO_Init+0x31c>)
 8001362:	4293      	cmp	r3, r2
 8001364:	d01f      	beq.n	80013a6 <HAL_GPIO_Init+0x21e>
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	4a4f      	ldr	r2, [pc, #316]	; (80014a8 <HAL_GPIO_Init+0x320>)
 800136a:	4293      	cmp	r3, r2
 800136c:	d019      	beq.n	80013a2 <HAL_GPIO_Init+0x21a>
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	4a4e      	ldr	r2, [pc, #312]	; (80014ac <HAL_GPIO_Init+0x324>)
 8001372:	4293      	cmp	r3, r2
 8001374:	d013      	beq.n	800139e <HAL_GPIO_Init+0x216>
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	4a4d      	ldr	r2, [pc, #308]	; (80014b0 <HAL_GPIO_Init+0x328>)
 800137a:	4293      	cmp	r3, r2
 800137c:	d00d      	beq.n	800139a <HAL_GPIO_Init+0x212>
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	4a4c      	ldr	r2, [pc, #304]	; (80014b4 <HAL_GPIO_Init+0x32c>)
 8001382:	4293      	cmp	r3, r2
 8001384:	d007      	beq.n	8001396 <HAL_GPIO_Init+0x20e>
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	4a4b      	ldr	r2, [pc, #300]	; (80014b8 <HAL_GPIO_Init+0x330>)
 800138a:	4293      	cmp	r3, r2
 800138c:	d101      	bne.n	8001392 <HAL_GPIO_Init+0x20a>
 800138e:	2307      	movs	r3, #7
 8001390:	e00e      	b.n	80013b0 <HAL_GPIO_Init+0x228>
 8001392:	2308      	movs	r3, #8
 8001394:	e00c      	b.n	80013b0 <HAL_GPIO_Init+0x228>
 8001396:	2306      	movs	r3, #6
 8001398:	e00a      	b.n	80013b0 <HAL_GPIO_Init+0x228>
 800139a:	2305      	movs	r3, #5
 800139c:	e008      	b.n	80013b0 <HAL_GPIO_Init+0x228>
 800139e:	2304      	movs	r3, #4
 80013a0:	e006      	b.n	80013b0 <HAL_GPIO_Init+0x228>
 80013a2:	2303      	movs	r3, #3
 80013a4:	e004      	b.n	80013b0 <HAL_GPIO_Init+0x228>
 80013a6:	2302      	movs	r3, #2
 80013a8:	e002      	b.n	80013b0 <HAL_GPIO_Init+0x228>
 80013aa:	2301      	movs	r3, #1
 80013ac:	e000      	b.n	80013b0 <HAL_GPIO_Init+0x228>
 80013ae:	2300      	movs	r3, #0
 80013b0:	69fa      	ldr	r2, [r7, #28]
 80013b2:	f002 0203 	and.w	r2, r2, #3
 80013b6:	0092      	lsls	r2, r2, #2
 80013b8:	4093      	lsls	r3, r2
 80013ba:	69ba      	ldr	r2, [r7, #24]
 80013bc:	4313      	orrs	r3, r2
 80013be:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80013c0:	4935      	ldr	r1, [pc, #212]	; (8001498 <HAL_GPIO_Init+0x310>)
 80013c2:	69fb      	ldr	r3, [r7, #28]
 80013c4:	089b      	lsrs	r3, r3, #2
 80013c6:	3302      	adds	r3, #2
 80013c8:	69ba      	ldr	r2, [r7, #24]
 80013ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80013ce:	4b3b      	ldr	r3, [pc, #236]	; (80014bc <HAL_GPIO_Init+0x334>)
 80013d0:	689b      	ldr	r3, [r3, #8]
 80013d2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013d4:	693b      	ldr	r3, [r7, #16]
 80013d6:	43db      	mvns	r3, r3
 80013d8:	69ba      	ldr	r2, [r7, #24]
 80013da:	4013      	ands	r3, r2
 80013dc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80013de:	683b      	ldr	r3, [r7, #0]
 80013e0:	685b      	ldr	r3, [r3, #4]
 80013e2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d003      	beq.n	80013f2 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80013ea:	69ba      	ldr	r2, [r7, #24]
 80013ec:	693b      	ldr	r3, [r7, #16]
 80013ee:	4313      	orrs	r3, r2
 80013f0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80013f2:	4a32      	ldr	r2, [pc, #200]	; (80014bc <HAL_GPIO_Init+0x334>)
 80013f4:	69bb      	ldr	r3, [r7, #24]
 80013f6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80013f8:	4b30      	ldr	r3, [pc, #192]	; (80014bc <HAL_GPIO_Init+0x334>)
 80013fa:	68db      	ldr	r3, [r3, #12]
 80013fc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013fe:	693b      	ldr	r3, [r7, #16]
 8001400:	43db      	mvns	r3, r3
 8001402:	69ba      	ldr	r2, [r7, #24]
 8001404:	4013      	ands	r3, r2
 8001406:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001408:	683b      	ldr	r3, [r7, #0]
 800140a:	685b      	ldr	r3, [r3, #4]
 800140c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001410:	2b00      	cmp	r3, #0
 8001412:	d003      	beq.n	800141c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001414:	69ba      	ldr	r2, [r7, #24]
 8001416:	693b      	ldr	r3, [r7, #16]
 8001418:	4313      	orrs	r3, r2
 800141a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800141c:	4a27      	ldr	r2, [pc, #156]	; (80014bc <HAL_GPIO_Init+0x334>)
 800141e:	69bb      	ldr	r3, [r7, #24]
 8001420:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001422:	4b26      	ldr	r3, [pc, #152]	; (80014bc <HAL_GPIO_Init+0x334>)
 8001424:	685b      	ldr	r3, [r3, #4]
 8001426:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001428:	693b      	ldr	r3, [r7, #16]
 800142a:	43db      	mvns	r3, r3
 800142c:	69ba      	ldr	r2, [r7, #24]
 800142e:	4013      	ands	r3, r2
 8001430:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001432:	683b      	ldr	r3, [r7, #0]
 8001434:	685b      	ldr	r3, [r3, #4]
 8001436:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800143a:	2b00      	cmp	r3, #0
 800143c:	d003      	beq.n	8001446 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800143e:	69ba      	ldr	r2, [r7, #24]
 8001440:	693b      	ldr	r3, [r7, #16]
 8001442:	4313      	orrs	r3, r2
 8001444:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001446:	4a1d      	ldr	r2, [pc, #116]	; (80014bc <HAL_GPIO_Init+0x334>)
 8001448:	69bb      	ldr	r3, [r7, #24]
 800144a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800144c:	4b1b      	ldr	r3, [pc, #108]	; (80014bc <HAL_GPIO_Init+0x334>)
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001452:	693b      	ldr	r3, [r7, #16]
 8001454:	43db      	mvns	r3, r3
 8001456:	69ba      	ldr	r2, [r7, #24]
 8001458:	4013      	ands	r3, r2
 800145a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800145c:	683b      	ldr	r3, [r7, #0]
 800145e:	685b      	ldr	r3, [r3, #4]
 8001460:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001464:	2b00      	cmp	r3, #0
 8001466:	d003      	beq.n	8001470 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001468:	69ba      	ldr	r2, [r7, #24]
 800146a:	693b      	ldr	r3, [r7, #16]
 800146c:	4313      	orrs	r3, r2
 800146e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001470:	4a12      	ldr	r2, [pc, #72]	; (80014bc <HAL_GPIO_Init+0x334>)
 8001472:	69bb      	ldr	r3, [r7, #24]
 8001474:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8001476:	69fb      	ldr	r3, [r7, #28]
 8001478:	3301      	adds	r3, #1
 800147a:	61fb      	str	r3, [r7, #28]
 800147c:	69fb      	ldr	r3, [r7, #28]
 800147e:	2b0f      	cmp	r3, #15
 8001480:	f67f ae92 	bls.w	80011a8 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8001484:	bf00      	nop
 8001486:	bf00      	nop
 8001488:	3724      	adds	r7, #36	; 0x24
 800148a:	46bd      	mov	sp, r7
 800148c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001490:	4770      	bx	lr
 8001492:	bf00      	nop
 8001494:	40023800 	.word	0x40023800
 8001498:	40013800 	.word	0x40013800
 800149c:	40020000 	.word	0x40020000
 80014a0:	40020400 	.word	0x40020400
 80014a4:	40020800 	.word	0x40020800
 80014a8:	40020c00 	.word	0x40020c00
 80014ac:	40021000 	.word	0x40021000
 80014b0:	40021400 	.word	0x40021400
 80014b4:	40021800 	.word	0x40021800
 80014b8:	40021c00 	.word	0x40021c00
 80014bc:	40013c00 	.word	0x40013c00

080014c0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80014c0:	b480      	push	{r7}
 80014c2:	b085      	sub	sp, #20
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	6078      	str	r0, [r7, #4]
 80014c8:	460b      	mov	r3, r1
 80014ca:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	691a      	ldr	r2, [r3, #16]
 80014d0:	887b      	ldrh	r3, [r7, #2]
 80014d2:	4013      	ands	r3, r2
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d002      	beq.n	80014de <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80014d8:	2301      	movs	r3, #1
 80014da:	73fb      	strb	r3, [r7, #15]
 80014dc:	e001      	b.n	80014e2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80014de:	2300      	movs	r3, #0
 80014e0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80014e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80014e4:	4618      	mov	r0, r3
 80014e6:	3714      	adds	r7, #20
 80014e8:	46bd      	mov	sp, r7
 80014ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ee:	4770      	bx	lr

080014f0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80014f0:	b480      	push	{r7}
 80014f2:	b083      	sub	sp, #12
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	6078      	str	r0, [r7, #4]
 80014f8:	460b      	mov	r3, r1
 80014fa:	807b      	strh	r3, [r7, #2]
 80014fc:	4613      	mov	r3, r2
 80014fe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001500:	787b      	ldrb	r3, [r7, #1]
 8001502:	2b00      	cmp	r3, #0
 8001504:	d003      	beq.n	800150e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001506:	887a      	ldrh	r2, [r7, #2]
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 800150c:	e003      	b.n	8001516 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800150e:	887b      	ldrh	r3, [r7, #2]
 8001510:	041a      	lsls	r2, r3, #16
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	619a      	str	r2, [r3, #24]
}
 8001516:	bf00      	nop
 8001518:	370c      	adds	r7, #12
 800151a:	46bd      	mov	sp, r7
 800151c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001520:	4770      	bx	lr

08001522 <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001522:	b480      	push	{r7}
 8001524:	b085      	sub	sp, #20
 8001526:	af00      	add	r7, sp, #0
 8001528:	6078      	str	r0, [r7, #4]
 800152a:	460b      	mov	r3, r1
 800152c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	695b      	ldr	r3, [r3, #20]
 8001532:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001534:	887a      	ldrh	r2, [r7, #2]
 8001536:	68fb      	ldr	r3, [r7, #12]
 8001538:	4013      	ands	r3, r2
 800153a:	041a      	lsls	r2, r3, #16
 800153c:	68fb      	ldr	r3, [r7, #12]
 800153e:	43d9      	mvns	r1, r3
 8001540:	887b      	ldrh	r3, [r7, #2]
 8001542:	400b      	ands	r3, r1
 8001544:	431a      	orrs	r2, r3
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	619a      	str	r2, [r3, #24]
}
 800154a:	bf00      	nop
 800154c:	3714      	adds	r7, #20
 800154e:	46bd      	mov	sp, r7
 8001550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001554:	4770      	bx	lr

08001556 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001556:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001558:	b08f      	sub	sp, #60	; 0x3c
 800155a:	af0a      	add	r7, sp, #40	; 0x28
 800155c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	2b00      	cmp	r3, #0
 8001562:	d101      	bne.n	8001568 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001564:	2301      	movs	r3, #1
 8001566:	e116      	b.n	8001796 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8001574:	b2db      	uxtb	r3, r3
 8001576:	2b00      	cmp	r3, #0
 8001578:	d106      	bne.n	8001588 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	2200      	movs	r2, #0
 800157e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001582:	6878      	ldr	r0, [r7, #4]
 8001584:	f7ff fae8 	bl	8000b58 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	2203      	movs	r2, #3
 800158c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001590:	68bb      	ldr	r3, [r7, #8]
 8001592:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001594:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001598:	2b00      	cmp	r3, #0
 800159a:	d102      	bne.n	80015a2 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	2200      	movs	r2, #0
 80015a0:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	4618      	mov	r0, r3
 80015a8:	f003 f858 	bl	800465c <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	603b      	str	r3, [r7, #0]
 80015b2:	687e      	ldr	r6, [r7, #4]
 80015b4:	466d      	mov	r5, sp
 80015b6:	f106 0410 	add.w	r4, r6, #16
 80015ba:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80015bc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80015be:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80015c0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80015c2:	e894 0003 	ldmia.w	r4, {r0, r1}
 80015c6:	e885 0003 	stmia.w	r5, {r0, r1}
 80015ca:	1d33      	adds	r3, r6, #4
 80015cc:	cb0e      	ldmia	r3, {r1, r2, r3}
 80015ce:	6838      	ldr	r0, [r7, #0]
 80015d0:	f002 ffbc 	bl	800454c <USB_CoreInit>
 80015d4:	4603      	mov	r3, r0
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d005      	beq.n	80015e6 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	2202      	movs	r2, #2
 80015de:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80015e2:	2301      	movs	r3, #1
 80015e4:	e0d7      	b.n	8001796 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	2100      	movs	r1, #0
 80015ec:	4618      	mov	r0, r3
 80015ee:	f003 f846 	bl	800467e <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80015f2:	2300      	movs	r3, #0
 80015f4:	73fb      	strb	r3, [r7, #15]
 80015f6:	e04a      	b.n	800168e <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80015f8:	7bfa      	ldrb	r2, [r7, #15]
 80015fa:	6879      	ldr	r1, [r7, #4]
 80015fc:	4613      	mov	r3, r2
 80015fe:	00db      	lsls	r3, r3, #3
 8001600:	4413      	add	r3, r2
 8001602:	009b      	lsls	r3, r3, #2
 8001604:	440b      	add	r3, r1
 8001606:	333d      	adds	r3, #61	; 0x3d
 8001608:	2201      	movs	r2, #1
 800160a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800160c:	7bfa      	ldrb	r2, [r7, #15]
 800160e:	6879      	ldr	r1, [r7, #4]
 8001610:	4613      	mov	r3, r2
 8001612:	00db      	lsls	r3, r3, #3
 8001614:	4413      	add	r3, r2
 8001616:	009b      	lsls	r3, r3, #2
 8001618:	440b      	add	r3, r1
 800161a:	333c      	adds	r3, #60	; 0x3c
 800161c:	7bfa      	ldrb	r2, [r7, #15]
 800161e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001620:	7bfa      	ldrb	r2, [r7, #15]
 8001622:	7bfb      	ldrb	r3, [r7, #15]
 8001624:	b298      	uxth	r0, r3
 8001626:	6879      	ldr	r1, [r7, #4]
 8001628:	4613      	mov	r3, r2
 800162a:	00db      	lsls	r3, r3, #3
 800162c:	4413      	add	r3, r2
 800162e:	009b      	lsls	r3, r3, #2
 8001630:	440b      	add	r3, r1
 8001632:	3344      	adds	r3, #68	; 0x44
 8001634:	4602      	mov	r2, r0
 8001636:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001638:	7bfa      	ldrb	r2, [r7, #15]
 800163a:	6879      	ldr	r1, [r7, #4]
 800163c:	4613      	mov	r3, r2
 800163e:	00db      	lsls	r3, r3, #3
 8001640:	4413      	add	r3, r2
 8001642:	009b      	lsls	r3, r3, #2
 8001644:	440b      	add	r3, r1
 8001646:	3340      	adds	r3, #64	; 0x40
 8001648:	2200      	movs	r2, #0
 800164a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800164c:	7bfa      	ldrb	r2, [r7, #15]
 800164e:	6879      	ldr	r1, [r7, #4]
 8001650:	4613      	mov	r3, r2
 8001652:	00db      	lsls	r3, r3, #3
 8001654:	4413      	add	r3, r2
 8001656:	009b      	lsls	r3, r3, #2
 8001658:	440b      	add	r3, r1
 800165a:	3348      	adds	r3, #72	; 0x48
 800165c:	2200      	movs	r2, #0
 800165e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001660:	7bfa      	ldrb	r2, [r7, #15]
 8001662:	6879      	ldr	r1, [r7, #4]
 8001664:	4613      	mov	r3, r2
 8001666:	00db      	lsls	r3, r3, #3
 8001668:	4413      	add	r3, r2
 800166a:	009b      	lsls	r3, r3, #2
 800166c:	440b      	add	r3, r1
 800166e:	334c      	adds	r3, #76	; 0x4c
 8001670:	2200      	movs	r2, #0
 8001672:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001674:	7bfa      	ldrb	r2, [r7, #15]
 8001676:	6879      	ldr	r1, [r7, #4]
 8001678:	4613      	mov	r3, r2
 800167a:	00db      	lsls	r3, r3, #3
 800167c:	4413      	add	r3, r2
 800167e:	009b      	lsls	r3, r3, #2
 8001680:	440b      	add	r3, r1
 8001682:	3354      	adds	r3, #84	; 0x54
 8001684:	2200      	movs	r2, #0
 8001686:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001688:	7bfb      	ldrb	r3, [r7, #15]
 800168a:	3301      	adds	r3, #1
 800168c:	73fb      	strb	r3, [r7, #15]
 800168e:	7bfa      	ldrb	r2, [r7, #15]
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	685b      	ldr	r3, [r3, #4]
 8001694:	429a      	cmp	r2, r3
 8001696:	d3af      	bcc.n	80015f8 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001698:	2300      	movs	r3, #0
 800169a:	73fb      	strb	r3, [r7, #15]
 800169c:	e044      	b.n	8001728 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800169e:	7bfa      	ldrb	r2, [r7, #15]
 80016a0:	6879      	ldr	r1, [r7, #4]
 80016a2:	4613      	mov	r3, r2
 80016a4:	00db      	lsls	r3, r3, #3
 80016a6:	4413      	add	r3, r2
 80016a8:	009b      	lsls	r3, r3, #2
 80016aa:	440b      	add	r3, r1
 80016ac:	f203 237d 	addw	r3, r3, #637	; 0x27d
 80016b0:	2200      	movs	r2, #0
 80016b2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80016b4:	7bfa      	ldrb	r2, [r7, #15]
 80016b6:	6879      	ldr	r1, [r7, #4]
 80016b8:	4613      	mov	r3, r2
 80016ba:	00db      	lsls	r3, r3, #3
 80016bc:	4413      	add	r3, r2
 80016be:	009b      	lsls	r3, r3, #2
 80016c0:	440b      	add	r3, r1
 80016c2:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 80016c6:	7bfa      	ldrb	r2, [r7, #15]
 80016c8:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80016ca:	7bfa      	ldrb	r2, [r7, #15]
 80016cc:	6879      	ldr	r1, [r7, #4]
 80016ce:	4613      	mov	r3, r2
 80016d0:	00db      	lsls	r3, r3, #3
 80016d2:	4413      	add	r3, r2
 80016d4:	009b      	lsls	r3, r3, #2
 80016d6:	440b      	add	r3, r1
 80016d8:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80016dc:	2200      	movs	r2, #0
 80016de:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80016e0:	7bfa      	ldrb	r2, [r7, #15]
 80016e2:	6879      	ldr	r1, [r7, #4]
 80016e4:	4613      	mov	r3, r2
 80016e6:	00db      	lsls	r3, r3, #3
 80016e8:	4413      	add	r3, r2
 80016ea:	009b      	lsls	r3, r3, #2
 80016ec:	440b      	add	r3, r1
 80016ee:	f503 7322 	add.w	r3, r3, #648	; 0x288
 80016f2:	2200      	movs	r2, #0
 80016f4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80016f6:	7bfa      	ldrb	r2, [r7, #15]
 80016f8:	6879      	ldr	r1, [r7, #4]
 80016fa:	4613      	mov	r3, r2
 80016fc:	00db      	lsls	r3, r3, #3
 80016fe:	4413      	add	r3, r2
 8001700:	009b      	lsls	r3, r3, #2
 8001702:	440b      	add	r3, r1
 8001704:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8001708:	2200      	movs	r2, #0
 800170a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800170c:	7bfa      	ldrb	r2, [r7, #15]
 800170e:	6879      	ldr	r1, [r7, #4]
 8001710:	4613      	mov	r3, r2
 8001712:	00db      	lsls	r3, r3, #3
 8001714:	4413      	add	r3, r2
 8001716:	009b      	lsls	r3, r3, #2
 8001718:	440b      	add	r3, r1
 800171a:	f503 7325 	add.w	r3, r3, #660	; 0x294
 800171e:	2200      	movs	r2, #0
 8001720:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001722:	7bfb      	ldrb	r3, [r7, #15]
 8001724:	3301      	adds	r3, #1
 8001726:	73fb      	strb	r3, [r7, #15]
 8001728:	7bfa      	ldrb	r2, [r7, #15]
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	685b      	ldr	r3, [r3, #4]
 800172e:	429a      	cmp	r2, r3
 8001730:	d3b5      	bcc.n	800169e <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	603b      	str	r3, [r7, #0]
 8001738:	687e      	ldr	r6, [r7, #4]
 800173a:	466d      	mov	r5, sp
 800173c:	f106 0410 	add.w	r4, r6, #16
 8001740:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001742:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001744:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001746:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001748:	e894 0003 	ldmia.w	r4, {r0, r1}
 800174c:	e885 0003 	stmia.w	r5, {r0, r1}
 8001750:	1d33      	adds	r3, r6, #4
 8001752:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001754:	6838      	ldr	r0, [r7, #0]
 8001756:	f002 ffdf 	bl	8004718 <USB_DevInit>
 800175a:	4603      	mov	r3, r0
 800175c:	2b00      	cmp	r3, #0
 800175e:	d005      	beq.n	800176c <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	2202      	movs	r2, #2
 8001764:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8001768:	2301      	movs	r3, #1
 800176a:	e014      	b.n	8001796 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	2200      	movs	r2, #0
 8001770:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	2201      	movs	r2, #1
 8001778:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001780:	2b01      	cmp	r3, #1
 8001782:	d102      	bne.n	800178a <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8001784:	6878      	ldr	r0, [r7, #4]
 8001786:	f000 f80b 	bl	80017a0 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	4618      	mov	r0, r3
 8001790:	f003 f9ad 	bl	8004aee <USB_DevDisconnect>

  return HAL_OK;
 8001794:	2300      	movs	r3, #0
}
 8001796:	4618      	mov	r0, r3
 8001798:	3714      	adds	r7, #20
 800179a:	46bd      	mov	sp, r7
 800179c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

080017a0 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80017a0:	b480      	push	{r7}
 80017a2:	b085      	sub	sp, #20
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	2201      	movs	r2, #1
 80017b2:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	2200      	movs	r2, #0
 80017ba:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80017be:	68fb      	ldr	r3, [r7, #12]
 80017c0:	699b      	ldr	r3, [r3, #24]
 80017c2:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80017c6:	68fb      	ldr	r3, [r7, #12]
 80017c8:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80017ca:	68fb      	ldr	r3, [r7, #12]
 80017cc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80017ce:	4b05      	ldr	r3, [pc, #20]	; (80017e4 <HAL_PCDEx_ActivateLPM+0x44>)
 80017d0:	4313      	orrs	r3, r2
 80017d2:	68fa      	ldr	r2, [r7, #12]
 80017d4:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 80017d6:	2300      	movs	r3, #0
}
 80017d8:	4618      	mov	r0, r3
 80017da:	3714      	adds	r7, #20
 80017dc:	46bd      	mov	sp, r7
 80017de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e2:	4770      	bx	lr
 80017e4:	10000003 	.word	0x10000003

080017e8 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80017e8:	b480      	push	{r7}
 80017ea:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80017ec:	4b05      	ldr	r3, [pc, #20]	; (8001804 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	4a04      	ldr	r2, [pc, #16]	; (8001804 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80017f2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80017f6:	6013      	str	r3, [r2, #0]
}
 80017f8:	bf00      	nop
 80017fa:	46bd      	mov	sp, r7
 80017fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001800:	4770      	bx	lr
 8001802:	bf00      	nop
 8001804:	40007000 	.word	0x40007000

08001808 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8001808:	b580      	push	{r7, lr}
 800180a:	b082      	sub	sp, #8
 800180c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 800180e:	2300      	movs	r3, #0
 8001810:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8001812:	4b23      	ldr	r3, [pc, #140]	; (80018a0 <HAL_PWREx_EnableOverDrive+0x98>)
 8001814:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001816:	4a22      	ldr	r2, [pc, #136]	; (80018a0 <HAL_PWREx_EnableOverDrive+0x98>)
 8001818:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800181c:	6413      	str	r3, [r2, #64]	; 0x40
 800181e:	4b20      	ldr	r3, [pc, #128]	; (80018a0 <HAL_PWREx_EnableOverDrive+0x98>)
 8001820:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001822:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001826:	603b      	str	r3, [r7, #0]
 8001828:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800182a:	4b1e      	ldr	r3, [pc, #120]	; (80018a4 <HAL_PWREx_EnableOverDrive+0x9c>)
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	4a1d      	ldr	r2, [pc, #116]	; (80018a4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001830:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001834:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001836:	f7ff fad3 	bl	8000de0 <HAL_GetTick>
 800183a:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800183c:	e009      	b.n	8001852 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800183e:	f7ff facf 	bl	8000de0 <HAL_GetTick>
 8001842:	4602      	mov	r2, r0
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	1ad3      	subs	r3, r2, r3
 8001848:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800184c:	d901      	bls.n	8001852 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 800184e:	2303      	movs	r3, #3
 8001850:	e022      	b.n	8001898 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001852:	4b14      	ldr	r3, [pc, #80]	; (80018a4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001854:	685b      	ldr	r3, [r3, #4]
 8001856:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800185a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800185e:	d1ee      	bne.n	800183e <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8001860:	4b10      	ldr	r3, [pc, #64]	; (80018a4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	4a0f      	ldr	r2, [pc, #60]	; (80018a4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001866:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800186a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800186c:	f7ff fab8 	bl	8000de0 <HAL_GetTick>
 8001870:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001872:	e009      	b.n	8001888 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001874:	f7ff fab4 	bl	8000de0 <HAL_GetTick>
 8001878:	4602      	mov	r2, r0
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	1ad3      	subs	r3, r2, r3
 800187e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001882:	d901      	bls.n	8001888 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8001884:	2303      	movs	r3, #3
 8001886:	e007      	b.n	8001898 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001888:	4b06      	ldr	r3, [pc, #24]	; (80018a4 <HAL_PWREx_EnableOverDrive+0x9c>)
 800188a:	685b      	ldr	r3, [r3, #4]
 800188c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001890:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001894:	d1ee      	bne.n	8001874 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8001896:	2300      	movs	r3, #0
}
 8001898:	4618      	mov	r0, r3
 800189a:	3708      	adds	r7, #8
 800189c:	46bd      	mov	sp, r7
 800189e:	bd80      	pop	{r7, pc}
 80018a0:	40023800 	.word	0x40023800
 80018a4:	40007000 	.word	0x40007000

080018a8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80018a8:	b580      	push	{r7, lr}
 80018aa:	b086      	sub	sp, #24
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80018b0:	2300      	movs	r3, #0
 80018b2:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d101      	bne.n	80018be <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80018ba:	2301      	movs	r3, #1
 80018bc:	e291      	b.n	8001de2 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	f003 0301 	and.w	r3, r3, #1
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	f000 8087 	beq.w	80019da <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80018cc:	4b96      	ldr	r3, [pc, #600]	; (8001b28 <HAL_RCC_OscConfig+0x280>)
 80018ce:	689b      	ldr	r3, [r3, #8]
 80018d0:	f003 030c 	and.w	r3, r3, #12
 80018d4:	2b04      	cmp	r3, #4
 80018d6:	d00c      	beq.n	80018f2 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80018d8:	4b93      	ldr	r3, [pc, #588]	; (8001b28 <HAL_RCC_OscConfig+0x280>)
 80018da:	689b      	ldr	r3, [r3, #8]
 80018dc:	f003 030c 	and.w	r3, r3, #12
 80018e0:	2b08      	cmp	r3, #8
 80018e2:	d112      	bne.n	800190a <HAL_RCC_OscConfig+0x62>
 80018e4:	4b90      	ldr	r3, [pc, #576]	; (8001b28 <HAL_RCC_OscConfig+0x280>)
 80018e6:	685b      	ldr	r3, [r3, #4]
 80018e8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80018ec:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80018f0:	d10b      	bne.n	800190a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80018f2:	4b8d      	ldr	r3, [pc, #564]	; (8001b28 <HAL_RCC_OscConfig+0x280>)
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d06c      	beq.n	80019d8 <HAL_RCC_OscConfig+0x130>
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	685b      	ldr	r3, [r3, #4]
 8001902:	2b00      	cmp	r3, #0
 8001904:	d168      	bne.n	80019d8 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8001906:	2301      	movs	r3, #1
 8001908:	e26b      	b.n	8001de2 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	685b      	ldr	r3, [r3, #4]
 800190e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001912:	d106      	bne.n	8001922 <HAL_RCC_OscConfig+0x7a>
 8001914:	4b84      	ldr	r3, [pc, #528]	; (8001b28 <HAL_RCC_OscConfig+0x280>)
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	4a83      	ldr	r2, [pc, #524]	; (8001b28 <HAL_RCC_OscConfig+0x280>)
 800191a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800191e:	6013      	str	r3, [r2, #0]
 8001920:	e02e      	b.n	8001980 <HAL_RCC_OscConfig+0xd8>
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	685b      	ldr	r3, [r3, #4]
 8001926:	2b00      	cmp	r3, #0
 8001928:	d10c      	bne.n	8001944 <HAL_RCC_OscConfig+0x9c>
 800192a:	4b7f      	ldr	r3, [pc, #508]	; (8001b28 <HAL_RCC_OscConfig+0x280>)
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	4a7e      	ldr	r2, [pc, #504]	; (8001b28 <HAL_RCC_OscConfig+0x280>)
 8001930:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001934:	6013      	str	r3, [r2, #0]
 8001936:	4b7c      	ldr	r3, [pc, #496]	; (8001b28 <HAL_RCC_OscConfig+0x280>)
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	4a7b      	ldr	r2, [pc, #492]	; (8001b28 <HAL_RCC_OscConfig+0x280>)
 800193c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001940:	6013      	str	r3, [r2, #0]
 8001942:	e01d      	b.n	8001980 <HAL_RCC_OscConfig+0xd8>
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	685b      	ldr	r3, [r3, #4]
 8001948:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800194c:	d10c      	bne.n	8001968 <HAL_RCC_OscConfig+0xc0>
 800194e:	4b76      	ldr	r3, [pc, #472]	; (8001b28 <HAL_RCC_OscConfig+0x280>)
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	4a75      	ldr	r2, [pc, #468]	; (8001b28 <HAL_RCC_OscConfig+0x280>)
 8001954:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001958:	6013      	str	r3, [r2, #0]
 800195a:	4b73      	ldr	r3, [pc, #460]	; (8001b28 <HAL_RCC_OscConfig+0x280>)
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	4a72      	ldr	r2, [pc, #456]	; (8001b28 <HAL_RCC_OscConfig+0x280>)
 8001960:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001964:	6013      	str	r3, [r2, #0]
 8001966:	e00b      	b.n	8001980 <HAL_RCC_OscConfig+0xd8>
 8001968:	4b6f      	ldr	r3, [pc, #444]	; (8001b28 <HAL_RCC_OscConfig+0x280>)
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	4a6e      	ldr	r2, [pc, #440]	; (8001b28 <HAL_RCC_OscConfig+0x280>)
 800196e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001972:	6013      	str	r3, [r2, #0]
 8001974:	4b6c      	ldr	r3, [pc, #432]	; (8001b28 <HAL_RCC_OscConfig+0x280>)
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	4a6b      	ldr	r2, [pc, #428]	; (8001b28 <HAL_RCC_OscConfig+0x280>)
 800197a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800197e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	685b      	ldr	r3, [r3, #4]
 8001984:	2b00      	cmp	r3, #0
 8001986:	d013      	beq.n	80019b0 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001988:	f7ff fa2a 	bl	8000de0 <HAL_GetTick>
 800198c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800198e:	e008      	b.n	80019a2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001990:	f7ff fa26 	bl	8000de0 <HAL_GetTick>
 8001994:	4602      	mov	r2, r0
 8001996:	693b      	ldr	r3, [r7, #16]
 8001998:	1ad3      	subs	r3, r2, r3
 800199a:	2b64      	cmp	r3, #100	; 0x64
 800199c:	d901      	bls.n	80019a2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800199e:	2303      	movs	r3, #3
 80019a0:	e21f      	b.n	8001de2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80019a2:	4b61      	ldr	r3, [pc, #388]	; (8001b28 <HAL_RCC_OscConfig+0x280>)
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d0f0      	beq.n	8001990 <HAL_RCC_OscConfig+0xe8>
 80019ae:	e014      	b.n	80019da <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019b0:	f7ff fa16 	bl	8000de0 <HAL_GetTick>
 80019b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80019b6:	e008      	b.n	80019ca <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80019b8:	f7ff fa12 	bl	8000de0 <HAL_GetTick>
 80019bc:	4602      	mov	r2, r0
 80019be:	693b      	ldr	r3, [r7, #16]
 80019c0:	1ad3      	subs	r3, r2, r3
 80019c2:	2b64      	cmp	r3, #100	; 0x64
 80019c4:	d901      	bls.n	80019ca <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80019c6:	2303      	movs	r3, #3
 80019c8:	e20b      	b.n	8001de2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80019ca:	4b57      	ldr	r3, [pc, #348]	; (8001b28 <HAL_RCC_OscConfig+0x280>)
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d1f0      	bne.n	80019b8 <HAL_RCC_OscConfig+0x110>
 80019d6:	e000      	b.n	80019da <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80019d8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	f003 0302 	and.w	r3, r3, #2
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d069      	beq.n	8001aba <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80019e6:	4b50      	ldr	r3, [pc, #320]	; (8001b28 <HAL_RCC_OscConfig+0x280>)
 80019e8:	689b      	ldr	r3, [r3, #8]
 80019ea:	f003 030c 	and.w	r3, r3, #12
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d00b      	beq.n	8001a0a <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80019f2:	4b4d      	ldr	r3, [pc, #308]	; (8001b28 <HAL_RCC_OscConfig+0x280>)
 80019f4:	689b      	ldr	r3, [r3, #8]
 80019f6:	f003 030c 	and.w	r3, r3, #12
 80019fa:	2b08      	cmp	r3, #8
 80019fc:	d11c      	bne.n	8001a38 <HAL_RCC_OscConfig+0x190>
 80019fe:	4b4a      	ldr	r3, [pc, #296]	; (8001b28 <HAL_RCC_OscConfig+0x280>)
 8001a00:	685b      	ldr	r3, [r3, #4]
 8001a02:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d116      	bne.n	8001a38 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001a0a:	4b47      	ldr	r3, [pc, #284]	; (8001b28 <HAL_RCC_OscConfig+0x280>)
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	f003 0302 	and.w	r3, r3, #2
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d005      	beq.n	8001a22 <HAL_RCC_OscConfig+0x17a>
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	68db      	ldr	r3, [r3, #12]
 8001a1a:	2b01      	cmp	r3, #1
 8001a1c:	d001      	beq.n	8001a22 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8001a1e:	2301      	movs	r3, #1
 8001a20:	e1df      	b.n	8001de2 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a22:	4b41      	ldr	r3, [pc, #260]	; (8001b28 <HAL_RCC_OscConfig+0x280>)
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	691b      	ldr	r3, [r3, #16]
 8001a2e:	00db      	lsls	r3, r3, #3
 8001a30:	493d      	ldr	r1, [pc, #244]	; (8001b28 <HAL_RCC_OscConfig+0x280>)
 8001a32:	4313      	orrs	r3, r2
 8001a34:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001a36:	e040      	b.n	8001aba <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	68db      	ldr	r3, [r3, #12]
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d023      	beq.n	8001a88 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001a40:	4b39      	ldr	r3, [pc, #228]	; (8001b28 <HAL_RCC_OscConfig+0x280>)
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	4a38      	ldr	r2, [pc, #224]	; (8001b28 <HAL_RCC_OscConfig+0x280>)
 8001a46:	f043 0301 	orr.w	r3, r3, #1
 8001a4a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a4c:	f7ff f9c8 	bl	8000de0 <HAL_GetTick>
 8001a50:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a52:	e008      	b.n	8001a66 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001a54:	f7ff f9c4 	bl	8000de0 <HAL_GetTick>
 8001a58:	4602      	mov	r2, r0
 8001a5a:	693b      	ldr	r3, [r7, #16]
 8001a5c:	1ad3      	subs	r3, r2, r3
 8001a5e:	2b02      	cmp	r3, #2
 8001a60:	d901      	bls.n	8001a66 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8001a62:	2303      	movs	r3, #3
 8001a64:	e1bd      	b.n	8001de2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a66:	4b30      	ldr	r3, [pc, #192]	; (8001b28 <HAL_RCC_OscConfig+0x280>)
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	f003 0302 	and.w	r3, r3, #2
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d0f0      	beq.n	8001a54 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a72:	4b2d      	ldr	r3, [pc, #180]	; (8001b28 <HAL_RCC_OscConfig+0x280>)
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	691b      	ldr	r3, [r3, #16]
 8001a7e:	00db      	lsls	r3, r3, #3
 8001a80:	4929      	ldr	r1, [pc, #164]	; (8001b28 <HAL_RCC_OscConfig+0x280>)
 8001a82:	4313      	orrs	r3, r2
 8001a84:	600b      	str	r3, [r1, #0]
 8001a86:	e018      	b.n	8001aba <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001a88:	4b27      	ldr	r3, [pc, #156]	; (8001b28 <HAL_RCC_OscConfig+0x280>)
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	4a26      	ldr	r2, [pc, #152]	; (8001b28 <HAL_RCC_OscConfig+0x280>)
 8001a8e:	f023 0301 	bic.w	r3, r3, #1
 8001a92:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a94:	f7ff f9a4 	bl	8000de0 <HAL_GetTick>
 8001a98:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a9a:	e008      	b.n	8001aae <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001a9c:	f7ff f9a0 	bl	8000de0 <HAL_GetTick>
 8001aa0:	4602      	mov	r2, r0
 8001aa2:	693b      	ldr	r3, [r7, #16]
 8001aa4:	1ad3      	subs	r3, r2, r3
 8001aa6:	2b02      	cmp	r3, #2
 8001aa8:	d901      	bls.n	8001aae <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001aaa:	2303      	movs	r3, #3
 8001aac:	e199      	b.n	8001de2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001aae:	4b1e      	ldr	r3, [pc, #120]	; (8001b28 <HAL_RCC_OscConfig+0x280>)
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	f003 0302 	and.w	r3, r3, #2
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d1f0      	bne.n	8001a9c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	f003 0308 	and.w	r3, r3, #8
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d038      	beq.n	8001b38 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	695b      	ldr	r3, [r3, #20]
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d019      	beq.n	8001b02 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001ace:	4b16      	ldr	r3, [pc, #88]	; (8001b28 <HAL_RCC_OscConfig+0x280>)
 8001ad0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001ad2:	4a15      	ldr	r2, [pc, #84]	; (8001b28 <HAL_RCC_OscConfig+0x280>)
 8001ad4:	f043 0301 	orr.w	r3, r3, #1
 8001ad8:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ada:	f7ff f981 	bl	8000de0 <HAL_GetTick>
 8001ade:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001ae0:	e008      	b.n	8001af4 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001ae2:	f7ff f97d 	bl	8000de0 <HAL_GetTick>
 8001ae6:	4602      	mov	r2, r0
 8001ae8:	693b      	ldr	r3, [r7, #16]
 8001aea:	1ad3      	subs	r3, r2, r3
 8001aec:	2b02      	cmp	r3, #2
 8001aee:	d901      	bls.n	8001af4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001af0:	2303      	movs	r3, #3
 8001af2:	e176      	b.n	8001de2 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001af4:	4b0c      	ldr	r3, [pc, #48]	; (8001b28 <HAL_RCC_OscConfig+0x280>)
 8001af6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001af8:	f003 0302 	and.w	r3, r3, #2
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d0f0      	beq.n	8001ae2 <HAL_RCC_OscConfig+0x23a>
 8001b00:	e01a      	b.n	8001b38 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001b02:	4b09      	ldr	r3, [pc, #36]	; (8001b28 <HAL_RCC_OscConfig+0x280>)
 8001b04:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001b06:	4a08      	ldr	r2, [pc, #32]	; (8001b28 <HAL_RCC_OscConfig+0x280>)
 8001b08:	f023 0301 	bic.w	r3, r3, #1
 8001b0c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b0e:	f7ff f967 	bl	8000de0 <HAL_GetTick>
 8001b12:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001b14:	e00a      	b.n	8001b2c <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001b16:	f7ff f963 	bl	8000de0 <HAL_GetTick>
 8001b1a:	4602      	mov	r2, r0
 8001b1c:	693b      	ldr	r3, [r7, #16]
 8001b1e:	1ad3      	subs	r3, r2, r3
 8001b20:	2b02      	cmp	r3, #2
 8001b22:	d903      	bls.n	8001b2c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8001b24:	2303      	movs	r3, #3
 8001b26:	e15c      	b.n	8001de2 <HAL_RCC_OscConfig+0x53a>
 8001b28:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001b2c:	4b91      	ldr	r3, [pc, #580]	; (8001d74 <HAL_RCC_OscConfig+0x4cc>)
 8001b2e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001b30:	f003 0302 	and.w	r3, r3, #2
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d1ee      	bne.n	8001b16 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	f003 0304 	and.w	r3, r3, #4
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	f000 80a4 	beq.w	8001c8e <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001b46:	4b8b      	ldr	r3, [pc, #556]	; (8001d74 <HAL_RCC_OscConfig+0x4cc>)
 8001b48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d10d      	bne.n	8001b6e <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8001b52:	4b88      	ldr	r3, [pc, #544]	; (8001d74 <HAL_RCC_OscConfig+0x4cc>)
 8001b54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b56:	4a87      	ldr	r2, [pc, #540]	; (8001d74 <HAL_RCC_OscConfig+0x4cc>)
 8001b58:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b5c:	6413      	str	r3, [r2, #64]	; 0x40
 8001b5e:	4b85      	ldr	r3, [pc, #532]	; (8001d74 <HAL_RCC_OscConfig+0x4cc>)
 8001b60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b62:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b66:	60bb      	str	r3, [r7, #8]
 8001b68:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001b6a:	2301      	movs	r3, #1
 8001b6c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001b6e:	4b82      	ldr	r3, [pc, #520]	; (8001d78 <HAL_RCC_OscConfig+0x4d0>)
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d118      	bne.n	8001bac <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8001b7a:	4b7f      	ldr	r3, [pc, #508]	; (8001d78 <HAL_RCC_OscConfig+0x4d0>)
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	4a7e      	ldr	r2, [pc, #504]	; (8001d78 <HAL_RCC_OscConfig+0x4d0>)
 8001b80:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b84:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001b86:	f7ff f92b 	bl	8000de0 <HAL_GetTick>
 8001b8a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001b8c:	e008      	b.n	8001ba0 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001b8e:	f7ff f927 	bl	8000de0 <HAL_GetTick>
 8001b92:	4602      	mov	r2, r0
 8001b94:	693b      	ldr	r3, [r7, #16]
 8001b96:	1ad3      	subs	r3, r2, r3
 8001b98:	2b64      	cmp	r3, #100	; 0x64
 8001b9a:	d901      	bls.n	8001ba0 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8001b9c:	2303      	movs	r3, #3
 8001b9e:	e120      	b.n	8001de2 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001ba0:	4b75      	ldr	r3, [pc, #468]	; (8001d78 <HAL_RCC_OscConfig+0x4d0>)
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d0f0      	beq.n	8001b8e <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	689b      	ldr	r3, [r3, #8]
 8001bb0:	2b01      	cmp	r3, #1
 8001bb2:	d106      	bne.n	8001bc2 <HAL_RCC_OscConfig+0x31a>
 8001bb4:	4b6f      	ldr	r3, [pc, #444]	; (8001d74 <HAL_RCC_OscConfig+0x4cc>)
 8001bb6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001bb8:	4a6e      	ldr	r2, [pc, #440]	; (8001d74 <HAL_RCC_OscConfig+0x4cc>)
 8001bba:	f043 0301 	orr.w	r3, r3, #1
 8001bbe:	6713      	str	r3, [r2, #112]	; 0x70
 8001bc0:	e02d      	b.n	8001c1e <HAL_RCC_OscConfig+0x376>
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	689b      	ldr	r3, [r3, #8]
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d10c      	bne.n	8001be4 <HAL_RCC_OscConfig+0x33c>
 8001bca:	4b6a      	ldr	r3, [pc, #424]	; (8001d74 <HAL_RCC_OscConfig+0x4cc>)
 8001bcc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001bce:	4a69      	ldr	r2, [pc, #420]	; (8001d74 <HAL_RCC_OscConfig+0x4cc>)
 8001bd0:	f023 0301 	bic.w	r3, r3, #1
 8001bd4:	6713      	str	r3, [r2, #112]	; 0x70
 8001bd6:	4b67      	ldr	r3, [pc, #412]	; (8001d74 <HAL_RCC_OscConfig+0x4cc>)
 8001bd8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001bda:	4a66      	ldr	r2, [pc, #408]	; (8001d74 <HAL_RCC_OscConfig+0x4cc>)
 8001bdc:	f023 0304 	bic.w	r3, r3, #4
 8001be0:	6713      	str	r3, [r2, #112]	; 0x70
 8001be2:	e01c      	b.n	8001c1e <HAL_RCC_OscConfig+0x376>
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	689b      	ldr	r3, [r3, #8]
 8001be8:	2b05      	cmp	r3, #5
 8001bea:	d10c      	bne.n	8001c06 <HAL_RCC_OscConfig+0x35e>
 8001bec:	4b61      	ldr	r3, [pc, #388]	; (8001d74 <HAL_RCC_OscConfig+0x4cc>)
 8001bee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001bf0:	4a60      	ldr	r2, [pc, #384]	; (8001d74 <HAL_RCC_OscConfig+0x4cc>)
 8001bf2:	f043 0304 	orr.w	r3, r3, #4
 8001bf6:	6713      	str	r3, [r2, #112]	; 0x70
 8001bf8:	4b5e      	ldr	r3, [pc, #376]	; (8001d74 <HAL_RCC_OscConfig+0x4cc>)
 8001bfa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001bfc:	4a5d      	ldr	r2, [pc, #372]	; (8001d74 <HAL_RCC_OscConfig+0x4cc>)
 8001bfe:	f043 0301 	orr.w	r3, r3, #1
 8001c02:	6713      	str	r3, [r2, #112]	; 0x70
 8001c04:	e00b      	b.n	8001c1e <HAL_RCC_OscConfig+0x376>
 8001c06:	4b5b      	ldr	r3, [pc, #364]	; (8001d74 <HAL_RCC_OscConfig+0x4cc>)
 8001c08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c0a:	4a5a      	ldr	r2, [pc, #360]	; (8001d74 <HAL_RCC_OscConfig+0x4cc>)
 8001c0c:	f023 0301 	bic.w	r3, r3, #1
 8001c10:	6713      	str	r3, [r2, #112]	; 0x70
 8001c12:	4b58      	ldr	r3, [pc, #352]	; (8001d74 <HAL_RCC_OscConfig+0x4cc>)
 8001c14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c16:	4a57      	ldr	r2, [pc, #348]	; (8001d74 <HAL_RCC_OscConfig+0x4cc>)
 8001c18:	f023 0304 	bic.w	r3, r3, #4
 8001c1c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	689b      	ldr	r3, [r3, #8]
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d015      	beq.n	8001c52 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c26:	f7ff f8db 	bl	8000de0 <HAL_GetTick>
 8001c2a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c2c:	e00a      	b.n	8001c44 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c2e:	f7ff f8d7 	bl	8000de0 <HAL_GetTick>
 8001c32:	4602      	mov	r2, r0
 8001c34:	693b      	ldr	r3, [r7, #16]
 8001c36:	1ad3      	subs	r3, r2, r3
 8001c38:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c3c:	4293      	cmp	r3, r2
 8001c3e:	d901      	bls.n	8001c44 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8001c40:	2303      	movs	r3, #3
 8001c42:	e0ce      	b.n	8001de2 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c44:	4b4b      	ldr	r3, [pc, #300]	; (8001d74 <HAL_RCC_OscConfig+0x4cc>)
 8001c46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c48:	f003 0302 	and.w	r3, r3, #2
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d0ee      	beq.n	8001c2e <HAL_RCC_OscConfig+0x386>
 8001c50:	e014      	b.n	8001c7c <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c52:	f7ff f8c5 	bl	8000de0 <HAL_GetTick>
 8001c56:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001c58:	e00a      	b.n	8001c70 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c5a:	f7ff f8c1 	bl	8000de0 <HAL_GetTick>
 8001c5e:	4602      	mov	r2, r0
 8001c60:	693b      	ldr	r3, [r7, #16]
 8001c62:	1ad3      	subs	r3, r2, r3
 8001c64:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c68:	4293      	cmp	r3, r2
 8001c6a:	d901      	bls.n	8001c70 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8001c6c:	2303      	movs	r3, #3
 8001c6e:	e0b8      	b.n	8001de2 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001c70:	4b40      	ldr	r3, [pc, #256]	; (8001d74 <HAL_RCC_OscConfig+0x4cc>)
 8001c72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c74:	f003 0302 	and.w	r3, r3, #2
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d1ee      	bne.n	8001c5a <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001c7c:	7dfb      	ldrb	r3, [r7, #23]
 8001c7e:	2b01      	cmp	r3, #1
 8001c80:	d105      	bne.n	8001c8e <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001c82:	4b3c      	ldr	r3, [pc, #240]	; (8001d74 <HAL_RCC_OscConfig+0x4cc>)
 8001c84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c86:	4a3b      	ldr	r2, [pc, #236]	; (8001d74 <HAL_RCC_OscConfig+0x4cc>)
 8001c88:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001c8c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	699b      	ldr	r3, [r3, #24]
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	f000 80a4 	beq.w	8001de0 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001c98:	4b36      	ldr	r3, [pc, #216]	; (8001d74 <HAL_RCC_OscConfig+0x4cc>)
 8001c9a:	689b      	ldr	r3, [r3, #8]
 8001c9c:	f003 030c 	and.w	r3, r3, #12
 8001ca0:	2b08      	cmp	r3, #8
 8001ca2:	d06b      	beq.n	8001d7c <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	699b      	ldr	r3, [r3, #24]
 8001ca8:	2b02      	cmp	r3, #2
 8001caa:	d149      	bne.n	8001d40 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001cac:	4b31      	ldr	r3, [pc, #196]	; (8001d74 <HAL_RCC_OscConfig+0x4cc>)
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	4a30      	ldr	r2, [pc, #192]	; (8001d74 <HAL_RCC_OscConfig+0x4cc>)
 8001cb2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001cb6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cb8:	f7ff f892 	bl	8000de0 <HAL_GetTick>
 8001cbc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001cbe:	e008      	b.n	8001cd2 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001cc0:	f7ff f88e 	bl	8000de0 <HAL_GetTick>
 8001cc4:	4602      	mov	r2, r0
 8001cc6:	693b      	ldr	r3, [r7, #16]
 8001cc8:	1ad3      	subs	r3, r2, r3
 8001cca:	2b02      	cmp	r3, #2
 8001ccc:	d901      	bls.n	8001cd2 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8001cce:	2303      	movs	r3, #3
 8001cd0:	e087      	b.n	8001de2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001cd2:	4b28      	ldr	r3, [pc, #160]	; (8001d74 <HAL_RCC_OscConfig+0x4cc>)
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d1f0      	bne.n	8001cc0 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	69da      	ldr	r2, [r3, #28]
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	6a1b      	ldr	r3, [r3, #32]
 8001ce6:	431a      	orrs	r2, r3
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cec:	019b      	lsls	r3, r3, #6
 8001cee:	431a      	orrs	r2, r3
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cf4:	085b      	lsrs	r3, r3, #1
 8001cf6:	3b01      	subs	r3, #1
 8001cf8:	041b      	lsls	r3, r3, #16
 8001cfa:	431a      	orrs	r2, r3
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d00:	061b      	lsls	r3, r3, #24
 8001d02:	4313      	orrs	r3, r2
 8001d04:	4a1b      	ldr	r2, [pc, #108]	; (8001d74 <HAL_RCC_OscConfig+0x4cc>)
 8001d06:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001d0a:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001d0c:	4b19      	ldr	r3, [pc, #100]	; (8001d74 <HAL_RCC_OscConfig+0x4cc>)
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	4a18      	ldr	r2, [pc, #96]	; (8001d74 <HAL_RCC_OscConfig+0x4cc>)
 8001d12:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001d16:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d18:	f7ff f862 	bl	8000de0 <HAL_GetTick>
 8001d1c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001d1e:	e008      	b.n	8001d32 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d20:	f7ff f85e 	bl	8000de0 <HAL_GetTick>
 8001d24:	4602      	mov	r2, r0
 8001d26:	693b      	ldr	r3, [r7, #16]
 8001d28:	1ad3      	subs	r3, r2, r3
 8001d2a:	2b02      	cmp	r3, #2
 8001d2c:	d901      	bls.n	8001d32 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8001d2e:	2303      	movs	r3, #3
 8001d30:	e057      	b.n	8001de2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001d32:	4b10      	ldr	r3, [pc, #64]	; (8001d74 <HAL_RCC_OscConfig+0x4cc>)
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d0f0      	beq.n	8001d20 <HAL_RCC_OscConfig+0x478>
 8001d3e:	e04f      	b.n	8001de0 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d40:	4b0c      	ldr	r3, [pc, #48]	; (8001d74 <HAL_RCC_OscConfig+0x4cc>)
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	4a0b      	ldr	r2, [pc, #44]	; (8001d74 <HAL_RCC_OscConfig+0x4cc>)
 8001d46:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001d4a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d4c:	f7ff f848 	bl	8000de0 <HAL_GetTick>
 8001d50:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001d52:	e008      	b.n	8001d66 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d54:	f7ff f844 	bl	8000de0 <HAL_GetTick>
 8001d58:	4602      	mov	r2, r0
 8001d5a:	693b      	ldr	r3, [r7, #16]
 8001d5c:	1ad3      	subs	r3, r2, r3
 8001d5e:	2b02      	cmp	r3, #2
 8001d60:	d901      	bls.n	8001d66 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8001d62:	2303      	movs	r3, #3
 8001d64:	e03d      	b.n	8001de2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001d66:	4b03      	ldr	r3, [pc, #12]	; (8001d74 <HAL_RCC_OscConfig+0x4cc>)
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d1f0      	bne.n	8001d54 <HAL_RCC_OscConfig+0x4ac>
 8001d72:	e035      	b.n	8001de0 <HAL_RCC_OscConfig+0x538>
 8001d74:	40023800 	.word	0x40023800
 8001d78:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8001d7c:	4b1b      	ldr	r3, [pc, #108]	; (8001dec <HAL_RCC_OscConfig+0x544>)
 8001d7e:	685b      	ldr	r3, [r3, #4]
 8001d80:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	699b      	ldr	r3, [r3, #24]
 8001d86:	2b01      	cmp	r3, #1
 8001d88:	d028      	beq.n	8001ddc <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001d94:	429a      	cmp	r2, r3
 8001d96:	d121      	bne.n	8001ddc <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001da2:	429a      	cmp	r2, r3
 8001da4:	d11a      	bne.n	8001ddc <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001da6:	68fa      	ldr	r2, [r7, #12]
 8001da8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001dac:	4013      	ands	r3, r2
 8001dae:	687a      	ldr	r2, [r7, #4]
 8001db0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001db2:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001db4:	4293      	cmp	r3, r2
 8001db6:	d111      	bne.n	8001ddc <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001dc2:	085b      	lsrs	r3, r3, #1
 8001dc4:	3b01      	subs	r3, #1
 8001dc6:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001dc8:	429a      	cmp	r2, r3
 8001dca:	d107      	bne.n	8001ddc <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001dd6:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001dd8:	429a      	cmp	r2, r3
 8001dda:	d001      	beq.n	8001de0 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8001ddc:	2301      	movs	r3, #1
 8001dde:	e000      	b.n	8001de2 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8001de0:	2300      	movs	r3, #0
}
 8001de2:	4618      	mov	r0, r3
 8001de4:	3718      	adds	r7, #24
 8001de6:	46bd      	mov	sp, r7
 8001de8:	bd80      	pop	{r7, pc}
 8001dea:	bf00      	nop
 8001dec:	40023800 	.word	0x40023800

08001df0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001df0:	b580      	push	{r7, lr}
 8001df2:	b084      	sub	sp, #16
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	6078      	str	r0, [r7, #4]
 8001df8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8001dfa:	2300      	movs	r3, #0
 8001dfc:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d101      	bne.n	8001e08 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001e04:	2301      	movs	r3, #1
 8001e06:	e0d0      	b.n	8001faa <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001e08:	4b6a      	ldr	r3, [pc, #424]	; (8001fb4 <HAL_RCC_ClockConfig+0x1c4>)
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	f003 030f 	and.w	r3, r3, #15
 8001e10:	683a      	ldr	r2, [r7, #0]
 8001e12:	429a      	cmp	r2, r3
 8001e14:	d910      	bls.n	8001e38 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e16:	4b67      	ldr	r3, [pc, #412]	; (8001fb4 <HAL_RCC_ClockConfig+0x1c4>)
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	f023 020f 	bic.w	r2, r3, #15
 8001e1e:	4965      	ldr	r1, [pc, #404]	; (8001fb4 <HAL_RCC_ClockConfig+0x1c4>)
 8001e20:	683b      	ldr	r3, [r7, #0]
 8001e22:	4313      	orrs	r3, r2
 8001e24:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e26:	4b63      	ldr	r3, [pc, #396]	; (8001fb4 <HAL_RCC_ClockConfig+0x1c4>)
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	f003 030f 	and.w	r3, r3, #15
 8001e2e:	683a      	ldr	r2, [r7, #0]
 8001e30:	429a      	cmp	r2, r3
 8001e32:	d001      	beq.n	8001e38 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001e34:	2301      	movs	r3, #1
 8001e36:	e0b8      	b.n	8001faa <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	f003 0302 	and.w	r3, r3, #2
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d020      	beq.n	8001e86 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	f003 0304 	and.w	r3, r3, #4
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d005      	beq.n	8001e5c <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001e50:	4b59      	ldr	r3, [pc, #356]	; (8001fb8 <HAL_RCC_ClockConfig+0x1c8>)
 8001e52:	689b      	ldr	r3, [r3, #8]
 8001e54:	4a58      	ldr	r2, [pc, #352]	; (8001fb8 <HAL_RCC_ClockConfig+0x1c8>)
 8001e56:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001e5a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	f003 0308 	and.w	r3, r3, #8
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d005      	beq.n	8001e74 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001e68:	4b53      	ldr	r3, [pc, #332]	; (8001fb8 <HAL_RCC_ClockConfig+0x1c8>)
 8001e6a:	689b      	ldr	r3, [r3, #8]
 8001e6c:	4a52      	ldr	r2, [pc, #328]	; (8001fb8 <HAL_RCC_ClockConfig+0x1c8>)
 8001e6e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001e72:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001e74:	4b50      	ldr	r3, [pc, #320]	; (8001fb8 <HAL_RCC_ClockConfig+0x1c8>)
 8001e76:	689b      	ldr	r3, [r3, #8]
 8001e78:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	689b      	ldr	r3, [r3, #8]
 8001e80:	494d      	ldr	r1, [pc, #308]	; (8001fb8 <HAL_RCC_ClockConfig+0x1c8>)
 8001e82:	4313      	orrs	r3, r2
 8001e84:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	f003 0301 	and.w	r3, r3, #1
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d040      	beq.n	8001f14 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	685b      	ldr	r3, [r3, #4]
 8001e96:	2b01      	cmp	r3, #1
 8001e98:	d107      	bne.n	8001eaa <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e9a:	4b47      	ldr	r3, [pc, #284]	; (8001fb8 <HAL_RCC_ClockConfig+0x1c8>)
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d115      	bne.n	8001ed2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001ea6:	2301      	movs	r3, #1
 8001ea8:	e07f      	b.n	8001faa <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	685b      	ldr	r3, [r3, #4]
 8001eae:	2b02      	cmp	r3, #2
 8001eb0:	d107      	bne.n	8001ec2 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001eb2:	4b41      	ldr	r3, [pc, #260]	; (8001fb8 <HAL_RCC_ClockConfig+0x1c8>)
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d109      	bne.n	8001ed2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001ebe:	2301      	movs	r3, #1
 8001ec0:	e073      	b.n	8001faa <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ec2:	4b3d      	ldr	r3, [pc, #244]	; (8001fb8 <HAL_RCC_ClockConfig+0x1c8>)
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	f003 0302 	and.w	r3, r3, #2
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d101      	bne.n	8001ed2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001ece:	2301      	movs	r3, #1
 8001ed0:	e06b      	b.n	8001faa <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001ed2:	4b39      	ldr	r3, [pc, #228]	; (8001fb8 <HAL_RCC_ClockConfig+0x1c8>)
 8001ed4:	689b      	ldr	r3, [r3, #8]
 8001ed6:	f023 0203 	bic.w	r2, r3, #3
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	685b      	ldr	r3, [r3, #4]
 8001ede:	4936      	ldr	r1, [pc, #216]	; (8001fb8 <HAL_RCC_ClockConfig+0x1c8>)
 8001ee0:	4313      	orrs	r3, r2
 8001ee2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001ee4:	f7fe ff7c 	bl	8000de0 <HAL_GetTick>
 8001ee8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001eea:	e00a      	b.n	8001f02 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001eec:	f7fe ff78 	bl	8000de0 <HAL_GetTick>
 8001ef0:	4602      	mov	r2, r0
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	1ad3      	subs	r3, r2, r3
 8001ef6:	f241 3288 	movw	r2, #5000	; 0x1388
 8001efa:	4293      	cmp	r3, r2
 8001efc:	d901      	bls.n	8001f02 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8001efe:	2303      	movs	r3, #3
 8001f00:	e053      	b.n	8001faa <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f02:	4b2d      	ldr	r3, [pc, #180]	; (8001fb8 <HAL_RCC_ClockConfig+0x1c8>)
 8001f04:	689b      	ldr	r3, [r3, #8]
 8001f06:	f003 020c 	and.w	r2, r3, #12
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	685b      	ldr	r3, [r3, #4]
 8001f0e:	009b      	lsls	r3, r3, #2
 8001f10:	429a      	cmp	r2, r3
 8001f12:	d1eb      	bne.n	8001eec <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001f14:	4b27      	ldr	r3, [pc, #156]	; (8001fb4 <HAL_RCC_ClockConfig+0x1c4>)
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	f003 030f 	and.w	r3, r3, #15
 8001f1c:	683a      	ldr	r2, [r7, #0]
 8001f1e:	429a      	cmp	r2, r3
 8001f20:	d210      	bcs.n	8001f44 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f22:	4b24      	ldr	r3, [pc, #144]	; (8001fb4 <HAL_RCC_ClockConfig+0x1c4>)
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	f023 020f 	bic.w	r2, r3, #15
 8001f2a:	4922      	ldr	r1, [pc, #136]	; (8001fb4 <HAL_RCC_ClockConfig+0x1c4>)
 8001f2c:	683b      	ldr	r3, [r7, #0]
 8001f2e:	4313      	orrs	r3, r2
 8001f30:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f32:	4b20      	ldr	r3, [pc, #128]	; (8001fb4 <HAL_RCC_ClockConfig+0x1c4>)
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	f003 030f 	and.w	r3, r3, #15
 8001f3a:	683a      	ldr	r2, [r7, #0]
 8001f3c:	429a      	cmp	r2, r3
 8001f3e:	d001      	beq.n	8001f44 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8001f40:	2301      	movs	r3, #1
 8001f42:	e032      	b.n	8001faa <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	f003 0304 	and.w	r3, r3, #4
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d008      	beq.n	8001f62 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001f50:	4b19      	ldr	r3, [pc, #100]	; (8001fb8 <HAL_RCC_ClockConfig+0x1c8>)
 8001f52:	689b      	ldr	r3, [r3, #8]
 8001f54:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	68db      	ldr	r3, [r3, #12]
 8001f5c:	4916      	ldr	r1, [pc, #88]	; (8001fb8 <HAL_RCC_ClockConfig+0x1c8>)
 8001f5e:	4313      	orrs	r3, r2
 8001f60:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	f003 0308 	and.w	r3, r3, #8
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d009      	beq.n	8001f82 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001f6e:	4b12      	ldr	r3, [pc, #72]	; (8001fb8 <HAL_RCC_ClockConfig+0x1c8>)
 8001f70:	689b      	ldr	r3, [r3, #8]
 8001f72:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	691b      	ldr	r3, [r3, #16]
 8001f7a:	00db      	lsls	r3, r3, #3
 8001f7c:	490e      	ldr	r1, [pc, #56]	; (8001fb8 <HAL_RCC_ClockConfig+0x1c8>)
 8001f7e:	4313      	orrs	r3, r2
 8001f80:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001f82:	f000 f821 	bl	8001fc8 <HAL_RCC_GetSysClockFreq>
 8001f86:	4602      	mov	r2, r0
 8001f88:	4b0b      	ldr	r3, [pc, #44]	; (8001fb8 <HAL_RCC_ClockConfig+0x1c8>)
 8001f8a:	689b      	ldr	r3, [r3, #8]
 8001f8c:	091b      	lsrs	r3, r3, #4
 8001f8e:	f003 030f 	and.w	r3, r3, #15
 8001f92:	490a      	ldr	r1, [pc, #40]	; (8001fbc <HAL_RCC_ClockConfig+0x1cc>)
 8001f94:	5ccb      	ldrb	r3, [r1, r3]
 8001f96:	fa22 f303 	lsr.w	r3, r2, r3
 8001f9a:	4a09      	ldr	r2, [pc, #36]	; (8001fc0 <HAL_RCC_ClockConfig+0x1d0>)
 8001f9c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001f9e:	4b09      	ldr	r3, [pc, #36]	; (8001fc4 <HAL_RCC_ClockConfig+0x1d4>)
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	4618      	mov	r0, r3
 8001fa4:	f7fe fed8 	bl	8000d58 <HAL_InitTick>

  return HAL_OK;
 8001fa8:	2300      	movs	r3, #0
}
 8001faa:	4618      	mov	r0, r3
 8001fac:	3710      	adds	r7, #16
 8001fae:	46bd      	mov	sp, r7
 8001fb0:	bd80      	pop	{r7, pc}
 8001fb2:	bf00      	nop
 8001fb4:	40023c00 	.word	0x40023c00
 8001fb8:	40023800 	.word	0x40023800
 8001fbc:	08004c5c 	.word	0x08004c5c
 8001fc0:	20000000 	.word	0x20000000
 8001fc4:	20000004 	.word	0x20000004

08001fc8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001fc8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001fcc:	b094      	sub	sp, #80	; 0x50
 8001fce:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8001fd0:	2300      	movs	r3, #0
 8001fd2:	647b      	str	r3, [r7, #68]	; 0x44
 8001fd4:	2300      	movs	r3, #0
 8001fd6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001fd8:	2300      	movs	r3, #0
 8001fda:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 8001fdc:	2300      	movs	r3, #0
 8001fde:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001fe0:	4b79      	ldr	r3, [pc, #484]	; (80021c8 <HAL_RCC_GetSysClockFreq+0x200>)
 8001fe2:	689b      	ldr	r3, [r3, #8]
 8001fe4:	f003 030c 	and.w	r3, r3, #12
 8001fe8:	2b08      	cmp	r3, #8
 8001fea:	d00d      	beq.n	8002008 <HAL_RCC_GetSysClockFreq+0x40>
 8001fec:	2b08      	cmp	r3, #8
 8001fee:	f200 80e1 	bhi.w	80021b4 <HAL_RCC_GetSysClockFreq+0x1ec>
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d002      	beq.n	8001ffc <HAL_RCC_GetSysClockFreq+0x34>
 8001ff6:	2b04      	cmp	r3, #4
 8001ff8:	d003      	beq.n	8002002 <HAL_RCC_GetSysClockFreq+0x3a>
 8001ffa:	e0db      	b.n	80021b4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001ffc:	4b73      	ldr	r3, [pc, #460]	; (80021cc <HAL_RCC_GetSysClockFreq+0x204>)
 8001ffe:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002000:	e0db      	b.n	80021ba <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002002:	4b73      	ldr	r3, [pc, #460]	; (80021d0 <HAL_RCC_GetSysClockFreq+0x208>)
 8002004:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002006:	e0d8      	b.n	80021ba <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002008:	4b6f      	ldr	r3, [pc, #444]	; (80021c8 <HAL_RCC_GetSysClockFreq+0x200>)
 800200a:	685b      	ldr	r3, [r3, #4]
 800200c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002010:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8002012:	4b6d      	ldr	r3, [pc, #436]	; (80021c8 <HAL_RCC_GetSysClockFreq+0x200>)
 8002014:	685b      	ldr	r3, [r3, #4]
 8002016:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800201a:	2b00      	cmp	r3, #0
 800201c:	d063      	beq.n	80020e6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800201e:	4b6a      	ldr	r3, [pc, #424]	; (80021c8 <HAL_RCC_GetSysClockFreq+0x200>)
 8002020:	685b      	ldr	r3, [r3, #4]
 8002022:	099b      	lsrs	r3, r3, #6
 8002024:	2200      	movs	r2, #0
 8002026:	63bb      	str	r3, [r7, #56]	; 0x38
 8002028:	63fa      	str	r2, [r7, #60]	; 0x3c
 800202a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800202c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002030:	633b      	str	r3, [r7, #48]	; 0x30
 8002032:	2300      	movs	r3, #0
 8002034:	637b      	str	r3, [r7, #52]	; 0x34
 8002036:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800203a:	4622      	mov	r2, r4
 800203c:	462b      	mov	r3, r5
 800203e:	f04f 0000 	mov.w	r0, #0
 8002042:	f04f 0100 	mov.w	r1, #0
 8002046:	0159      	lsls	r1, r3, #5
 8002048:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800204c:	0150      	lsls	r0, r2, #5
 800204e:	4602      	mov	r2, r0
 8002050:	460b      	mov	r3, r1
 8002052:	4621      	mov	r1, r4
 8002054:	1a51      	subs	r1, r2, r1
 8002056:	6139      	str	r1, [r7, #16]
 8002058:	4629      	mov	r1, r5
 800205a:	eb63 0301 	sbc.w	r3, r3, r1
 800205e:	617b      	str	r3, [r7, #20]
 8002060:	f04f 0200 	mov.w	r2, #0
 8002064:	f04f 0300 	mov.w	r3, #0
 8002068:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800206c:	4659      	mov	r1, fp
 800206e:	018b      	lsls	r3, r1, #6
 8002070:	4651      	mov	r1, sl
 8002072:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002076:	4651      	mov	r1, sl
 8002078:	018a      	lsls	r2, r1, #6
 800207a:	4651      	mov	r1, sl
 800207c:	ebb2 0801 	subs.w	r8, r2, r1
 8002080:	4659      	mov	r1, fp
 8002082:	eb63 0901 	sbc.w	r9, r3, r1
 8002086:	f04f 0200 	mov.w	r2, #0
 800208a:	f04f 0300 	mov.w	r3, #0
 800208e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002092:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002096:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800209a:	4690      	mov	r8, r2
 800209c:	4699      	mov	r9, r3
 800209e:	4623      	mov	r3, r4
 80020a0:	eb18 0303 	adds.w	r3, r8, r3
 80020a4:	60bb      	str	r3, [r7, #8]
 80020a6:	462b      	mov	r3, r5
 80020a8:	eb49 0303 	adc.w	r3, r9, r3
 80020ac:	60fb      	str	r3, [r7, #12]
 80020ae:	f04f 0200 	mov.w	r2, #0
 80020b2:	f04f 0300 	mov.w	r3, #0
 80020b6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80020ba:	4629      	mov	r1, r5
 80020bc:	024b      	lsls	r3, r1, #9
 80020be:	4621      	mov	r1, r4
 80020c0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80020c4:	4621      	mov	r1, r4
 80020c6:	024a      	lsls	r2, r1, #9
 80020c8:	4610      	mov	r0, r2
 80020ca:	4619      	mov	r1, r3
 80020cc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80020ce:	2200      	movs	r2, #0
 80020d0:	62bb      	str	r3, [r7, #40]	; 0x28
 80020d2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80020d4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80020d8:	f7fe f8a2 	bl	8000220 <__aeabi_uldivmod>
 80020dc:	4602      	mov	r2, r0
 80020de:	460b      	mov	r3, r1
 80020e0:	4613      	mov	r3, r2
 80020e2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80020e4:	e058      	b.n	8002198 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80020e6:	4b38      	ldr	r3, [pc, #224]	; (80021c8 <HAL_RCC_GetSysClockFreq+0x200>)
 80020e8:	685b      	ldr	r3, [r3, #4]
 80020ea:	099b      	lsrs	r3, r3, #6
 80020ec:	2200      	movs	r2, #0
 80020ee:	4618      	mov	r0, r3
 80020f0:	4611      	mov	r1, r2
 80020f2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80020f6:	623b      	str	r3, [r7, #32]
 80020f8:	2300      	movs	r3, #0
 80020fa:	627b      	str	r3, [r7, #36]	; 0x24
 80020fc:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002100:	4642      	mov	r2, r8
 8002102:	464b      	mov	r3, r9
 8002104:	f04f 0000 	mov.w	r0, #0
 8002108:	f04f 0100 	mov.w	r1, #0
 800210c:	0159      	lsls	r1, r3, #5
 800210e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002112:	0150      	lsls	r0, r2, #5
 8002114:	4602      	mov	r2, r0
 8002116:	460b      	mov	r3, r1
 8002118:	4641      	mov	r1, r8
 800211a:	ebb2 0a01 	subs.w	sl, r2, r1
 800211e:	4649      	mov	r1, r9
 8002120:	eb63 0b01 	sbc.w	fp, r3, r1
 8002124:	f04f 0200 	mov.w	r2, #0
 8002128:	f04f 0300 	mov.w	r3, #0
 800212c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002130:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002134:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002138:	ebb2 040a 	subs.w	r4, r2, sl
 800213c:	eb63 050b 	sbc.w	r5, r3, fp
 8002140:	f04f 0200 	mov.w	r2, #0
 8002144:	f04f 0300 	mov.w	r3, #0
 8002148:	00eb      	lsls	r3, r5, #3
 800214a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800214e:	00e2      	lsls	r2, r4, #3
 8002150:	4614      	mov	r4, r2
 8002152:	461d      	mov	r5, r3
 8002154:	4643      	mov	r3, r8
 8002156:	18e3      	adds	r3, r4, r3
 8002158:	603b      	str	r3, [r7, #0]
 800215a:	464b      	mov	r3, r9
 800215c:	eb45 0303 	adc.w	r3, r5, r3
 8002160:	607b      	str	r3, [r7, #4]
 8002162:	f04f 0200 	mov.w	r2, #0
 8002166:	f04f 0300 	mov.w	r3, #0
 800216a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800216e:	4629      	mov	r1, r5
 8002170:	028b      	lsls	r3, r1, #10
 8002172:	4621      	mov	r1, r4
 8002174:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002178:	4621      	mov	r1, r4
 800217a:	028a      	lsls	r2, r1, #10
 800217c:	4610      	mov	r0, r2
 800217e:	4619      	mov	r1, r3
 8002180:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002182:	2200      	movs	r2, #0
 8002184:	61bb      	str	r3, [r7, #24]
 8002186:	61fa      	str	r2, [r7, #28]
 8002188:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800218c:	f7fe f848 	bl	8000220 <__aeabi_uldivmod>
 8002190:	4602      	mov	r2, r0
 8002192:	460b      	mov	r3, r1
 8002194:	4613      	mov	r3, r2
 8002196:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8002198:	4b0b      	ldr	r3, [pc, #44]	; (80021c8 <HAL_RCC_GetSysClockFreq+0x200>)
 800219a:	685b      	ldr	r3, [r3, #4]
 800219c:	0c1b      	lsrs	r3, r3, #16
 800219e:	f003 0303 	and.w	r3, r3, #3
 80021a2:	3301      	adds	r3, #1
 80021a4:	005b      	lsls	r3, r3, #1
 80021a6:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 80021a8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80021aa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80021ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80021b0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80021b2:	e002      	b.n	80021ba <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80021b4:	4b05      	ldr	r3, [pc, #20]	; (80021cc <HAL_RCC_GetSysClockFreq+0x204>)
 80021b6:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80021b8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80021ba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80021bc:	4618      	mov	r0, r3
 80021be:	3750      	adds	r7, #80	; 0x50
 80021c0:	46bd      	mov	sp, r7
 80021c2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80021c6:	bf00      	nop
 80021c8:	40023800 	.word	0x40023800
 80021cc:	00f42400 	.word	0x00f42400
 80021d0:	007a1200 	.word	0x007a1200

080021d4 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80021d4:	b480      	push	{r7}
 80021d6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80021d8:	4b03      	ldr	r3, [pc, #12]	; (80021e8 <HAL_RCC_GetHCLKFreq+0x14>)
 80021da:	681b      	ldr	r3, [r3, #0]
}
 80021dc:	4618      	mov	r0, r3
 80021de:	46bd      	mov	sp, r7
 80021e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e4:	4770      	bx	lr
 80021e6:	bf00      	nop
 80021e8:	20000000 	.word	0x20000000

080021ec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80021ec:	b580      	push	{r7, lr}
 80021ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80021f0:	f7ff fff0 	bl	80021d4 <HAL_RCC_GetHCLKFreq>
 80021f4:	4602      	mov	r2, r0
 80021f6:	4b05      	ldr	r3, [pc, #20]	; (800220c <HAL_RCC_GetPCLK1Freq+0x20>)
 80021f8:	689b      	ldr	r3, [r3, #8]
 80021fa:	0a9b      	lsrs	r3, r3, #10
 80021fc:	f003 0307 	and.w	r3, r3, #7
 8002200:	4903      	ldr	r1, [pc, #12]	; (8002210 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002202:	5ccb      	ldrb	r3, [r1, r3]
 8002204:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002208:	4618      	mov	r0, r3
 800220a:	bd80      	pop	{r7, pc}
 800220c:	40023800 	.word	0x40023800
 8002210:	08004c6c 	.word	0x08004c6c

08002214 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002214:	b580      	push	{r7, lr}
 8002216:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002218:	f7ff ffdc 	bl	80021d4 <HAL_RCC_GetHCLKFreq>
 800221c:	4602      	mov	r2, r0
 800221e:	4b05      	ldr	r3, [pc, #20]	; (8002234 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002220:	689b      	ldr	r3, [r3, #8]
 8002222:	0b5b      	lsrs	r3, r3, #13
 8002224:	f003 0307 	and.w	r3, r3, #7
 8002228:	4903      	ldr	r1, [pc, #12]	; (8002238 <HAL_RCC_GetPCLK2Freq+0x24>)
 800222a:	5ccb      	ldrb	r3, [r1, r3]
 800222c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002230:	4618      	mov	r0, r3
 8002232:	bd80      	pop	{r7, pc}
 8002234:	40023800 	.word	0x40023800
 8002238:	08004c6c 	.word	0x08004c6c

0800223c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800223c:	b580      	push	{r7, lr}
 800223e:	b088      	sub	sp, #32
 8002240:	af00      	add	r7, sp, #0
 8002242:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8002244:	2300      	movs	r3, #0
 8002246:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8002248:	2300      	movs	r3, #0
 800224a:	613b      	str	r3, [r7, #16]
  uint32_t plli2sused = 0;
 800224c:	2300      	movs	r3, #0
 800224e:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8002250:	2300      	movs	r3, #0
 8002252:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	f003 0301 	and.w	r3, r3, #1
 800225c:	2b00      	cmp	r3, #0
 800225e:	d012      	beq.n	8002286 <HAL_RCCEx_PeriphCLKConfig+0x4a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002260:	4b65      	ldr	r3, [pc, #404]	; (80023f8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002262:	689b      	ldr	r3, [r3, #8]
 8002264:	4a64      	ldr	r2, [pc, #400]	; (80023f8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002266:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800226a:	6093      	str	r3, [r2, #8]
 800226c:	4b62      	ldr	r3, [pc, #392]	; (80023f8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800226e:	689a      	ldr	r2, [r3, #8]
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002274:	4960      	ldr	r1, [pc, #384]	; (80023f8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002276:	4313      	orrs	r3, r2
 8002278:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800227e:	2b00      	cmp	r3, #0
 8002280:	d101      	bne.n	8002286 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      plli2sused = 1;
 8002282:	2301      	movs	r3, #1
 8002284:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800228e:	2b00      	cmp	r3, #0
 8002290:	d017      	beq.n	80022c2 <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002292:	4b59      	ldr	r3, [pc, #356]	; (80023f8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002294:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002298:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80022a0:	4955      	ldr	r1, [pc, #340]	; (80023f8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80022a2:	4313      	orrs	r3, r2
 80022a4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80022ac:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80022b0:	d101      	bne.n	80022b6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
    {
      plli2sused = 1;
 80022b2:	2301      	movs	r3, #1
 80022b4:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d101      	bne.n	80022c2 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      pllsaiused = 1;
 80022be:	2301      	movs	r3, #1
 80022c0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d017      	beq.n	80022fe <HAL_RCCEx_PeriphCLKConfig+0xc2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80022ce:	4b4a      	ldr	r3, [pc, #296]	; (80023f8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80022d0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80022d4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022dc:	4946      	ldr	r1, [pc, #280]	; (80023f8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80022de:	4313      	orrs	r3, r2
 80022e0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022e8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80022ec:	d101      	bne.n	80022f2 <HAL_RCCEx_PeriphCLKConfig+0xb6>
    {
      plli2sused = 1;
 80022ee:	2301      	movs	r3, #1
 80022f0:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d101      	bne.n	80022fe <HAL_RCCEx_PeriphCLKConfig+0xc2>
    {
      pllsaiused = 1;
 80022fa:	2301      	movs	r3, #1
 80022fc:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	f003 0320 	and.w	r3, r3, #32
 8002306:	2b00      	cmp	r3, #0
 8002308:	f000 808b 	beq.w	8002422 <HAL_RCCEx_PeriphCLKConfig+0x1e6>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800230c:	4b3a      	ldr	r3, [pc, #232]	; (80023f8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800230e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002310:	4a39      	ldr	r2, [pc, #228]	; (80023f8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002312:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002316:	6413      	str	r3, [r2, #64]	; 0x40
 8002318:	4b37      	ldr	r3, [pc, #220]	; (80023f8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800231a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800231c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002320:	60fb      	str	r3, [r7, #12]
 8002322:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002324:	4b35      	ldr	r3, [pc, #212]	; (80023fc <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	4a34      	ldr	r2, [pc, #208]	; (80023fc <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800232a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800232e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002330:	f7fe fd56 	bl	8000de0 <HAL_GetTick>
 8002334:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002336:	e008      	b.n	800234a <HAL_RCCEx_PeriphCLKConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002338:	f7fe fd52 	bl	8000de0 <HAL_GetTick>
 800233c:	4602      	mov	r2, r0
 800233e:	697b      	ldr	r3, [r7, #20]
 8002340:	1ad3      	subs	r3, r2, r3
 8002342:	2b64      	cmp	r3, #100	; 0x64
 8002344:	d901      	bls.n	800234a <HAL_RCCEx_PeriphCLKConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002346:	2303      	movs	r3, #3
 8002348:	e2bc      	b.n	80028c4 <HAL_RCCEx_PeriphCLKConfig+0x688>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800234a:	4b2c      	ldr	r3, [pc, #176]	; (80023fc <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002352:	2b00      	cmp	r3, #0
 8002354:	d0f0      	beq.n	8002338 <HAL_RCCEx_PeriphCLKConfig+0xfc>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002356:	4b28      	ldr	r3, [pc, #160]	; (80023f8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002358:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800235a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800235e:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002360:	693b      	ldr	r3, [r7, #16]
 8002362:	2b00      	cmp	r3, #0
 8002364:	d035      	beq.n	80023d2 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800236a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800236e:	693a      	ldr	r2, [r7, #16]
 8002370:	429a      	cmp	r2, r3
 8002372:	d02e      	beq.n	80023d2 <HAL_RCCEx_PeriphCLKConfig+0x196>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002374:	4b20      	ldr	r3, [pc, #128]	; (80023f8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002376:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002378:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800237c:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800237e:	4b1e      	ldr	r3, [pc, #120]	; (80023f8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002380:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002382:	4a1d      	ldr	r2, [pc, #116]	; (80023f8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002384:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002388:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800238a:	4b1b      	ldr	r3, [pc, #108]	; (80023f8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800238c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800238e:	4a1a      	ldr	r2, [pc, #104]	; (80023f8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002390:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002394:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8002396:	4a18      	ldr	r2, [pc, #96]	; (80023f8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002398:	693b      	ldr	r3, [r7, #16]
 800239a:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800239c:	4b16      	ldr	r3, [pc, #88]	; (80023f8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800239e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023a0:	f003 0301 	and.w	r3, r3, #1
 80023a4:	2b01      	cmp	r3, #1
 80023a6:	d114      	bne.n	80023d2 <HAL_RCCEx_PeriphCLKConfig+0x196>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023a8:	f7fe fd1a 	bl	8000de0 <HAL_GetTick>
 80023ac:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80023ae:	e00a      	b.n	80023c6 <HAL_RCCEx_PeriphCLKConfig+0x18a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80023b0:	f7fe fd16 	bl	8000de0 <HAL_GetTick>
 80023b4:	4602      	mov	r2, r0
 80023b6:	697b      	ldr	r3, [r7, #20]
 80023b8:	1ad3      	subs	r3, r2, r3
 80023ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80023be:	4293      	cmp	r3, r2
 80023c0:	d901      	bls.n	80023c6 <HAL_RCCEx_PeriphCLKConfig+0x18a>
          {
            return HAL_TIMEOUT;
 80023c2:	2303      	movs	r3, #3
 80023c4:	e27e      	b.n	80028c4 <HAL_RCCEx_PeriphCLKConfig+0x688>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80023c6:	4b0c      	ldr	r3, [pc, #48]	; (80023f8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80023c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023ca:	f003 0302 	and.w	r3, r3, #2
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d0ee      	beq.n	80023b0 <HAL_RCCEx_PeriphCLKConfig+0x174>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023d6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80023da:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80023de:	d111      	bne.n	8002404 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
 80023e0:	4b05      	ldr	r3, [pc, #20]	; (80023f8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80023e2:	689b      	ldr	r3, [r3, #8]
 80023e4:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	6a99      	ldr	r1, [r3, #40]	; 0x28
 80023ec:	4b04      	ldr	r3, [pc, #16]	; (8002400 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80023ee:	400b      	ands	r3, r1
 80023f0:	4901      	ldr	r1, [pc, #4]	; (80023f8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80023f2:	4313      	orrs	r3, r2
 80023f4:	608b      	str	r3, [r1, #8]
 80023f6:	e00b      	b.n	8002410 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 80023f8:	40023800 	.word	0x40023800
 80023fc:	40007000 	.word	0x40007000
 8002400:	0ffffcff 	.word	0x0ffffcff
 8002404:	4ba4      	ldr	r3, [pc, #656]	; (8002698 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8002406:	689b      	ldr	r3, [r3, #8]
 8002408:	4aa3      	ldr	r2, [pc, #652]	; (8002698 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800240a:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800240e:	6093      	str	r3, [r2, #8]
 8002410:	4ba1      	ldr	r3, [pc, #644]	; (8002698 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8002412:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002418:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800241c:	499e      	ldr	r1, [pc, #632]	; (8002698 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800241e:	4313      	orrs	r3, r2
 8002420:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	f003 0310 	and.w	r3, r3, #16
 800242a:	2b00      	cmp	r3, #0
 800242c:	d010      	beq.n	8002450 <HAL_RCCEx_PeriphCLKConfig+0x214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800242e:	4b9a      	ldr	r3, [pc, #616]	; (8002698 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8002430:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002434:	4a98      	ldr	r2, [pc, #608]	; (8002698 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8002436:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800243a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800243e:	4b96      	ldr	r3, [pc, #600]	; (8002698 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8002440:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002448:	4993      	ldr	r1, [pc, #588]	; (8002698 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800244a:	4313      	orrs	r3, r2
 800244c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002458:	2b00      	cmp	r3, #0
 800245a:	d00a      	beq.n	8002472 <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800245c:	4b8e      	ldr	r3, [pc, #568]	; (8002698 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800245e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002462:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800246a:	498b      	ldr	r1, [pc, #556]	; (8002698 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800246c:	4313      	orrs	r3, r2
 800246e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800247a:	2b00      	cmp	r3, #0
 800247c:	d00a      	beq.n	8002494 <HAL_RCCEx_PeriphCLKConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800247e:	4b86      	ldr	r3, [pc, #536]	; (8002698 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8002480:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002484:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800248c:	4982      	ldr	r1, [pc, #520]	; (8002698 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800248e:	4313      	orrs	r3, r2
 8002490:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800249c:	2b00      	cmp	r3, #0
 800249e:	d00a      	beq.n	80024b6 <HAL_RCCEx_PeriphCLKConfig+0x27a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80024a0:	4b7d      	ldr	r3, [pc, #500]	; (8002698 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80024a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024a6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80024ae:	497a      	ldr	r1, [pc, #488]	; (8002698 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80024b0:	4313      	orrs	r3, r2
 80024b2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d00a      	beq.n	80024d8 <HAL_RCCEx_PeriphCLKConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80024c2:	4b75      	ldr	r3, [pc, #468]	; (8002698 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80024c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024c8:	f023 0203 	bic.w	r2, r3, #3
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80024d0:	4971      	ldr	r1, [pc, #452]	; (8002698 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80024d2:	4313      	orrs	r3, r2
 80024d4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d00a      	beq.n	80024fa <HAL_RCCEx_PeriphCLKConfig+0x2be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80024e4:	4b6c      	ldr	r3, [pc, #432]	; (8002698 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80024e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024ea:	f023 020c 	bic.w	r2, r3, #12
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024f2:	4969      	ldr	r1, [pc, #420]	; (8002698 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80024f4:	4313      	orrs	r3, r2
 80024f6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002502:	2b00      	cmp	r3, #0
 8002504:	d00a      	beq.n	800251c <HAL_RCCEx_PeriphCLKConfig+0x2e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002506:	4b64      	ldr	r3, [pc, #400]	; (8002698 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8002508:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800250c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002514:	4960      	ldr	r1, [pc, #384]	; (8002698 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8002516:	4313      	orrs	r3, r2
 8002518:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002524:	2b00      	cmp	r3, #0
 8002526:	d00a      	beq.n	800253e <HAL_RCCEx_PeriphCLKConfig+0x302>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002528:	4b5b      	ldr	r3, [pc, #364]	; (8002698 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800252a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800252e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002536:	4958      	ldr	r1, [pc, #352]	; (8002698 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8002538:	4313      	orrs	r3, r2
 800253a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002546:	2b00      	cmp	r3, #0
 8002548:	d00a      	beq.n	8002560 <HAL_RCCEx_PeriphCLKConfig+0x324>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800254a:	4b53      	ldr	r3, [pc, #332]	; (8002698 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800254c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002550:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002558:	494f      	ldr	r1, [pc, #316]	; (8002698 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800255a:	4313      	orrs	r3, r2
 800255c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002568:	2b00      	cmp	r3, #0
 800256a:	d00a      	beq.n	8002582 <HAL_RCCEx_PeriphCLKConfig+0x346>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800256c:	4b4a      	ldr	r3, [pc, #296]	; (8002698 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800256e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002572:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800257a:	4947      	ldr	r1, [pc, #284]	; (8002698 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800257c:	4313      	orrs	r3, r2
 800257e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800258a:	2b00      	cmp	r3, #0
 800258c:	d00a      	beq.n	80025a4 <HAL_RCCEx_PeriphCLKConfig+0x368>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 800258e:	4b42      	ldr	r3, [pc, #264]	; (8002698 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8002590:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002594:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800259c:	493e      	ldr	r1, [pc, #248]	; (8002698 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800259e:	4313      	orrs	r3, r2
 80025a0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d00a      	beq.n	80025c6 <HAL_RCCEx_PeriphCLKConfig+0x38a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80025b0:	4b39      	ldr	r3, [pc, #228]	; (8002698 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80025b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025b6:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025be:	4936      	ldr	r1, [pc, #216]	; (8002698 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80025c0:	4313      	orrs	r3, r2
 80025c2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d011      	beq.n	80025f6 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80025d2:	4b31      	ldr	r3, [pc, #196]	; (8002698 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80025d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025d8:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80025e0:	492d      	ldr	r1, [pc, #180]	; (8002698 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80025e2:	4313      	orrs	r3, r2
 80025e4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80025ec:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80025f0:	d101      	bne.n	80025f6 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      pllsaiused = 1;
 80025f2:	2301      	movs	r3, #1
 80025f4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d00a      	beq.n	8002618 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002602:	4b25      	ldr	r3, [pc, #148]	; (8002698 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8002604:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002608:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002610:	4921      	ldr	r1, [pc, #132]	; (8002698 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8002612:	4313      	orrs	r3, r2
 8002614:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002620:	2b00      	cmp	r3, #0
 8002622:	d00a      	beq.n	800263a <HAL_RCCEx_PeriphCLKConfig+0x3fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002624:	4b1c      	ldr	r3, [pc, #112]	; (8002698 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8002626:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800262a:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002632:	4919      	ldr	r1, [pc, #100]	; (8002698 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8002634:	4313      	orrs	r3, r2
 8002636:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002642:	2b00      	cmp	r3, #0
 8002644:	d00a      	beq.n	800265c <HAL_RCCEx_PeriphCLKConfig+0x420>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8002646:	4b14      	ldr	r3, [pc, #80]	; (8002698 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8002648:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800264c:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002654:	4910      	ldr	r1, [pc, #64]	; (8002698 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8002656:	4313      	orrs	r3, r2
 8002658:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2 or I2S */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800265c:	69fb      	ldr	r3, [r7, #28]
 800265e:	2b01      	cmp	r3, #1
 8002660:	d006      	beq.n	8002670 <HAL_RCCEx_PeriphCLKConfig+0x434>
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800266a:	2b00      	cmp	r3, #0
 800266c:	f000 809d 	beq.w	80027aa <HAL_RCCEx_PeriphCLKConfig+0x56e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002670:	4b09      	ldr	r3, [pc, #36]	; (8002698 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	4a08      	ldr	r2, [pc, #32]	; (8002698 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8002676:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800267a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800267c:	f7fe fbb0 	bl	8000de0 <HAL_GetTick>
 8002680:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002682:	e00b      	b.n	800269c <HAL_RCCEx_PeriphCLKConfig+0x460>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002684:	f7fe fbac 	bl	8000de0 <HAL_GetTick>
 8002688:	4602      	mov	r2, r0
 800268a:	697b      	ldr	r3, [r7, #20]
 800268c:	1ad3      	subs	r3, r2, r3
 800268e:	2b64      	cmp	r3, #100	; 0x64
 8002690:	d904      	bls.n	800269c <HAL_RCCEx_PeriphCLKConfig+0x460>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002692:	2303      	movs	r3, #3
 8002694:	e116      	b.n	80028c4 <HAL_RCCEx_PeriphCLKConfig+0x688>
 8002696:	bf00      	nop
 8002698:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800269c:	4b8b      	ldr	r3, [pc, #556]	; (80028cc <HAL_RCCEx_PeriphCLKConfig+0x690>)
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d1ed      	bne.n	8002684 <HAL_RCCEx_PeriphCLKConfig+0x448>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	f003 0301 	and.w	r3, r3, #1
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d017      	beq.n	80026e4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d113      	bne.n	80026e4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80026bc:	4b83      	ldr	r3, [pc, #524]	; (80028cc <HAL_RCCEx_PeriphCLKConfig+0x690>)
 80026be:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80026c2:	0e1b      	lsrs	r3, r3, #24
 80026c4:	f003 030f 	and.w	r3, r3, #15
 80026c8:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, PeriphClkInit->PLLI2S.PLLI2SR);
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	685b      	ldr	r3, [r3, #4]
 80026ce:	019a      	lsls	r2, r3, #6
 80026d0:	693b      	ldr	r3, [r7, #16]
 80026d2:	061b      	lsls	r3, r3, #24
 80026d4:	431a      	orrs	r2, r3
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	689b      	ldr	r3, [r3, #8]
 80026da:	071b      	lsls	r3, r3, #28
 80026dc:	497b      	ldr	r1, [pc, #492]	; (80028cc <HAL_RCCEx_PeriphCLKConfig+0x690>)
 80026de:	4313      	orrs	r3, r2
 80026e0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d004      	beq.n	80026fa <HAL_RCCEx_PeriphCLKConfig+0x4be>
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80026f4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80026f8:	d00a      	beq.n	8002710 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002702:	2b00      	cmp	r3, #0
 8002704:	d024      	beq.n	8002750 <HAL_RCCEx_PeriphCLKConfig+0x514>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800270a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800270e:	d11f      	bne.n	8002750 <HAL_RCCEx_PeriphCLKConfig+0x514>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002710:	4b6e      	ldr	r3, [pc, #440]	; (80028cc <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8002712:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002716:	0f1b      	lsrs	r3, r3, #28
 8002718:	f003 0307 	and.w	r3, r3, #7
 800271c:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg0);
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	685b      	ldr	r3, [r3, #4]
 8002722:	019a      	lsls	r2, r3, #6
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	68db      	ldr	r3, [r3, #12]
 8002728:	061b      	lsls	r3, r3, #24
 800272a:	431a      	orrs	r2, r3
 800272c:	693b      	ldr	r3, [r7, #16]
 800272e:	071b      	lsls	r3, r3, #28
 8002730:	4966      	ldr	r1, [pc, #408]	; (80028cc <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8002732:	4313      	orrs	r3, r2
 8002734:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8002738:	4b64      	ldr	r3, [pc, #400]	; (80028cc <HAL_RCCEx_PeriphCLKConfig+0x690>)
 800273a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800273e:	f023 021f 	bic.w	r2, r3, #31
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	69db      	ldr	r3, [r3, #28]
 8002746:	3b01      	subs	r3, #1
 8002748:	4960      	ldr	r1, [pc, #384]	; (80028cc <HAL_RCCEx_PeriphCLKConfig+0x690>)
 800274a:	4313      	orrs	r3, r2
 800274c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002758:	2b00      	cmp	r3, #0
 800275a:	d00d      	beq.n	8002778 <HAL_RCCEx_PeriphCLKConfig+0x53c>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	685b      	ldr	r3, [r3, #4]
 8002760:	019a      	lsls	r2, r3, #6
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	68db      	ldr	r3, [r3, #12]
 8002766:	061b      	lsls	r3, r3, #24
 8002768:	431a      	orrs	r2, r3
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	689b      	ldr	r3, [r3, #8]
 800276e:	071b      	lsls	r3, r3, #28
 8002770:	4956      	ldr	r1, [pc, #344]	; (80028cc <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8002772:	4313      	orrs	r3, r2
 8002774:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002778:	4b54      	ldr	r3, [pc, #336]	; (80028cc <HAL_RCCEx_PeriphCLKConfig+0x690>)
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	4a53      	ldr	r2, [pc, #332]	; (80028cc <HAL_RCCEx_PeriphCLKConfig+0x690>)
 800277e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002782:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002784:	f7fe fb2c 	bl	8000de0 <HAL_GetTick>
 8002788:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800278a:	e008      	b.n	800279e <HAL_RCCEx_PeriphCLKConfig+0x562>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800278c:	f7fe fb28 	bl	8000de0 <HAL_GetTick>
 8002790:	4602      	mov	r2, r0
 8002792:	697b      	ldr	r3, [r7, #20]
 8002794:	1ad3      	subs	r3, r2, r3
 8002796:	2b64      	cmp	r3, #100	; 0x64
 8002798:	d901      	bls.n	800279e <HAL_RCCEx_PeriphCLKConfig+0x562>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800279a:	2303      	movs	r3, #3
 800279c:	e092      	b.n	80028c4 <HAL_RCCEx_PeriphCLKConfig+0x688>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800279e:	4b4b      	ldr	r3, [pc, #300]	; (80028cc <HAL_RCCEx_PeriphCLKConfig+0x690>)
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d0f0      	beq.n	800278c <HAL_RCCEx_PeriphCLKConfig+0x550>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80027aa:	69bb      	ldr	r3, [r7, #24]
 80027ac:	2b01      	cmp	r3, #1
 80027ae:	f040 8088 	bne.w	80028c2 <HAL_RCCEx_PeriphCLKConfig+0x686>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80027b2:	4b46      	ldr	r3, [pc, #280]	; (80028cc <HAL_RCCEx_PeriphCLKConfig+0x690>)
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	4a45      	ldr	r2, [pc, #276]	; (80028cc <HAL_RCCEx_PeriphCLKConfig+0x690>)
 80027b8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80027bc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80027be:	f7fe fb0f 	bl	8000de0 <HAL_GetTick>
 80027c2:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80027c4:	e008      	b.n	80027d8 <HAL_RCCEx_PeriphCLKConfig+0x59c>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80027c6:	f7fe fb0b 	bl	8000de0 <HAL_GetTick>
 80027ca:	4602      	mov	r2, r0
 80027cc:	697b      	ldr	r3, [r7, #20]
 80027ce:	1ad3      	subs	r3, r2, r3
 80027d0:	2b64      	cmp	r3, #100	; 0x64
 80027d2:	d901      	bls.n	80027d8 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80027d4:	2303      	movs	r3, #3
 80027d6:	e075      	b.n	80028c4 <HAL_RCCEx_PeriphCLKConfig+0x688>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80027d8:	4b3c      	ldr	r3, [pc, #240]	; (80028cc <HAL_RCCEx_PeriphCLKConfig+0x690>)
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80027e0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80027e4:	d0ef      	beq.n	80027c6 <HAL_RCCEx_PeriphCLKConfig+0x58a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d003      	beq.n	80027fa <HAL_RCCEx_PeriphCLKConfig+0x5be>
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d009      	beq.n	800280e <HAL_RCCEx_PeriphCLKConfig+0x5d2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002802:	2b00      	cmp	r3, #0
 8002804:	d024      	beq.n	8002850 <HAL_RCCEx_PeriphCLKConfig+0x614>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800280a:	2b00      	cmp	r3, #0
 800280c:	d120      	bne.n	8002850 <HAL_RCCEx_PeriphCLKConfig+0x614>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800280e:	4b2f      	ldr	r3, [pc, #188]	; (80028cc <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8002810:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002814:	0c1b      	lsrs	r3, r3, #16
 8002816:	f003 0303 	and.w	r3, r3, #3
 800281a:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ);
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	691b      	ldr	r3, [r3, #16]
 8002820:	019a      	lsls	r2, r3, #6
 8002822:	693b      	ldr	r3, [r7, #16]
 8002824:	041b      	lsls	r3, r3, #16
 8002826:	431a      	orrs	r2, r3
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	695b      	ldr	r3, [r3, #20]
 800282c:	061b      	lsls	r3, r3, #24
 800282e:	4927      	ldr	r1, [pc, #156]	; (80028cc <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8002830:	4313      	orrs	r3, r2
 8002832:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8002836:	4b25      	ldr	r3, [pc, #148]	; (80028cc <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8002838:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800283c:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	6a1b      	ldr	r3, [r3, #32]
 8002844:	3b01      	subs	r3, #1
 8002846:	021b      	lsls	r3, r3, #8
 8002848:	4920      	ldr	r1, [pc, #128]	; (80028cc <HAL_RCCEx_PeriphCLKConfig+0x690>)
 800284a:	4313      	orrs	r3, r2
 800284c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002858:	2b00      	cmp	r3, #0
 800285a:	d018      	beq.n	800288e <HAL_RCCEx_PeriphCLKConfig+0x652>
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002860:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002864:	d113      	bne.n	800288e <HAL_RCCEx_PeriphCLKConfig+0x652>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002866:	4b19      	ldr	r3, [pc, #100]	; (80028cc <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8002868:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800286c:	0e1b      	lsrs	r3, r3, #24
 800286e:	f003 030f 	and.w	r3, r3, #15
 8002872:	613b      	str	r3, [r7, #16]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0);
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	691b      	ldr	r3, [r3, #16]
 8002878:	019a      	lsls	r2, r3, #6
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	699b      	ldr	r3, [r3, #24]
 800287e:	041b      	lsls	r3, r3, #16
 8002880:	431a      	orrs	r2, r3
 8002882:	693b      	ldr	r3, [r7, #16]
 8002884:	061b      	lsls	r3, r3, #24
 8002886:	4911      	ldr	r1, [pc, #68]	; (80028cc <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8002888:	4313      	orrs	r3, r2
 800288a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800288e:	4b0f      	ldr	r3, [pc, #60]	; (80028cc <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	4a0e      	ldr	r2, [pc, #56]	; (80028cc <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8002894:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002898:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800289a:	f7fe faa1 	bl	8000de0 <HAL_GetTick>
 800289e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80028a0:	e008      	b.n	80028b4 <HAL_RCCEx_PeriphCLKConfig+0x678>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80028a2:	f7fe fa9d 	bl	8000de0 <HAL_GetTick>
 80028a6:	4602      	mov	r2, r0
 80028a8:	697b      	ldr	r3, [r7, #20]
 80028aa:	1ad3      	subs	r3, r2, r3
 80028ac:	2b64      	cmp	r3, #100	; 0x64
 80028ae:	d901      	bls.n	80028b4 <HAL_RCCEx_PeriphCLKConfig+0x678>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80028b0:	2303      	movs	r3, #3
 80028b2:	e007      	b.n	80028c4 <HAL_RCCEx_PeriphCLKConfig+0x688>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80028b4:	4b05      	ldr	r3, [pc, #20]	; (80028cc <HAL_RCCEx_PeriphCLKConfig+0x690>)
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80028bc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80028c0:	d1ef      	bne.n	80028a2 <HAL_RCCEx_PeriphCLKConfig+0x666>
      }
    }
  }
  return HAL_OK;
 80028c2:	2300      	movs	r3, #0
}
 80028c4:	4618      	mov	r0, r3
 80028c6:	3720      	adds	r7, #32
 80028c8:	46bd      	mov	sp, r7
 80028ca:	bd80      	pop	{r7, pc}
 80028cc:	40023800 	.word	0x40023800

080028d0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80028d0:	b580      	push	{r7, lr}
 80028d2:	b082      	sub	sp, #8
 80028d4:	af00      	add	r7, sp, #0
 80028d6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d101      	bne.n	80028e2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80028de:	2301      	movs	r3, #1
 80028e0:	e049      	b.n	8002976 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80028e8:	b2db      	uxtb	r3, r3
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d106      	bne.n	80028fc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	2200      	movs	r2, #0
 80028f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80028f6:	6878      	ldr	r0, [r7, #4]
 80028f8:	f7fe f8a0 	bl	8000a3c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	2202      	movs	r2, #2
 8002900:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681a      	ldr	r2, [r3, #0]
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	3304      	adds	r3, #4
 800290c:	4619      	mov	r1, r3
 800290e:	4610      	mov	r0, r2
 8002910:	f000 f9f6 	bl	8002d00 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	2201      	movs	r2, #1
 8002918:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	2201      	movs	r2, #1
 8002920:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	2201      	movs	r2, #1
 8002928:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	2201      	movs	r2, #1
 8002930:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	2201      	movs	r2, #1
 8002938:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	2201      	movs	r2, #1
 8002940:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	2201      	movs	r2, #1
 8002948:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	2201      	movs	r2, #1
 8002950:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	2201      	movs	r2, #1
 8002958:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	2201      	movs	r2, #1
 8002960:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	2201      	movs	r2, #1
 8002968:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	2201      	movs	r2, #1
 8002970:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002974:	2300      	movs	r3, #0
}
 8002976:	4618      	mov	r0, r3
 8002978:	3708      	adds	r7, #8
 800297a:	46bd      	mov	sp, r7
 800297c:	bd80      	pop	{r7, pc}
	...

08002980 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002980:	b480      	push	{r7}
 8002982:	b085      	sub	sp, #20
 8002984:	af00      	add	r7, sp, #0
 8002986:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800298e:	b2db      	uxtb	r3, r3
 8002990:	2b01      	cmp	r3, #1
 8002992:	d001      	beq.n	8002998 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002994:	2301      	movs	r3, #1
 8002996:	e054      	b.n	8002a42 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	2202      	movs	r2, #2
 800299c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	68da      	ldr	r2, [r3, #12]
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	f042 0201 	orr.w	r2, r2, #1
 80029ae:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	4a26      	ldr	r2, [pc, #152]	; (8002a50 <HAL_TIM_Base_Start_IT+0xd0>)
 80029b6:	4293      	cmp	r3, r2
 80029b8:	d022      	beq.n	8002a00 <HAL_TIM_Base_Start_IT+0x80>
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80029c2:	d01d      	beq.n	8002a00 <HAL_TIM_Base_Start_IT+0x80>
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	4a22      	ldr	r2, [pc, #136]	; (8002a54 <HAL_TIM_Base_Start_IT+0xd4>)
 80029ca:	4293      	cmp	r3, r2
 80029cc:	d018      	beq.n	8002a00 <HAL_TIM_Base_Start_IT+0x80>
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	4a21      	ldr	r2, [pc, #132]	; (8002a58 <HAL_TIM_Base_Start_IT+0xd8>)
 80029d4:	4293      	cmp	r3, r2
 80029d6:	d013      	beq.n	8002a00 <HAL_TIM_Base_Start_IT+0x80>
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	4a1f      	ldr	r2, [pc, #124]	; (8002a5c <HAL_TIM_Base_Start_IT+0xdc>)
 80029de:	4293      	cmp	r3, r2
 80029e0:	d00e      	beq.n	8002a00 <HAL_TIM_Base_Start_IT+0x80>
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	4a1e      	ldr	r2, [pc, #120]	; (8002a60 <HAL_TIM_Base_Start_IT+0xe0>)
 80029e8:	4293      	cmp	r3, r2
 80029ea:	d009      	beq.n	8002a00 <HAL_TIM_Base_Start_IT+0x80>
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	4a1c      	ldr	r2, [pc, #112]	; (8002a64 <HAL_TIM_Base_Start_IT+0xe4>)
 80029f2:	4293      	cmp	r3, r2
 80029f4:	d004      	beq.n	8002a00 <HAL_TIM_Base_Start_IT+0x80>
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	4a1b      	ldr	r2, [pc, #108]	; (8002a68 <HAL_TIM_Base_Start_IT+0xe8>)
 80029fc:	4293      	cmp	r3, r2
 80029fe:	d115      	bne.n	8002a2c <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	689a      	ldr	r2, [r3, #8]
 8002a06:	4b19      	ldr	r3, [pc, #100]	; (8002a6c <HAL_TIM_Base_Start_IT+0xec>)
 8002a08:	4013      	ands	r3, r2
 8002a0a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	2b06      	cmp	r3, #6
 8002a10:	d015      	beq.n	8002a3e <HAL_TIM_Base_Start_IT+0xbe>
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a18:	d011      	beq.n	8002a3e <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	681a      	ldr	r2, [r3, #0]
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	f042 0201 	orr.w	r2, r2, #1
 8002a28:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002a2a:	e008      	b.n	8002a3e <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	681a      	ldr	r2, [r3, #0]
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	f042 0201 	orr.w	r2, r2, #1
 8002a3a:	601a      	str	r2, [r3, #0]
 8002a3c:	e000      	b.n	8002a40 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002a3e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002a40:	2300      	movs	r3, #0
}
 8002a42:	4618      	mov	r0, r3
 8002a44:	3714      	adds	r7, #20
 8002a46:	46bd      	mov	sp, r7
 8002a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a4c:	4770      	bx	lr
 8002a4e:	bf00      	nop
 8002a50:	40010000 	.word	0x40010000
 8002a54:	40000400 	.word	0x40000400
 8002a58:	40000800 	.word	0x40000800
 8002a5c:	40000c00 	.word	0x40000c00
 8002a60:	40010400 	.word	0x40010400
 8002a64:	40014000 	.word	0x40014000
 8002a68:	40001800 	.word	0x40001800
 8002a6c:	00010007 	.word	0x00010007

08002a70 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002a70:	b580      	push	{r7, lr}
 8002a72:	b082      	sub	sp, #8
 8002a74:	af00      	add	r7, sp, #0
 8002a76:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	691b      	ldr	r3, [r3, #16]
 8002a7e:	f003 0302 	and.w	r3, r3, #2
 8002a82:	2b02      	cmp	r3, #2
 8002a84:	d122      	bne.n	8002acc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	68db      	ldr	r3, [r3, #12]
 8002a8c:	f003 0302 	and.w	r3, r3, #2
 8002a90:	2b02      	cmp	r3, #2
 8002a92:	d11b      	bne.n	8002acc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	f06f 0202 	mvn.w	r2, #2
 8002a9c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	2201      	movs	r2, #1
 8002aa2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	699b      	ldr	r3, [r3, #24]
 8002aaa:	f003 0303 	and.w	r3, r3, #3
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d003      	beq.n	8002aba <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002ab2:	6878      	ldr	r0, [r7, #4]
 8002ab4:	f000 f905 	bl	8002cc2 <HAL_TIM_IC_CaptureCallback>
 8002ab8:	e005      	b.n	8002ac6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002aba:	6878      	ldr	r0, [r7, #4]
 8002abc:	f000 f8f7 	bl	8002cae <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ac0:	6878      	ldr	r0, [r7, #4]
 8002ac2:	f000 f908 	bl	8002cd6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	2200      	movs	r2, #0
 8002aca:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	691b      	ldr	r3, [r3, #16]
 8002ad2:	f003 0304 	and.w	r3, r3, #4
 8002ad6:	2b04      	cmp	r3, #4
 8002ad8:	d122      	bne.n	8002b20 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	68db      	ldr	r3, [r3, #12]
 8002ae0:	f003 0304 	and.w	r3, r3, #4
 8002ae4:	2b04      	cmp	r3, #4
 8002ae6:	d11b      	bne.n	8002b20 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	f06f 0204 	mvn.w	r2, #4
 8002af0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	2202      	movs	r2, #2
 8002af6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	699b      	ldr	r3, [r3, #24]
 8002afe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d003      	beq.n	8002b0e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002b06:	6878      	ldr	r0, [r7, #4]
 8002b08:	f000 f8db 	bl	8002cc2 <HAL_TIM_IC_CaptureCallback>
 8002b0c:	e005      	b.n	8002b1a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b0e:	6878      	ldr	r0, [r7, #4]
 8002b10:	f000 f8cd 	bl	8002cae <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b14:	6878      	ldr	r0, [r7, #4]
 8002b16:	f000 f8de 	bl	8002cd6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	2200      	movs	r2, #0
 8002b1e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	691b      	ldr	r3, [r3, #16]
 8002b26:	f003 0308 	and.w	r3, r3, #8
 8002b2a:	2b08      	cmp	r3, #8
 8002b2c:	d122      	bne.n	8002b74 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	68db      	ldr	r3, [r3, #12]
 8002b34:	f003 0308 	and.w	r3, r3, #8
 8002b38:	2b08      	cmp	r3, #8
 8002b3a:	d11b      	bne.n	8002b74 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	f06f 0208 	mvn.w	r2, #8
 8002b44:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	2204      	movs	r2, #4
 8002b4a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	69db      	ldr	r3, [r3, #28]
 8002b52:	f003 0303 	and.w	r3, r3, #3
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d003      	beq.n	8002b62 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002b5a:	6878      	ldr	r0, [r7, #4]
 8002b5c:	f000 f8b1 	bl	8002cc2 <HAL_TIM_IC_CaptureCallback>
 8002b60:	e005      	b.n	8002b6e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b62:	6878      	ldr	r0, [r7, #4]
 8002b64:	f000 f8a3 	bl	8002cae <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b68:	6878      	ldr	r0, [r7, #4]
 8002b6a:	f000 f8b4 	bl	8002cd6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	2200      	movs	r2, #0
 8002b72:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	691b      	ldr	r3, [r3, #16]
 8002b7a:	f003 0310 	and.w	r3, r3, #16
 8002b7e:	2b10      	cmp	r3, #16
 8002b80:	d122      	bne.n	8002bc8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	68db      	ldr	r3, [r3, #12]
 8002b88:	f003 0310 	and.w	r3, r3, #16
 8002b8c:	2b10      	cmp	r3, #16
 8002b8e:	d11b      	bne.n	8002bc8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	f06f 0210 	mvn.w	r2, #16
 8002b98:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	2208      	movs	r2, #8
 8002b9e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	69db      	ldr	r3, [r3, #28]
 8002ba6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d003      	beq.n	8002bb6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002bae:	6878      	ldr	r0, [r7, #4]
 8002bb0:	f000 f887 	bl	8002cc2 <HAL_TIM_IC_CaptureCallback>
 8002bb4:	e005      	b.n	8002bc2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002bb6:	6878      	ldr	r0, [r7, #4]
 8002bb8:	f000 f879 	bl	8002cae <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002bbc:	6878      	ldr	r0, [r7, #4]
 8002bbe:	f000 f88a 	bl	8002cd6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	2200      	movs	r2, #0
 8002bc6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	691b      	ldr	r3, [r3, #16]
 8002bce:	f003 0301 	and.w	r3, r3, #1
 8002bd2:	2b01      	cmp	r3, #1
 8002bd4:	d10e      	bne.n	8002bf4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	68db      	ldr	r3, [r3, #12]
 8002bdc:	f003 0301 	and.w	r3, r3, #1
 8002be0:	2b01      	cmp	r3, #1
 8002be2:	d107      	bne.n	8002bf4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	f06f 0201 	mvn.w	r2, #1
 8002bec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002bee:	6878      	ldr	r0, [r7, #4]
 8002bf0:	f7fd fe84 	bl	80008fc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	691b      	ldr	r3, [r3, #16]
 8002bfa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002bfe:	2b80      	cmp	r3, #128	; 0x80
 8002c00:	d10e      	bne.n	8002c20 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	68db      	ldr	r3, [r3, #12]
 8002c08:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c0c:	2b80      	cmp	r3, #128	; 0x80
 8002c0e:	d107      	bne.n	8002c20 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002c18:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002c1a:	6878      	ldr	r0, [r7, #4]
 8002c1c:	f000 f91a 	bl	8002e54 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	691b      	ldr	r3, [r3, #16]
 8002c26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c2a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002c2e:	d10e      	bne.n	8002c4e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	68db      	ldr	r3, [r3, #12]
 8002c36:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c3a:	2b80      	cmp	r3, #128	; 0x80
 8002c3c:	d107      	bne.n	8002c4e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8002c46:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8002c48:	6878      	ldr	r0, [r7, #4]
 8002c4a:	f000 f90d 	bl	8002e68 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	691b      	ldr	r3, [r3, #16]
 8002c54:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c58:	2b40      	cmp	r3, #64	; 0x40
 8002c5a:	d10e      	bne.n	8002c7a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	68db      	ldr	r3, [r3, #12]
 8002c62:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c66:	2b40      	cmp	r3, #64	; 0x40
 8002c68:	d107      	bne.n	8002c7a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002c72:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002c74:	6878      	ldr	r0, [r7, #4]
 8002c76:	f000 f838 	bl	8002cea <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	691b      	ldr	r3, [r3, #16]
 8002c80:	f003 0320 	and.w	r3, r3, #32
 8002c84:	2b20      	cmp	r3, #32
 8002c86:	d10e      	bne.n	8002ca6 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	68db      	ldr	r3, [r3, #12]
 8002c8e:	f003 0320 	and.w	r3, r3, #32
 8002c92:	2b20      	cmp	r3, #32
 8002c94:	d107      	bne.n	8002ca6 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	f06f 0220 	mvn.w	r2, #32
 8002c9e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002ca0:	6878      	ldr	r0, [r7, #4]
 8002ca2:	f000 f8cd 	bl	8002e40 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002ca6:	bf00      	nop
 8002ca8:	3708      	adds	r7, #8
 8002caa:	46bd      	mov	sp, r7
 8002cac:	bd80      	pop	{r7, pc}

08002cae <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002cae:	b480      	push	{r7}
 8002cb0:	b083      	sub	sp, #12
 8002cb2:	af00      	add	r7, sp, #0
 8002cb4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002cb6:	bf00      	nop
 8002cb8:	370c      	adds	r7, #12
 8002cba:	46bd      	mov	sp, r7
 8002cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc0:	4770      	bx	lr

08002cc2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002cc2:	b480      	push	{r7}
 8002cc4:	b083      	sub	sp, #12
 8002cc6:	af00      	add	r7, sp, #0
 8002cc8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002cca:	bf00      	nop
 8002ccc:	370c      	adds	r7, #12
 8002cce:	46bd      	mov	sp, r7
 8002cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd4:	4770      	bx	lr

08002cd6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002cd6:	b480      	push	{r7}
 8002cd8:	b083      	sub	sp, #12
 8002cda:	af00      	add	r7, sp, #0
 8002cdc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002cde:	bf00      	nop
 8002ce0:	370c      	adds	r7, #12
 8002ce2:	46bd      	mov	sp, r7
 8002ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce8:	4770      	bx	lr

08002cea <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002cea:	b480      	push	{r7}
 8002cec:	b083      	sub	sp, #12
 8002cee:	af00      	add	r7, sp, #0
 8002cf0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002cf2:	bf00      	nop
 8002cf4:	370c      	adds	r7, #12
 8002cf6:	46bd      	mov	sp, r7
 8002cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cfc:	4770      	bx	lr
	...

08002d00 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002d00:	b480      	push	{r7}
 8002d02:	b085      	sub	sp, #20
 8002d04:	af00      	add	r7, sp, #0
 8002d06:	6078      	str	r0, [r7, #4]
 8002d08:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	4a40      	ldr	r2, [pc, #256]	; (8002e14 <TIM_Base_SetConfig+0x114>)
 8002d14:	4293      	cmp	r3, r2
 8002d16:	d013      	beq.n	8002d40 <TIM_Base_SetConfig+0x40>
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d1e:	d00f      	beq.n	8002d40 <TIM_Base_SetConfig+0x40>
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	4a3d      	ldr	r2, [pc, #244]	; (8002e18 <TIM_Base_SetConfig+0x118>)
 8002d24:	4293      	cmp	r3, r2
 8002d26:	d00b      	beq.n	8002d40 <TIM_Base_SetConfig+0x40>
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	4a3c      	ldr	r2, [pc, #240]	; (8002e1c <TIM_Base_SetConfig+0x11c>)
 8002d2c:	4293      	cmp	r3, r2
 8002d2e:	d007      	beq.n	8002d40 <TIM_Base_SetConfig+0x40>
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	4a3b      	ldr	r2, [pc, #236]	; (8002e20 <TIM_Base_SetConfig+0x120>)
 8002d34:	4293      	cmp	r3, r2
 8002d36:	d003      	beq.n	8002d40 <TIM_Base_SetConfig+0x40>
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	4a3a      	ldr	r2, [pc, #232]	; (8002e24 <TIM_Base_SetConfig+0x124>)
 8002d3c:	4293      	cmp	r3, r2
 8002d3e:	d108      	bne.n	8002d52 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d46:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002d48:	683b      	ldr	r3, [r7, #0]
 8002d4a:	685b      	ldr	r3, [r3, #4]
 8002d4c:	68fa      	ldr	r2, [r7, #12]
 8002d4e:	4313      	orrs	r3, r2
 8002d50:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	4a2f      	ldr	r2, [pc, #188]	; (8002e14 <TIM_Base_SetConfig+0x114>)
 8002d56:	4293      	cmp	r3, r2
 8002d58:	d02b      	beq.n	8002db2 <TIM_Base_SetConfig+0xb2>
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d60:	d027      	beq.n	8002db2 <TIM_Base_SetConfig+0xb2>
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	4a2c      	ldr	r2, [pc, #176]	; (8002e18 <TIM_Base_SetConfig+0x118>)
 8002d66:	4293      	cmp	r3, r2
 8002d68:	d023      	beq.n	8002db2 <TIM_Base_SetConfig+0xb2>
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	4a2b      	ldr	r2, [pc, #172]	; (8002e1c <TIM_Base_SetConfig+0x11c>)
 8002d6e:	4293      	cmp	r3, r2
 8002d70:	d01f      	beq.n	8002db2 <TIM_Base_SetConfig+0xb2>
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	4a2a      	ldr	r2, [pc, #168]	; (8002e20 <TIM_Base_SetConfig+0x120>)
 8002d76:	4293      	cmp	r3, r2
 8002d78:	d01b      	beq.n	8002db2 <TIM_Base_SetConfig+0xb2>
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	4a29      	ldr	r2, [pc, #164]	; (8002e24 <TIM_Base_SetConfig+0x124>)
 8002d7e:	4293      	cmp	r3, r2
 8002d80:	d017      	beq.n	8002db2 <TIM_Base_SetConfig+0xb2>
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	4a28      	ldr	r2, [pc, #160]	; (8002e28 <TIM_Base_SetConfig+0x128>)
 8002d86:	4293      	cmp	r3, r2
 8002d88:	d013      	beq.n	8002db2 <TIM_Base_SetConfig+0xb2>
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	4a27      	ldr	r2, [pc, #156]	; (8002e2c <TIM_Base_SetConfig+0x12c>)
 8002d8e:	4293      	cmp	r3, r2
 8002d90:	d00f      	beq.n	8002db2 <TIM_Base_SetConfig+0xb2>
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	4a26      	ldr	r2, [pc, #152]	; (8002e30 <TIM_Base_SetConfig+0x130>)
 8002d96:	4293      	cmp	r3, r2
 8002d98:	d00b      	beq.n	8002db2 <TIM_Base_SetConfig+0xb2>
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	4a25      	ldr	r2, [pc, #148]	; (8002e34 <TIM_Base_SetConfig+0x134>)
 8002d9e:	4293      	cmp	r3, r2
 8002da0:	d007      	beq.n	8002db2 <TIM_Base_SetConfig+0xb2>
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	4a24      	ldr	r2, [pc, #144]	; (8002e38 <TIM_Base_SetConfig+0x138>)
 8002da6:	4293      	cmp	r3, r2
 8002da8:	d003      	beq.n	8002db2 <TIM_Base_SetConfig+0xb2>
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	4a23      	ldr	r2, [pc, #140]	; (8002e3c <TIM_Base_SetConfig+0x13c>)
 8002dae:	4293      	cmp	r3, r2
 8002db0:	d108      	bne.n	8002dc4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002db8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002dba:	683b      	ldr	r3, [r7, #0]
 8002dbc:	68db      	ldr	r3, [r3, #12]
 8002dbe:	68fa      	ldr	r2, [r7, #12]
 8002dc0:	4313      	orrs	r3, r2
 8002dc2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002dca:	683b      	ldr	r3, [r7, #0]
 8002dcc:	695b      	ldr	r3, [r3, #20]
 8002dce:	4313      	orrs	r3, r2
 8002dd0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	68fa      	ldr	r2, [r7, #12]
 8002dd6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002dd8:	683b      	ldr	r3, [r7, #0]
 8002dda:	689a      	ldr	r2, [r3, #8]
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002de0:	683b      	ldr	r3, [r7, #0]
 8002de2:	681a      	ldr	r2, [r3, #0]
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	4a0a      	ldr	r2, [pc, #40]	; (8002e14 <TIM_Base_SetConfig+0x114>)
 8002dec:	4293      	cmp	r3, r2
 8002dee:	d003      	beq.n	8002df8 <TIM_Base_SetConfig+0xf8>
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	4a0c      	ldr	r2, [pc, #48]	; (8002e24 <TIM_Base_SetConfig+0x124>)
 8002df4:	4293      	cmp	r3, r2
 8002df6:	d103      	bne.n	8002e00 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002df8:	683b      	ldr	r3, [r7, #0]
 8002dfa:	691a      	ldr	r2, [r3, #16]
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	2201      	movs	r2, #1
 8002e04:	615a      	str	r2, [r3, #20]
}
 8002e06:	bf00      	nop
 8002e08:	3714      	adds	r7, #20
 8002e0a:	46bd      	mov	sp, r7
 8002e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e10:	4770      	bx	lr
 8002e12:	bf00      	nop
 8002e14:	40010000 	.word	0x40010000
 8002e18:	40000400 	.word	0x40000400
 8002e1c:	40000800 	.word	0x40000800
 8002e20:	40000c00 	.word	0x40000c00
 8002e24:	40010400 	.word	0x40010400
 8002e28:	40014000 	.word	0x40014000
 8002e2c:	40014400 	.word	0x40014400
 8002e30:	40014800 	.word	0x40014800
 8002e34:	40001800 	.word	0x40001800
 8002e38:	40001c00 	.word	0x40001c00
 8002e3c:	40002000 	.word	0x40002000

08002e40 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002e40:	b480      	push	{r7}
 8002e42:	b083      	sub	sp, #12
 8002e44:	af00      	add	r7, sp, #0
 8002e46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002e48:	bf00      	nop
 8002e4a:	370c      	adds	r7, #12
 8002e4c:	46bd      	mov	sp, r7
 8002e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e52:	4770      	bx	lr

08002e54 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002e54:	b480      	push	{r7}
 8002e56:	b083      	sub	sp, #12
 8002e58:	af00      	add	r7, sp, #0
 8002e5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002e5c:	bf00      	nop
 8002e5e:	370c      	adds	r7, #12
 8002e60:	46bd      	mov	sp, r7
 8002e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e66:	4770      	bx	lr

08002e68 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8002e68:	b480      	push	{r7}
 8002e6a:	b083      	sub	sp, #12
 8002e6c:	af00      	add	r7, sp, #0
 8002e6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8002e70:	bf00      	nop
 8002e72:	370c      	adds	r7, #12
 8002e74:	46bd      	mov	sp, r7
 8002e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e7a:	4770      	bx	lr

08002e7c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002e7c:	b580      	push	{r7, lr}
 8002e7e:	b082      	sub	sp, #8
 8002e80:	af00      	add	r7, sp, #0
 8002e82:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d101      	bne.n	8002e8e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002e8a:	2301      	movs	r3, #1
 8002e8c:	e040      	b.n	8002f10 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d106      	bne.n	8002ea4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	2200      	movs	r2, #0
 8002e9a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002e9e:	6878      	ldr	r0, [r7, #4]
 8002ea0:	f7fd fdf2 	bl	8000a88 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	2224      	movs	r2, #36	; 0x24
 8002ea8:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	681a      	ldr	r2, [r3, #0]
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	f022 0201 	bic.w	r2, r2, #1
 8002eb8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002eba:	6878      	ldr	r0, [r7, #4]
 8002ebc:	f000 fbb6 	bl	800362c <UART_SetConfig>
 8002ec0:	4603      	mov	r3, r0
 8002ec2:	2b01      	cmp	r3, #1
 8002ec4:	d101      	bne.n	8002eca <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8002ec6:	2301      	movs	r3, #1
 8002ec8:	e022      	b.n	8002f10 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d002      	beq.n	8002ed8 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8002ed2:	6878      	ldr	r0, [r7, #4]
 8002ed4:	f000 fe0e 	bl	8003af4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	685a      	ldr	r2, [r3, #4]
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002ee6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	689a      	ldr	r2, [r3, #8]
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002ef6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	681a      	ldr	r2, [r3, #0]
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	f042 0201 	orr.w	r2, r2, #1
 8002f06:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002f08:	6878      	ldr	r0, [r7, #4]
 8002f0a:	f000 fe95 	bl	8003c38 <UART_CheckIdleState>
 8002f0e:	4603      	mov	r3, r0
}
 8002f10:	4618      	mov	r0, r3
 8002f12:	3708      	adds	r7, #8
 8002f14:	46bd      	mov	sp, r7
 8002f16:	bd80      	pop	{r7, pc}

08002f18 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8002f18:	b480      	push	{r7}
 8002f1a:	b08b      	sub	sp, #44	; 0x2c
 8002f1c:	af00      	add	r7, sp, #0
 8002f1e:	60f8      	str	r0, [r7, #12]
 8002f20:	60b9      	str	r1, [r7, #8]
 8002f22:	4613      	mov	r3, r2
 8002f24:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002f2a:	2b20      	cmp	r3, #32
 8002f2c:	d147      	bne.n	8002fbe <HAL_UART_Transmit_IT+0xa6>
  {
    if ((pData == NULL) || (Size == 0U))
 8002f2e:	68bb      	ldr	r3, [r7, #8]
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d002      	beq.n	8002f3a <HAL_UART_Transmit_IT+0x22>
 8002f34:	88fb      	ldrh	r3, [r7, #6]
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d101      	bne.n	8002f3e <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 8002f3a:	2301      	movs	r3, #1
 8002f3c:	e040      	b.n	8002fc0 <HAL_UART_Transmit_IT+0xa8>
    }

    huart->pTxBuffPtr  = pData;
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	68ba      	ldr	r2, [r7, #8]
 8002f42:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	88fa      	ldrh	r2, [r7, #6]
 8002f48:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	88fa      	ldrh	r2, [r7, #6]
 8002f50:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    huart->TxISR       = NULL;
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	2200      	movs	r2, #0
 8002f58:	66da      	str	r2, [r3, #108]	; 0x6c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	2200      	movs	r2, #0
 8002f5e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	2221      	movs	r2, #33	; 0x21
 8002f66:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	689b      	ldr	r3, [r3, #8]
 8002f6c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002f70:	d107      	bne.n	8002f82 <HAL_UART_Transmit_IT+0x6a>
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	691b      	ldr	r3, [r3, #16]
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d103      	bne.n	8002f82 <HAL_UART_Transmit_IT+0x6a>
    {
      huart->TxISR = UART_TxISR_16BIT;
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	4a13      	ldr	r2, [pc, #76]	; (8002fcc <HAL_UART_Transmit_IT+0xb4>)
 8002f7e:	66da      	str	r2, [r3, #108]	; 0x6c
 8002f80:	e002      	b.n	8002f88 <HAL_UART_Transmit_IT+0x70>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	4a12      	ldr	r2, [pc, #72]	; (8002fd0 <HAL_UART_Transmit_IT+0xb8>)
 8002f86:	66da      	str	r2, [r3, #108]	; 0x6c
    }

    /* Enable the Transmit Data Register Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f8e:	697b      	ldr	r3, [r7, #20]
 8002f90:	e853 3f00 	ldrex	r3, [r3]
 8002f94:	613b      	str	r3, [r7, #16]
   return(result);
 8002f96:	693b      	ldr	r3, [r7, #16]
 8002f98:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002f9c:	627b      	str	r3, [r7, #36]	; 0x24
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	461a      	mov	r2, r3
 8002fa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fa6:	623b      	str	r3, [r7, #32]
 8002fa8:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002faa:	69f9      	ldr	r1, [r7, #28]
 8002fac:	6a3a      	ldr	r2, [r7, #32]
 8002fae:	e841 2300 	strex	r3, r2, [r1]
 8002fb2:	61bb      	str	r3, [r7, #24]
   return(result);
 8002fb4:	69bb      	ldr	r3, [r7, #24]
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d1e6      	bne.n	8002f88 <HAL_UART_Transmit_IT+0x70>

    return HAL_OK;
 8002fba:	2300      	movs	r3, #0
 8002fbc:	e000      	b.n	8002fc0 <HAL_UART_Transmit_IT+0xa8>
  }
  else
  {
    return HAL_BUSY;
 8002fbe:	2302      	movs	r3, #2
  }
}
 8002fc0:	4618      	mov	r0, r3
 8002fc2:	372c      	adds	r7, #44	; 0x2c
 8002fc4:	46bd      	mov	sp, r7
 8002fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fca:	4770      	bx	lr
 8002fcc:	0800416b 	.word	0x0800416b
 8002fd0:	080040b5 	.word	0x080040b5

08002fd4 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002fd4:	b580      	push	{r7, lr}
 8002fd6:	b08a      	sub	sp, #40	; 0x28
 8002fd8:	af00      	add	r7, sp, #0
 8002fda:	60f8      	str	r0, [r7, #12]
 8002fdc:	60b9      	str	r1, [r7, #8]
 8002fde:	4613      	mov	r3, r2
 8002fe0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002fe8:	2b20      	cmp	r3, #32
 8002fea:	d132      	bne.n	8003052 <HAL_UART_Receive_IT+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 8002fec:	68bb      	ldr	r3, [r7, #8]
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d002      	beq.n	8002ff8 <HAL_UART_Receive_IT+0x24>
 8002ff2:	88fb      	ldrh	r3, [r7, #6]
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d101      	bne.n	8002ffc <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8002ff8:	2301      	movs	r3, #1
 8002ffa:	e02b      	b.n	8003054 <HAL_UART_Receive_IT+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	2200      	movs	r2, #0
 8003000:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	685b      	ldr	r3, [r3, #4]
 8003008:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800300c:	2b00      	cmp	r3, #0
 800300e:	d018      	beq.n	8003042 <HAL_UART_Receive_IT+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003016:	697b      	ldr	r3, [r7, #20]
 8003018:	e853 3f00 	ldrex	r3, [r3]
 800301c:	613b      	str	r3, [r7, #16]
   return(result);
 800301e:	693b      	ldr	r3, [r7, #16]
 8003020:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003024:	627b      	str	r3, [r7, #36]	; 0x24
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	461a      	mov	r2, r3
 800302c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800302e:	623b      	str	r3, [r7, #32]
 8003030:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003032:	69f9      	ldr	r1, [r7, #28]
 8003034:	6a3a      	ldr	r2, [r7, #32]
 8003036:	e841 2300 	strex	r3, r2, [r1]
 800303a:	61bb      	str	r3, [r7, #24]
   return(result);
 800303c:	69bb      	ldr	r3, [r7, #24]
 800303e:	2b00      	cmp	r3, #0
 8003040:	d1e6      	bne.n	8003010 <HAL_UART_Receive_IT+0x3c>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8003042:	88fb      	ldrh	r3, [r7, #6]
 8003044:	461a      	mov	r2, r3
 8003046:	68b9      	ldr	r1, [r7, #8]
 8003048:	68f8      	ldr	r0, [r7, #12]
 800304a:	f000 fef3 	bl	8003e34 <UART_Start_Receive_IT>
 800304e:	4603      	mov	r3, r0
 8003050:	e000      	b.n	8003054 <HAL_UART_Receive_IT+0x80>
  }
  else
  {
    return HAL_BUSY;
 8003052:	2302      	movs	r3, #2
  }
}
 8003054:	4618      	mov	r0, r3
 8003056:	3728      	adds	r7, #40	; 0x28
 8003058:	46bd      	mov	sp, r7
 800305a:	bd80      	pop	{r7, pc}

0800305c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800305c:	b580      	push	{r7, lr}
 800305e:	b0ba      	sub	sp, #232	; 0xe8
 8003060:	af00      	add	r7, sp, #0
 8003062:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	69db      	ldr	r3, [r3, #28]
 800306a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	689b      	ldr	r3, [r3, #8]
 800307e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8003082:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8003086:	f640 030f 	movw	r3, #2063	; 0x80f
 800308a:	4013      	ands	r3, r2
 800308c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8003090:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003094:	2b00      	cmp	r3, #0
 8003096:	d115      	bne.n	80030c4 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8003098:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800309c:	f003 0320 	and.w	r3, r3, #32
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d00f      	beq.n	80030c4 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80030a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80030a8:	f003 0320 	and.w	r3, r3, #32
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d009      	beq.n	80030c4 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	f000 8297 	beq.w	80035e8 <HAL_UART_IRQHandler+0x58c>
      {
        huart->RxISR(huart);
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80030be:	6878      	ldr	r0, [r7, #4]
 80030c0:	4798      	blx	r3
      }
      return;
 80030c2:	e291      	b.n	80035e8 <HAL_UART_IRQHandler+0x58c>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80030c4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	f000 8117 	beq.w	80032fc <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80030ce:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80030d2:	f003 0301 	and.w	r3, r3, #1
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d106      	bne.n	80030e8 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80030da:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80030de:	4b85      	ldr	r3, [pc, #532]	; (80032f4 <HAL_UART_IRQHandler+0x298>)
 80030e0:	4013      	ands	r3, r2
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	f000 810a 	beq.w	80032fc <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80030e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80030ec:	f003 0301 	and.w	r3, r3, #1
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d011      	beq.n	8003118 <HAL_UART_IRQHandler+0xbc>
 80030f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80030f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d00b      	beq.n	8003118 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	2201      	movs	r2, #1
 8003106:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800310e:	f043 0201 	orr.w	r2, r3, #1
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003118:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800311c:	f003 0302 	and.w	r3, r3, #2
 8003120:	2b00      	cmp	r3, #0
 8003122:	d011      	beq.n	8003148 <HAL_UART_IRQHandler+0xec>
 8003124:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003128:	f003 0301 	and.w	r3, r3, #1
 800312c:	2b00      	cmp	r3, #0
 800312e:	d00b      	beq.n	8003148 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	2202      	movs	r2, #2
 8003136:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800313e:	f043 0204 	orr.w	r2, r3, #4
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003148:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800314c:	f003 0304 	and.w	r3, r3, #4
 8003150:	2b00      	cmp	r3, #0
 8003152:	d011      	beq.n	8003178 <HAL_UART_IRQHandler+0x11c>
 8003154:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003158:	f003 0301 	and.w	r3, r3, #1
 800315c:	2b00      	cmp	r3, #0
 800315e:	d00b      	beq.n	8003178 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	2204      	movs	r2, #4
 8003166:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800316e:	f043 0202 	orr.w	r2, r3, #2
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8003178:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800317c:	f003 0308 	and.w	r3, r3, #8
 8003180:	2b00      	cmp	r3, #0
 8003182:	d017      	beq.n	80031b4 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003184:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003188:	f003 0320 	and.w	r3, r3, #32
 800318c:	2b00      	cmp	r3, #0
 800318e:	d105      	bne.n	800319c <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8003190:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003194:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003198:	2b00      	cmp	r3, #0
 800319a:	d00b      	beq.n	80031b4 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	2208      	movs	r2, #8
 80031a2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80031aa:	f043 0208 	orr.w	r2, r3, #8
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80031b4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80031b8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d012      	beq.n	80031e6 <HAL_UART_IRQHandler+0x18a>
 80031c0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80031c4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d00c      	beq.n	80031e6 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80031d4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80031dc:	f043 0220 	orr.w	r2, r3, #32
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	f000 81fd 	beq.w	80035ec <HAL_UART_IRQHandler+0x590>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80031f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80031f6:	f003 0320 	and.w	r3, r3, #32
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d00d      	beq.n	800321a <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80031fe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003202:	f003 0320 	and.w	r3, r3, #32
 8003206:	2b00      	cmp	r3, #0
 8003208:	d007      	beq.n	800321a <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800320e:	2b00      	cmp	r3, #0
 8003210:	d003      	beq.n	800321a <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003216:	6878      	ldr	r0, [r7, #4]
 8003218:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003220:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	689b      	ldr	r3, [r3, #8]
 800322a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800322e:	2b40      	cmp	r3, #64	; 0x40
 8003230:	d005      	beq.n	800323e <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8003232:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003236:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800323a:	2b00      	cmp	r3, #0
 800323c:	d04f      	beq.n	80032de <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800323e:	6878      	ldr	r0, [r7, #4]
 8003240:	f000 febe 	bl	8003fc0 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	689b      	ldr	r3, [r3, #8]
 800324a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800324e:	2b40      	cmp	r3, #64	; 0x40
 8003250:	d141      	bne.n	80032d6 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	3308      	adds	r3, #8
 8003258:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800325c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003260:	e853 3f00 	ldrex	r3, [r3]
 8003264:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003268:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800326c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003270:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	3308      	adds	r3, #8
 800327a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800327e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8003282:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003286:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800328a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800328e:	e841 2300 	strex	r3, r2, [r1]
 8003292:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8003296:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800329a:	2b00      	cmp	r3, #0
 800329c:	d1d9      	bne.n	8003252 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d013      	beq.n	80032ce <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80032aa:	4a13      	ldr	r2, [pc, #76]	; (80032f8 <HAL_UART_IRQHandler+0x29c>)
 80032ac:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80032b2:	4618      	mov	r0, r3
 80032b4:	f7fd ff45 	bl	8001142 <HAL_DMA_Abort_IT>
 80032b8:	4603      	mov	r3, r0
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d017      	beq.n	80032ee <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80032c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80032c4:	687a      	ldr	r2, [r7, #4]
 80032c6:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80032c8:	4610      	mov	r0, r2
 80032ca:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80032cc:	e00f      	b.n	80032ee <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80032ce:	6878      	ldr	r0, [r7, #4]
 80032d0:	f000 f996 	bl	8003600 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80032d4:	e00b      	b.n	80032ee <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80032d6:	6878      	ldr	r0, [r7, #4]
 80032d8:	f000 f992 	bl	8003600 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80032dc:	e007      	b.n	80032ee <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80032de:	6878      	ldr	r0, [r7, #4]
 80032e0:	f000 f98e 	bl	8003600 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	2200      	movs	r2, #0
 80032e8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 80032ec:	e17e      	b.n	80035ec <HAL_UART_IRQHandler+0x590>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80032ee:	bf00      	nop
    return;
 80032f0:	e17c      	b.n	80035ec <HAL_UART_IRQHandler+0x590>
 80032f2:	bf00      	nop
 80032f4:	04000120 	.word	0x04000120
 80032f8:	08004089 	.word	0x08004089

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003300:	2b01      	cmp	r3, #1
 8003302:	f040 814c 	bne.w	800359e <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8003306:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800330a:	f003 0310 	and.w	r3, r3, #16
 800330e:	2b00      	cmp	r3, #0
 8003310:	f000 8145 	beq.w	800359e <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8003314:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003318:	f003 0310 	and.w	r3, r3, #16
 800331c:	2b00      	cmp	r3, #0
 800331e:	f000 813e 	beq.w	800359e <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	2210      	movs	r2, #16
 8003328:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	689b      	ldr	r3, [r3, #8]
 8003330:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003334:	2b40      	cmp	r3, #64	; 0x40
 8003336:	f040 80b6 	bne.w	80034a6 <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	685b      	ldr	r3, [r3, #4]
 8003342:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003346:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800334a:	2b00      	cmp	r3, #0
 800334c:	f000 8150 	beq.w	80035f0 <HAL_UART_IRQHandler+0x594>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8003356:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800335a:	429a      	cmp	r2, r3
 800335c:	f080 8148 	bcs.w	80035f0 <HAL_UART_IRQHandler+0x594>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003366:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800336e:	69db      	ldr	r3, [r3, #28]
 8003370:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003374:	f000 8086 	beq.w	8003484 <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003380:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003384:	e853 3f00 	ldrex	r3, [r3]
 8003388:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800338c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003390:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003394:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	461a      	mov	r2, r3
 800339e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80033a2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80033a6:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033aa:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80033ae:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80033b2:	e841 2300 	strex	r3, r2, [r1]
 80033b6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80033ba:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d1da      	bne.n	8003378 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	3308      	adds	r3, #8
 80033c8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033ca:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80033cc:	e853 3f00 	ldrex	r3, [r3]
 80033d0:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80033d2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80033d4:	f023 0301 	bic.w	r3, r3, #1
 80033d8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	3308      	adds	r3, #8
 80033e2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80033e6:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80033ea:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033ec:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80033ee:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80033f2:	e841 2300 	strex	r3, r2, [r1]
 80033f6:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80033f8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d1e1      	bne.n	80033c2 <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	3308      	adds	r3, #8
 8003404:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003406:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003408:	e853 3f00 	ldrex	r3, [r3]
 800340c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800340e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003410:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003414:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	3308      	adds	r3, #8
 800341e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003422:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003424:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003426:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003428:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800342a:	e841 2300 	strex	r3, r2, [r1]
 800342e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003430:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003432:	2b00      	cmp	r3, #0
 8003434:	d1e3      	bne.n	80033fe <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	2220      	movs	r2, #32
 800343a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	2200      	movs	r2, #0
 8003442:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800344a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800344c:	e853 3f00 	ldrex	r3, [r3]
 8003450:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003452:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003454:	f023 0310 	bic.w	r3, r3, #16
 8003458:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	461a      	mov	r2, r3
 8003462:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003466:	65bb      	str	r3, [r7, #88]	; 0x58
 8003468:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800346a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800346c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800346e:	e841 2300 	strex	r3, r2, [r1]
 8003472:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003474:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003476:	2b00      	cmp	r3, #0
 8003478:	d1e4      	bne.n	8003444 <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800347e:	4618      	mov	r0, r3
 8003480:	f7fd fdef 	bl	8001062 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	2202      	movs	r2, #2
 8003488:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003496:	b29b      	uxth	r3, r3
 8003498:	1ad3      	subs	r3, r2, r3
 800349a:	b29b      	uxth	r3, r3
 800349c:	4619      	mov	r1, r3
 800349e:	6878      	ldr	r0, [r7, #4]
 80034a0:	f000 f8b8 	bl	8003614 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80034a4:	e0a4      	b.n	80035f0 <HAL_UART_IRQHandler+0x594>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80034b2:	b29b      	uxth	r3, r3
 80034b4:	1ad3      	subs	r3, r2, r3
 80034b6:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80034c0:	b29b      	uxth	r3, r3
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	f000 8096 	beq.w	80035f4 <HAL_UART_IRQHandler+0x598>
          && (nb_rx_data > 0U))
 80034c8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	f000 8091 	beq.w	80035f4 <HAL_UART_IRQHandler+0x598>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80034da:	e853 3f00 	ldrex	r3, [r3]
 80034de:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80034e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80034e2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80034e6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	461a      	mov	r2, r3
 80034f0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80034f4:	647b      	str	r3, [r7, #68]	; 0x44
 80034f6:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034f8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80034fa:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80034fc:	e841 2300 	strex	r3, r2, [r1]
 8003500:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003502:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003504:	2b00      	cmp	r3, #0
 8003506:	d1e4      	bne.n	80034d2 <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	3308      	adds	r3, #8
 800350e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003510:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003512:	e853 3f00 	ldrex	r3, [r3]
 8003516:	623b      	str	r3, [r7, #32]
   return(result);
 8003518:	6a3b      	ldr	r3, [r7, #32]
 800351a:	f023 0301 	bic.w	r3, r3, #1
 800351e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	3308      	adds	r3, #8
 8003528:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800352c:	633a      	str	r2, [r7, #48]	; 0x30
 800352e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003530:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003532:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003534:	e841 2300 	strex	r3, r2, [r1]
 8003538:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800353a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800353c:	2b00      	cmp	r3, #0
 800353e:	d1e3      	bne.n	8003508 <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	2220      	movs	r2, #32
 8003544:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	2200      	movs	r2, #0
 800354c:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	2200      	movs	r2, #0
 8003552:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800355a:	693b      	ldr	r3, [r7, #16]
 800355c:	e853 3f00 	ldrex	r3, [r3]
 8003560:	60fb      	str	r3, [r7, #12]
   return(result);
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	f023 0310 	bic.w	r3, r3, #16
 8003568:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	461a      	mov	r2, r3
 8003572:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003576:	61fb      	str	r3, [r7, #28]
 8003578:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800357a:	69b9      	ldr	r1, [r7, #24]
 800357c:	69fa      	ldr	r2, [r7, #28]
 800357e:	e841 2300 	strex	r3, r2, [r1]
 8003582:	617b      	str	r3, [r7, #20]
   return(result);
 8003584:	697b      	ldr	r3, [r7, #20]
 8003586:	2b00      	cmp	r3, #0
 8003588:	d1e4      	bne.n	8003554 <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	2202      	movs	r2, #2
 800358e:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003590:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003594:	4619      	mov	r1, r3
 8003596:	6878      	ldr	r0, [r7, #4]
 8003598:	f000 f83c 	bl	8003614 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800359c:	e02a      	b.n	80035f4 <HAL_UART_IRQHandler+0x598>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800359e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80035a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d00e      	beq.n	80035c8 <HAL_UART_IRQHandler+0x56c>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80035aa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80035ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d008      	beq.n	80035c8 <HAL_UART_IRQHandler+0x56c>
  {
    if (huart->TxISR != NULL)
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d01c      	beq.n	80035f8 <HAL_UART_IRQHandler+0x59c>
    {
      huart->TxISR(huart);
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80035c2:	6878      	ldr	r0, [r7, #4]
 80035c4:	4798      	blx	r3
    }
    return;
 80035c6:	e017      	b.n	80035f8 <HAL_UART_IRQHandler+0x59c>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80035c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80035cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d012      	beq.n	80035fa <HAL_UART_IRQHandler+0x59e>
 80035d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80035d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d00c      	beq.n	80035fa <HAL_UART_IRQHandler+0x59e>
  {
    UART_EndTransmit_IT(huart);
 80035e0:	6878      	ldr	r0, [r7, #4]
 80035e2:	f000 fe22 	bl	800422a <UART_EndTransmit_IT>
    return;
 80035e6:	e008      	b.n	80035fa <HAL_UART_IRQHandler+0x59e>
      return;
 80035e8:	bf00      	nop
 80035ea:	e006      	b.n	80035fa <HAL_UART_IRQHandler+0x59e>
    return;
 80035ec:	bf00      	nop
 80035ee:	e004      	b.n	80035fa <HAL_UART_IRQHandler+0x59e>
      return;
 80035f0:	bf00      	nop
 80035f2:	e002      	b.n	80035fa <HAL_UART_IRQHandler+0x59e>
      return;
 80035f4:	bf00      	nop
 80035f6:	e000      	b.n	80035fa <HAL_UART_IRQHandler+0x59e>
    return;
 80035f8:	bf00      	nop
  }

}
 80035fa:	37e8      	adds	r7, #232	; 0xe8
 80035fc:	46bd      	mov	sp, r7
 80035fe:	bd80      	pop	{r7, pc}

08003600 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003600:	b480      	push	{r7}
 8003602:	b083      	sub	sp, #12
 8003604:	af00      	add	r7, sp, #0
 8003606:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8003608:	bf00      	nop
 800360a:	370c      	adds	r7, #12
 800360c:	46bd      	mov	sp, r7
 800360e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003612:	4770      	bx	lr

08003614 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003614:	b480      	push	{r7}
 8003616:	b083      	sub	sp, #12
 8003618:	af00      	add	r7, sp, #0
 800361a:	6078      	str	r0, [r7, #4]
 800361c:	460b      	mov	r3, r1
 800361e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003620:	bf00      	nop
 8003622:	370c      	adds	r7, #12
 8003624:	46bd      	mov	sp, r7
 8003626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800362a:	4770      	bx	lr

0800362c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800362c:	b580      	push	{r7, lr}
 800362e:	b088      	sub	sp, #32
 8003630:	af00      	add	r7, sp, #0
 8003632:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003634:	2300      	movs	r3, #0
 8003636:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	689a      	ldr	r2, [r3, #8]
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	691b      	ldr	r3, [r3, #16]
 8003640:	431a      	orrs	r2, r3
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	695b      	ldr	r3, [r3, #20]
 8003646:	431a      	orrs	r2, r3
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	69db      	ldr	r3, [r3, #28]
 800364c:	4313      	orrs	r3, r2
 800364e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	681a      	ldr	r2, [r3, #0]
 8003656:	4ba6      	ldr	r3, [pc, #664]	; (80038f0 <UART_SetConfig+0x2c4>)
 8003658:	4013      	ands	r3, r2
 800365a:	687a      	ldr	r2, [r7, #4]
 800365c:	6812      	ldr	r2, [r2, #0]
 800365e:	6979      	ldr	r1, [r7, #20]
 8003660:	430b      	orrs	r3, r1
 8003662:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	685b      	ldr	r3, [r3, #4]
 800366a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	68da      	ldr	r2, [r3, #12]
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	430a      	orrs	r2, r1
 8003678:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	699b      	ldr	r3, [r3, #24]
 800367e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	6a1b      	ldr	r3, [r3, #32]
 8003684:	697a      	ldr	r2, [r7, #20]
 8003686:	4313      	orrs	r3, r2
 8003688:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	689b      	ldr	r3, [r3, #8]
 8003690:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	697a      	ldr	r2, [r7, #20]
 800369a:	430a      	orrs	r2, r1
 800369c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	4a94      	ldr	r2, [pc, #592]	; (80038f4 <UART_SetConfig+0x2c8>)
 80036a4:	4293      	cmp	r3, r2
 80036a6:	d120      	bne.n	80036ea <UART_SetConfig+0xbe>
 80036a8:	4b93      	ldr	r3, [pc, #588]	; (80038f8 <UART_SetConfig+0x2cc>)
 80036aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036ae:	f003 0303 	and.w	r3, r3, #3
 80036b2:	2b03      	cmp	r3, #3
 80036b4:	d816      	bhi.n	80036e4 <UART_SetConfig+0xb8>
 80036b6:	a201      	add	r2, pc, #4	; (adr r2, 80036bc <UART_SetConfig+0x90>)
 80036b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036bc:	080036cd 	.word	0x080036cd
 80036c0:	080036d9 	.word	0x080036d9
 80036c4:	080036d3 	.word	0x080036d3
 80036c8:	080036df 	.word	0x080036df
 80036cc:	2301      	movs	r3, #1
 80036ce:	77fb      	strb	r3, [r7, #31]
 80036d0:	e150      	b.n	8003974 <UART_SetConfig+0x348>
 80036d2:	2302      	movs	r3, #2
 80036d4:	77fb      	strb	r3, [r7, #31]
 80036d6:	e14d      	b.n	8003974 <UART_SetConfig+0x348>
 80036d8:	2304      	movs	r3, #4
 80036da:	77fb      	strb	r3, [r7, #31]
 80036dc:	e14a      	b.n	8003974 <UART_SetConfig+0x348>
 80036de:	2308      	movs	r3, #8
 80036e0:	77fb      	strb	r3, [r7, #31]
 80036e2:	e147      	b.n	8003974 <UART_SetConfig+0x348>
 80036e4:	2310      	movs	r3, #16
 80036e6:	77fb      	strb	r3, [r7, #31]
 80036e8:	e144      	b.n	8003974 <UART_SetConfig+0x348>
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	4a83      	ldr	r2, [pc, #524]	; (80038fc <UART_SetConfig+0x2d0>)
 80036f0:	4293      	cmp	r3, r2
 80036f2:	d132      	bne.n	800375a <UART_SetConfig+0x12e>
 80036f4:	4b80      	ldr	r3, [pc, #512]	; (80038f8 <UART_SetConfig+0x2cc>)
 80036f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036fa:	f003 030c 	and.w	r3, r3, #12
 80036fe:	2b0c      	cmp	r3, #12
 8003700:	d828      	bhi.n	8003754 <UART_SetConfig+0x128>
 8003702:	a201      	add	r2, pc, #4	; (adr r2, 8003708 <UART_SetConfig+0xdc>)
 8003704:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003708:	0800373d 	.word	0x0800373d
 800370c:	08003755 	.word	0x08003755
 8003710:	08003755 	.word	0x08003755
 8003714:	08003755 	.word	0x08003755
 8003718:	08003749 	.word	0x08003749
 800371c:	08003755 	.word	0x08003755
 8003720:	08003755 	.word	0x08003755
 8003724:	08003755 	.word	0x08003755
 8003728:	08003743 	.word	0x08003743
 800372c:	08003755 	.word	0x08003755
 8003730:	08003755 	.word	0x08003755
 8003734:	08003755 	.word	0x08003755
 8003738:	0800374f 	.word	0x0800374f
 800373c:	2300      	movs	r3, #0
 800373e:	77fb      	strb	r3, [r7, #31]
 8003740:	e118      	b.n	8003974 <UART_SetConfig+0x348>
 8003742:	2302      	movs	r3, #2
 8003744:	77fb      	strb	r3, [r7, #31]
 8003746:	e115      	b.n	8003974 <UART_SetConfig+0x348>
 8003748:	2304      	movs	r3, #4
 800374a:	77fb      	strb	r3, [r7, #31]
 800374c:	e112      	b.n	8003974 <UART_SetConfig+0x348>
 800374e:	2308      	movs	r3, #8
 8003750:	77fb      	strb	r3, [r7, #31]
 8003752:	e10f      	b.n	8003974 <UART_SetConfig+0x348>
 8003754:	2310      	movs	r3, #16
 8003756:	77fb      	strb	r3, [r7, #31]
 8003758:	e10c      	b.n	8003974 <UART_SetConfig+0x348>
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	4a68      	ldr	r2, [pc, #416]	; (8003900 <UART_SetConfig+0x2d4>)
 8003760:	4293      	cmp	r3, r2
 8003762:	d120      	bne.n	80037a6 <UART_SetConfig+0x17a>
 8003764:	4b64      	ldr	r3, [pc, #400]	; (80038f8 <UART_SetConfig+0x2cc>)
 8003766:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800376a:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800376e:	2b30      	cmp	r3, #48	; 0x30
 8003770:	d013      	beq.n	800379a <UART_SetConfig+0x16e>
 8003772:	2b30      	cmp	r3, #48	; 0x30
 8003774:	d814      	bhi.n	80037a0 <UART_SetConfig+0x174>
 8003776:	2b20      	cmp	r3, #32
 8003778:	d009      	beq.n	800378e <UART_SetConfig+0x162>
 800377a:	2b20      	cmp	r3, #32
 800377c:	d810      	bhi.n	80037a0 <UART_SetConfig+0x174>
 800377e:	2b00      	cmp	r3, #0
 8003780:	d002      	beq.n	8003788 <UART_SetConfig+0x15c>
 8003782:	2b10      	cmp	r3, #16
 8003784:	d006      	beq.n	8003794 <UART_SetConfig+0x168>
 8003786:	e00b      	b.n	80037a0 <UART_SetConfig+0x174>
 8003788:	2300      	movs	r3, #0
 800378a:	77fb      	strb	r3, [r7, #31]
 800378c:	e0f2      	b.n	8003974 <UART_SetConfig+0x348>
 800378e:	2302      	movs	r3, #2
 8003790:	77fb      	strb	r3, [r7, #31]
 8003792:	e0ef      	b.n	8003974 <UART_SetConfig+0x348>
 8003794:	2304      	movs	r3, #4
 8003796:	77fb      	strb	r3, [r7, #31]
 8003798:	e0ec      	b.n	8003974 <UART_SetConfig+0x348>
 800379a:	2308      	movs	r3, #8
 800379c:	77fb      	strb	r3, [r7, #31]
 800379e:	e0e9      	b.n	8003974 <UART_SetConfig+0x348>
 80037a0:	2310      	movs	r3, #16
 80037a2:	77fb      	strb	r3, [r7, #31]
 80037a4:	e0e6      	b.n	8003974 <UART_SetConfig+0x348>
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	4a56      	ldr	r2, [pc, #344]	; (8003904 <UART_SetConfig+0x2d8>)
 80037ac:	4293      	cmp	r3, r2
 80037ae:	d120      	bne.n	80037f2 <UART_SetConfig+0x1c6>
 80037b0:	4b51      	ldr	r3, [pc, #324]	; (80038f8 <UART_SetConfig+0x2cc>)
 80037b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037b6:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80037ba:	2bc0      	cmp	r3, #192	; 0xc0
 80037bc:	d013      	beq.n	80037e6 <UART_SetConfig+0x1ba>
 80037be:	2bc0      	cmp	r3, #192	; 0xc0
 80037c0:	d814      	bhi.n	80037ec <UART_SetConfig+0x1c0>
 80037c2:	2b80      	cmp	r3, #128	; 0x80
 80037c4:	d009      	beq.n	80037da <UART_SetConfig+0x1ae>
 80037c6:	2b80      	cmp	r3, #128	; 0x80
 80037c8:	d810      	bhi.n	80037ec <UART_SetConfig+0x1c0>
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d002      	beq.n	80037d4 <UART_SetConfig+0x1a8>
 80037ce:	2b40      	cmp	r3, #64	; 0x40
 80037d0:	d006      	beq.n	80037e0 <UART_SetConfig+0x1b4>
 80037d2:	e00b      	b.n	80037ec <UART_SetConfig+0x1c0>
 80037d4:	2300      	movs	r3, #0
 80037d6:	77fb      	strb	r3, [r7, #31]
 80037d8:	e0cc      	b.n	8003974 <UART_SetConfig+0x348>
 80037da:	2302      	movs	r3, #2
 80037dc:	77fb      	strb	r3, [r7, #31]
 80037de:	e0c9      	b.n	8003974 <UART_SetConfig+0x348>
 80037e0:	2304      	movs	r3, #4
 80037e2:	77fb      	strb	r3, [r7, #31]
 80037e4:	e0c6      	b.n	8003974 <UART_SetConfig+0x348>
 80037e6:	2308      	movs	r3, #8
 80037e8:	77fb      	strb	r3, [r7, #31]
 80037ea:	e0c3      	b.n	8003974 <UART_SetConfig+0x348>
 80037ec:	2310      	movs	r3, #16
 80037ee:	77fb      	strb	r3, [r7, #31]
 80037f0:	e0c0      	b.n	8003974 <UART_SetConfig+0x348>
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	4a44      	ldr	r2, [pc, #272]	; (8003908 <UART_SetConfig+0x2dc>)
 80037f8:	4293      	cmp	r3, r2
 80037fa:	d125      	bne.n	8003848 <UART_SetConfig+0x21c>
 80037fc:	4b3e      	ldr	r3, [pc, #248]	; (80038f8 <UART_SetConfig+0x2cc>)
 80037fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003802:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003806:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800380a:	d017      	beq.n	800383c <UART_SetConfig+0x210>
 800380c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003810:	d817      	bhi.n	8003842 <UART_SetConfig+0x216>
 8003812:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003816:	d00b      	beq.n	8003830 <UART_SetConfig+0x204>
 8003818:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800381c:	d811      	bhi.n	8003842 <UART_SetConfig+0x216>
 800381e:	2b00      	cmp	r3, #0
 8003820:	d003      	beq.n	800382a <UART_SetConfig+0x1fe>
 8003822:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003826:	d006      	beq.n	8003836 <UART_SetConfig+0x20a>
 8003828:	e00b      	b.n	8003842 <UART_SetConfig+0x216>
 800382a:	2300      	movs	r3, #0
 800382c:	77fb      	strb	r3, [r7, #31]
 800382e:	e0a1      	b.n	8003974 <UART_SetConfig+0x348>
 8003830:	2302      	movs	r3, #2
 8003832:	77fb      	strb	r3, [r7, #31]
 8003834:	e09e      	b.n	8003974 <UART_SetConfig+0x348>
 8003836:	2304      	movs	r3, #4
 8003838:	77fb      	strb	r3, [r7, #31]
 800383a:	e09b      	b.n	8003974 <UART_SetConfig+0x348>
 800383c:	2308      	movs	r3, #8
 800383e:	77fb      	strb	r3, [r7, #31]
 8003840:	e098      	b.n	8003974 <UART_SetConfig+0x348>
 8003842:	2310      	movs	r3, #16
 8003844:	77fb      	strb	r3, [r7, #31]
 8003846:	e095      	b.n	8003974 <UART_SetConfig+0x348>
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	4a2f      	ldr	r2, [pc, #188]	; (800390c <UART_SetConfig+0x2e0>)
 800384e:	4293      	cmp	r3, r2
 8003850:	d125      	bne.n	800389e <UART_SetConfig+0x272>
 8003852:	4b29      	ldr	r3, [pc, #164]	; (80038f8 <UART_SetConfig+0x2cc>)
 8003854:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003858:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800385c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003860:	d017      	beq.n	8003892 <UART_SetConfig+0x266>
 8003862:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003866:	d817      	bhi.n	8003898 <UART_SetConfig+0x26c>
 8003868:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800386c:	d00b      	beq.n	8003886 <UART_SetConfig+0x25a>
 800386e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003872:	d811      	bhi.n	8003898 <UART_SetConfig+0x26c>
 8003874:	2b00      	cmp	r3, #0
 8003876:	d003      	beq.n	8003880 <UART_SetConfig+0x254>
 8003878:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800387c:	d006      	beq.n	800388c <UART_SetConfig+0x260>
 800387e:	e00b      	b.n	8003898 <UART_SetConfig+0x26c>
 8003880:	2301      	movs	r3, #1
 8003882:	77fb      	strb	r3, [r7, #31]
 8003884:	e076      	b.n	8003974 <UART_SetConfig+0x348>
 8003886:	2302      	movs	r3, #2
 8003888:	77fb      	strb	r3, [r7, #31]
 800388a:	e073      	b.n	8003974 <UART_SetConfig+0x348>
 800388c:	2304      	movs	r3, #4
 800388e:	77fb      	strb	r3, [r7, #31]
 8003890:	e070      	b.n	8003974 <UART_SetConfig+0x348>
 8003892:	2308      	movs	r3, #8
 8003894:	77fb      	strb	r3, [r7, #31]
 8003896:	e06d      	b.n	8003974 <UART_SetConfig+0x348>
 8003898:	2310      	movs	r3, #16
 800389a:	77fb      	strb	r3, [r7, #31]
 800389c:	e06a      	b.n	8003974 <UART_SetConfig+0x348>
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	4a1b      	ldr	r2, [pc, #108]	; (8003910 <UART_SetConfig+0x2e4>)
 80038a4:	4293      	cmp	r3, r2
 80038a6:	d138      	bne.n	800391a <UART_SetConfig+0x2ee>
 80038a8:	4b13      	ldr	r3, [pc, #76]	; (80038f8 <UART_SetConfig+0x2cc>)
 80038aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038ae:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80038b2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80038b6:	d017      	beq.n	80038e8 <UART_SetConfig+0x2bc>
 80038b8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80038bc:	d82a      	bhi.n	8003914 <UART_SetConfig+0x2e8>
 80038be:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80038c2:	d00b      	beq.n	80038dc <UART_SetConfig+0x2b0>
 80038c4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80038c8:	d824      	bhi.n	8003914 <UART_SetConfig+0x2e8>
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d003      	beq.n	80038d6 <UART_SetConfig+0x2aa>
 80038ce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80038d2:	d006      	beq.n	80038e2 <UART_SetConfig+0x2b6>
 80038d4:	e01e      	b.n	8003914 <UART_SetConfig+0x2e8>
 80038d6:	2300      	movs	r3, #0
 80038d8:	77fb      	strb	r3, [r7, #31]
 80038da:	e04b      	b.n	8003974 <UART_SetConfig+0x348>
 80038dc:	2302      	movs	r3, #2
 80038de:	77fb      	strb	r3, [r7, #31]
 80038e0:	e048      	b.n	8003974 <UART_SetConfig+0x348>
 80038e2:	2304      	movs	r3, #4
 80038e4:	77fb      	strb	r3, [r7, #31]
 80038e6:	e045      	b.n	8003974 <UART_SetConfig+0x348>
 80038e8:	2308      	movs	r3, #8
 80038ea:	77fb      	strb	r3, [r7, #31]
 80038ec:	e042      	b.n	8003974 <UART_SetConfig+0x348>
 80038ee:	bf00      	nop
 80038f0:	efff69f3 	.word	0xefff69f3
 80038f4:	40011000 	.word	0x40011000
 80038f8:	40023800 	.word	0x40023800
 80038fc:	40004400 	.word	0x40004400
 8003900:	40004800 	.word	0x40004800
 8003904:	40004c00 	.word	0x40004c00
 8003908:	40005000 	.word	0x40005000
 800390c:	40011400 	.word	0x40011400
 8003910:	40007800 	.word	0x40007800
 8003914:	2310      	movs	r3, #16
 8003916:	77fb      	strb	r3, [r7, #31]
 8003918:	e02c      	b.n	8003974 <UART_SetConfig+0x348>
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	4a72      	ldr	r2, [pc, #456]	; (8003ae8 <UART_SetConfig+0x4bc>)
 8003920:	4293      	cmp	r3, r2
 8003922:	d125      	bne.n	8003970 <UART_SetConfig+0x344>
 8003924:	4b71      	ldr	r3, [pc, #452]	; (8003aec <UART_SetConfig+0x4c0>)
 8003926:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800392a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800392e:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003932:	d017      	beq.n	8003964 <UART_SetConfig+0x338>
 8003934:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003938:	d817      	bhi.n	800396a <UART_SetConfig+0x33e>
 800393a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800393e:	d00b      	beq.n	8003958 <UART_SetConfig+0x32c>
 8003940:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003944:	d811      	bhi.n	800396a <UART_SetConfig+0x33e>
 8003946:	2b00      	cmp	r3, #0
 8003948:	d003      	beq.n	8003952 <UART_SetConfig+0x326>
 800394a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800394e:	d006      	beq.n	800395e <UART_SetConfig+0x332>
 8003950:	e00b      	b.n	800396a <UART_SetConfig+0x33e>
 8003952:	2300      	movs	r3, #0
 8003954:	77fb      	strb	r3, [r7, #31]
 8003956:	e00d      	b.n	8003974 <UART_SetConfig+0x348>
 8003958:	2302      	movs	r3, #2
 800395a:	77fb      	strb	r3, [r7, #31]
 800395c:	e00a      	b.n	8003974 <UART_SetConfig+0x348>
 800395e:	2304      	movs	r3, #4
 8003960:	77fb      	strb	r3, [r7, #31]
 8003962:	e007      	b.n	8003974 <UART_SetConfig+0x348>
 8003964:	2308      	movs	r3, #8
 8003966:	77fb      	strb	r3, [r7, #31]
 8003968:	e004      	b.n	8003974 <UART_SetConfig+0x348>
 800396a:	2310      	movs	r3, #16
 800396c:	77fb      	strb	r3, [r7, #31]
 800396e:	e001      	b.n	8003974 <UART_SetConfig+0x348>
 8003970:	2310      	movs	r3, #16
 8003972:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	69db      	ldr	r3, [r3, #28]
 8003978:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800397c:	d15b      	bne.n	8003a36 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 800397e:	7ffb      	ldrb	r3, [r7, #31]
 8003980:	2b08      	cmp	r3, #8
 8003982:	d828      	bhi.n	80039d6 <UART_SetConfig+0x3aa>
 8003984:	a201      	add	r2, pc, #4	; (adr r2, 800398c <UART_SetConfig+0x360>)
 8003986:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800398a:	bf00      	nop
 800398c:	080039b1 	.word	0x080039b1
 8003990:	080039b9 	.word	0x080039b9
 8003994:	080039c1 	.word	0x080039c1
 8003998:	080039d7 	.word	0x080039d7
 800399c:	080039c7 	.word	0x080039c7
 80039a0:	080039d7 	.word	0x080039d7
 80039a4:	080039d7 	.word	0x080039d7
 80039a8:	080039d7 	.word	0x080039d7
 80039ac:	080039cf 	.word	0x080039cf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80039b0:	f7fe fc1c 	bl	80021ec <HAL_RCC_GetPCLK1Freq>
 80039b4:	61b8      	str	r0, [r7, #24]
        break;
 80039b6:	e013      	b.n	80039e0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80039b8:	f7fe fc2c 	bl	8002214 <HAL_RCC_GetPCLK2Freq>
 80039bc:	61b8      	str	r0, [r7, #24]
        break;
 80039be:	e00f      	b.n	80039e0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80039c0:	4b4b      	ldr	r3, [pc, #300]	; (8003af0 <UART_SetConfig+0x4c4>)
 80039c2:	61bb      	str	r3, [r7, #24]
        break;
 80039c4:	e00c      	b.n	80039e0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80039c6:	f7fe faff 	bl	8001fc8 <HAL_RCC_GetSysClockFreq>
 80039ca:	61b8      	str	r0, [r7, #24]
        break;
 80039cc:	e008      	b.n	80039e0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80039ce:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80039d2:	61bb      	str	r3, [r7, #24]
        break;
 80039d4:	e004      	b.n	80039e0 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 80039d6:	2300      	movs	r3, #0
 80039d8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80039da:	2301      	movs	r3, #1
 80039dc:	77bb      	strb	r3, [r7, #30]
        break;
 80039de:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80039e0:	69bb      	ldr	r3, [r7, #24]
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d074      	beq.n	8003ad0 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80039e6:	69bb      	ldr	r3, [r7, #24]
 80039e8:	005a      	lsls	r2, r3, #1
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	685b      	ldr	r3, [r3, #4]
 80039ee:	085b      	lsrs	r3, r3, #1
 80039f0:	441a      	add	r2, r3
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	685b      	ldr	r3, [r3, #4]
 80039f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80039fa:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80039fc:	693b      	ldr	r3, [r7, #16]
 80039fe:	2b0f      	cmp	r3, #15
 8003a00:	d916      	bls.n	8003a30 <UART_SetConfig+0x404>
 8003a02:	693b      	ldr	r3, [r7, #16]
 8003a04:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003a08:	d212      	bcs.n	8003a30 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003a0a:	693b      	ldr	r3, [r7, #16]
 8003a0c:	b29b      	uxth	r3, r3
 8003a0e:	f023 030f 	bic.w	r3, r3, #15
 8003a12:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003a14:	693b      	ldr	r3, [r7, #16]
 8003a16:	085b      	lsrs	r3, r3, #1
 8003a18:	b29b      	uxth	r3, r3
 8003a1a:	f003 0307 	and.w	r3, r3, #7
 8003a1e:	b29a      	uxth	r2, r3
 8003a20:	89fb      	ldrh	r3, [r7, #14]
 8003a22:	4313      	orrs	r3, r2
 8003a24:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	89fa      	ldrh	r2, [r7, #14]
 8003a2c:	60da      	str	r2, [r3, #12]
 8003a2e:	e04f      	b.n	8003ad0 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8003a30:	2301      	movs	r3, #1
 8003a32:	77bb      	strb	r3, [r7, #30]
 8003a34:	e04c      	b.n	8003ad0 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003a36:	7ffb      	ldrb	r3, [r7, #31]
 8003a38:	2b08      	cmp	r3, #8
 8003a3a:	d828      	bhi.n	8003a8e <UART_SetConfig+0x462>
 8003a3c:	a201      	add	r2, pc, #4	; (adr r2, 8003a44 <UART_SetConfig+0x418>)
 8003a3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a42:	bf00      	nop
 8003a44:	08003a69 	.word	0x08003a69
 8003a48:	08003a71 	.word	0x08003a71
 8003a4c:	08003a79 	.word	0x08003a79
 8003a50:	08003a8f 	.word	0x08003a8f
 8003a54:	08003a7f 	.word	0x08003a7f
 8003a58:	08003a8f 	.word	0x08003a8f
 8003a5c:	08003a8f 	.word	0x08003a8f
 8003a60:	08003a8f 	.word	0x08003a8f
 8003a64:	08003a87 	.word	0x08003a87
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003a68:	f7fe fbc0 	bl	80021ec <HAL_RCC_GetPCLK1Freq>
 8003a6c:	61b8      	str	r0, [r7, #24]
        break;
 8003a6e:	e013      	b.n	8003a98 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003a70:	f7fe fbd0 	bl	8002214 <HAL_RCC_GetPCLK2Freq>
 8003a74:	61b8      	str	r0, [r7, #24]
        break;
 8003a76:	e00f      	b.n	8003a98 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003a78:	4b1d      	ldr	r3, [pc, #116]	; (8003af0 <UART_SetConfig+0x4c4>)
 8003a7a:	61bb      	str	r3, [r7, #24]
        break;
 8003a7c:	e00c      	b.n	8003a98 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003a7e:	f7fe faa3 	bl	8001fc8 <HAL_RCC_GetSysClockFreq>
 8003a82:	61b8      	str	r0, [r7, #24]
        break;
 8003a84:	e008      	b.n	8003a98 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003a86:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003a8a:	61bb      	str	r3, [r7, #24]
        break;
 8003a8c:	e004      	b.n	8003a98 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8003a8e:	2300      	movs	r3, #0
 8003a90:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003a92:	2301      	movs	r3, #1
 8003a94:	77bb      	strb	r3, [r7, #30]
        break;
 8003a96:	bf00      	nop
    }

    if (pclk != 0U)
 8003a98:	69bb      	ldr	r3, [r7, #24]
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d018      	beq.n	8003ad0 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	685b      	ldr	r3, [r3, #4]
 8003aa2:	085a      	lsrs	r2, r3, #1
 8003aa4:	69bb      	ldr	r3, [r7, #24]
 8003aa6:	441a      	add	r2, r3
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	685b      	ldr	r3, [r3, #4]
 8003aac:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ab0:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003ab2:	693b      	ldr	r3, [r7, #16]
 8003ab4:	2b0f      	cmp	r3, #15
 8003ab6:	d909      	bls.n	8003acc <UART_SetConfig+0x4a0>
 8003ab8:	693b      	ldr	r3, [r7, #16]
 8003aba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003abe:	d205      	bcs.n	8003acc <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003ac0:	693b      	ldr	r3, [r7, #16]
 8003ac2:	b29a      	uxth	r2, r3
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	60da      	str	r2, [r3, #12]
 8003aca:	e001      	b.n	8003ad0 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8003acc:	2301      	movs	r3, #1
 8003ace:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	2200      	movs	r2, #0
 8003ad4:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	2200      	movs	r2, #0
 8003ada:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8003adc:	7fbb      	ldrb	r3, [r7, #30]
}
 8003ade:	4618      	mov	r0, r3
 8003ae0:	3720      	adds	r7, #32
 8003ae2:	46bd      	mov	sp, r7
 8003ae4:	bd80      	pop	{r7, pc}
 8003ae6:	bf00      	nop
 8003ae8:	40007c00 	.word	0x40007c00
 8003aec:	40023800 	.word	0x40023800
 8003af0:	00f42400 	.word	0x00f42400

08003af4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003af4:	b480      	push	{r7}
 8003af6:	b083      	sub	sp, #12
 8003af8:	af00      	add	r7, sp, #0
 8003afa:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b00:	f003 0301 	and.w	r3, r3, #1
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d00a      	beq.n	8003b1e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	685b      	ldr	r3, [r3, #4]
 8003b0e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	430a      	orrs	r2, r1
 8003b1c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b22:	f003 0302 	and.w	r3, r3, #2
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d00a      	beq.n	8003b40 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	685b      	ldr	r3, [r3, #4]
 8003b30:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	430a      	orrs	r2, r1
 8003b3e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b44:	f003 0304 	and.w	r3, r3, #4
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d00a      	beq.n	8003b62 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	685b      	ldr	r3, [r3, #4]
 8003b52:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	430a      	orrs	r2, r1
 8003b60:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b66:	f003 0308 	and.w	r3, r3, #8
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d00a      	beq.n	8003b84 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	685b      	ldr	r3, [r3, #4]
 8003b74:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	430a      	orrs	r2, r1
 8003b82:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b88:	f003 0310 	and.w	r3, r3, #16
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d00a      	beq.n	8003ba6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	689b      	ldr	r3, [r3, #8]
 8003b96:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	430a      	orrs	r2, r1
 8003ba4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003baa:	f003 0320 	and.w	r3, r3, #32
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d00a      	beq.n	8003bc8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	689b      	ldr	r3, [r3, #8]
 8003bb8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	430a      	orrs	r2, r1
 8003bc6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bcc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d01a      	beq.n	8003c0a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	685b      	ldr	r3, [r3, #4]
 8003bda:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	430a      	orrs	r2, r1
 8003be8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bee:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003bf2:	d10a      	bne.n	8003c0a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	685b      	ldr	r3, [r3, #4]
 8003bfa:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	430a      	orrs	r2, r1
 8003c08:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d00a      	beq.n	8003c2c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	685b      	ldr	r3, [r3, #4]
 8003c1c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	430a      	orrs	r2, r1
 8003c2a:	605a      	str	r2, [r3, #4]
  }
}
 8003c2c:	bf00      	nop
 8003c2e:	370c      	adds	r7, #12
 8003c30:	46bd      	mov	sp, r7
 8003c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c36:	4770      	bx	lr

08003c38 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003c38:	b580      	push	{r7, lr}
 8003c3a:	b086      	sub	sp, #24
 8003c3c:	af02      	add	r7, sp, #8
 8003c3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	2200      	movs	r2, #0
 8003c44:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003c48:	f7fd f8ca 	bl	8000de0 <HAL_GetTick>
 8003c4c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	f003 0308 	and.w	r3, r3, #8
 8003c58:	2b08      	cmp	r3, #8
 8003c5a:	d10e      	bne.n	8003c7a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003c5c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003c60:	9300      	str	r3, [sp, #0]
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	2200      	movs	r2, #0
 8003c66:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003c6a:	6878      	ldr	r0, [r7, #4]
 8003c6c:	f000 f81b 	bl	8003ca6 <UART_WaitOnFlagUntilTimeout>
 8003c70:	4603      	mov	r3, r0
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d001      	beq.n	8003c7a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003c76:	2303      	movs	r3, #3
 8003c78:	e011      	b.n	8003c9e <UART_CheckIdleState+0x66>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	2220      	movs	r2, #32
 8003c7e:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	2220      	movs	r2, #32
 8003c84:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	2200      	movs	r2, #0
 8003c8c:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	2200      	movs	r2, #0
 8003c92:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	2200      	movs	r2, #0
 8003c98:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8003c9c:	2300      	movs	r3, #0
}
 8003c9e:	4618      	mov	r0, r3
 8003ca0:	3710      	adds	r7, #16
 8003ca2:	46bd      	mov	sp, r7
 8003ca4:	bd80      	pop	{r7, pc}

08003ca6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003ca6:	b580      	push	{r7, lr}
 8003ca8:	b09c      	sub	sp, #112	; 0x70
 8003caa:	af00      	add	r7, sp, #0
 8003cac:	60f8      	str	r0, [r7, #12]
 8003cae:	60b9      	str	r1, [r7, #8]
 8003cb0:	603b      	str	r3, [r7, #0]
 8003cb2:	4613      	mov	r3, r2
 8003cb4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003cb6:	e0a7      	b.n	8003e08 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003cb8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003cba:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003cbe:	f000 80a3 	beq.w	8003e08 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003cc2:	f7fd f88d 	bl	8000de0 <HAL_GetTick>
 8003cc6:	4602      	mov	r2, r0
 8003cc8:	683b      	ldr	r3, [r7, #0]
 8003cca:	1ad3      	subs	r3, r2, r3
 8003ccc:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8003cce:	429a      	cmp	r2, r3
 8003cd0:	d302      	bcc.n	8003cd8 <UART_WaitOnFlagUntilTimeout+0x32>
 8003cd2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d13f      	bne.n	8003d58 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cde:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003ce0:	e853 3f00 	ldrex	r3, [r3]
 8003ce4:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8003ce6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003ce8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003cec:	667b      	str	r3, [r7, #100]	; 0x64
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	461a      	mov	r2, r3
 8003cf4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003cf6:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003cf8:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cfa:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8003cfc:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003cfe:	e841 2300 	strex	r3, r2, [r1]
 8003d02:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8003d04:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d1e6      	bne.n	8003cd8 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	3308      	adds	r3, #8
 8003d10:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d12:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003d14:	e853 3f00 	ldrex	r3, [r3]
 8003d18:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003d1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d1c:	f023 0301 	bic.w	r3, r3, #1
 8003d20:	663b      	str	r3, [r7, #96]	; 0x60
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	3308      	adds	r3, #8
 8003d28:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003d2a:	64ba      	str	r2, [r7, #72]	; 0x48
 8003d2c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d2e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003d30:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003d32:	e841 2300 	strex	r3, r2, [r1]
 8003d36:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8003d38:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d1e5      	bne.n	8003d0a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	2220      	movs	r2, #32
 8003d42:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	2220      	movs	r2, #32
 8003d48:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	2200      	movs	r2, #0
 8003d50:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 8003d54:	2303      	movs	r3, #3
 8003d56:	e068      	b.n	8003e2a <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	f003 0304 	and.w	r3, r3, #4
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d050      	beq.n	8003e08 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	69db      	ldr	r3, [r3, #28]
 8003d6c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003d70:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003d74:	d148      	bne.n	8003e08 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003d7e:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d88:	e853 3f00 	ldrex	r3, [r3]
 8003d8c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003d8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d90:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003d94:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	461a      	mov	r2, r3
 8003d9c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003d9e:	637b      	str	r3, [r7, #52]	; 0x34
 8003da0:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003da2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003da4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003da6:	e841 2300 	strex	r3, r2, [r1]
 8003daa:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003dac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d1e6      	bne.n	8003d80 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	3308      	adds	r3, #8
 8003db8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003dba:	697b      	ldr	r3, [r7, #20]
 8003dbc:	e853 3f00 	ldrex	r3, [r3]
 8003dc0:	613b      	str	r3, [r7, #16]
   return(result);
 8003dc2:	693b      	ldr	r3, [r7, #16]
 8003dc4:	f023 0301 	bic.w	r3, r3, #1
 8003dc8:	66bb      	str	r3, [r7, #104]	; 0x68
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	3308      	adds	r3, #8
 8003dd0:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8003dd2:	623a      	str	r2, [r7, #32]
 8003dd4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003dd6:	69f9      	ldr	r1, [r7, #28]
 8003dd8:	6a3a      	ldr	r2, [r7, #32]
 8003dda:	e841 2300 	strex	r3, r2, [r1]
 8003dde:	61bb      	str	r3, [r7, #24]
   return(result);
 8003de0:	69bb      	ldr	r3, [r7, #24]
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d1e5      	bne.n	8003db2 <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	2220      	movs	r2, #32
 8003dea:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	2220      	movs	r2, #32
 8003df0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	2220      	movs	r2, #32
 8003df8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	2200      	movs	r2, #0
 8003e00:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8003e04:	2303      	movs	r3, #3
 8003e06:	e010      	b.n	8003e2a <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	69da      	ldr	r2, [r3, #28]
 8003e0e:	68bb      	ldr	r3, [r7, #8]
 8003e10:	4013      	ands	r3, r2
 8003e12:	68ba      	ldr	r2, [r7, #8]
 8003e14:	429a      	cmp	r2, r3
 8003e16:	bf0c      	ite	eq
 8003e18:	2301      	moveq	r3, #1
 8003e1a:	2300      	movne	r3, #0
 8003e1c:	b2db      	uxtb	r3, r3
 8003e1e:	461a      	mov	r2, r3
 8003e20:	79fb      	ldrb	r3, [r7, #7]
 8003e22:	429a      	cmp	r2, r3
 8003e24:	f43f af48 	beq.w	8003cb8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003e28:	2300      	movs	r3, #0
}
 8003e2a:	4618      	mov	r0, r3
 8003e2c:	3770      	adds	r7, #112	; 0x70
 8003e2e:	46bd      	mov	sp, r7
 8003e30:	bd80      	pop	{r7, pc}
	...

08003e34 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003e34:	b480      	push	{r7}
 8003e36:	b097      	sub	sp, #92	; 0x5c
 8003e38:	af00      	add	r7, sp, #0
 8003e3a:	60f8      	str	r0, [r7, #12]
 8003e3c:	60b9      	str	r1, [r7, #8]
 8003e3e:	4613      	mov	r3, r2
 8003e40:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	68ba      	ldr	r2, [r7, #8]
 8003e46:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	88fa      	ldrh	r2, [r7, #6]
 8003e4c:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	88fa      	ldrh	r2, [r7, #6]
 8003e54:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	2200      	movs	r2, #0
 8003e5c:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	689b      	ldr	r3, [r3, #8]
 8003e62:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e66:	d10e      	bne.n	8003e86 <UART_Start_Receive_IT+0x52>
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	691b      	ldr	r3, [r3, #16]
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d105      	bne.n	8003e7c <UART_Start_Receive_IT+0x48>
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	f240 12ff 	movw	r2, #511	; 0x1ff
 8003e76:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003e7a:	e02d      	b.n	8003ed8 <UART_Start_Receive_IT+0xa4>
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	22ff      	movs	r2, #255	; 0xff
 8003e80:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003e84:	e028      	b.n	8003ed8 <UART_Start_Receive_IT+0xa4>
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	689b      	ldr	r3, [r3, #8]
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d10d      	bne.n	8003eaa <UART_Start_Receive_IT+0x76>
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	691b      	ldr	r3, [r3, #16]
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d104      	bne.n	8003ea0 <UART_Start_Receive_IT+0x6c>
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	22ff      	movs	r2, #255	; 0xff
 8003e9a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003e9e:	e01b      	b.n	8003ed8 <UART_Start_Receive_IT+0xa4>
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	227f      	movs	r2, #127	; 0x7f
 8003ea4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003ea8:	e016      	b.n	8003ed8 <UART_Start_Receive_IT+0xa4>
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	689b      	ldr	r3, [r3, #8]
 8003eae:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003eb2:	d10d      	bne.n	8003ed0 <UART_Start_Receive_IT+0x9c>
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	691b      	ldr	r3, [r3, #16]
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d104      	bne.n	8003ec6 <UART_Start_Receive_IT+0x92>
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	227f      	movs	r2, #127	; 0x7f
 8003ec0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003ec4:	e008      	b.n	8003ed8 <UART_Start_Receive_IT+0xa4>
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	223f      	movs	r2, #63	; 0x3f
 8003eca:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003ece:	e003      	b.n	8003ed8 <UART_Start_Receive_IT+0xa4>
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	2200      	movs	r2, #0
 8003ed4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	2200      	movs	r2, #0
 8003edc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	2222      	movs	r2, #34	; 0x22
 8003ee4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	3308      	adds	r3, #8
 8003eee:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ef0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003ef2:	e853 3f00 	ldrex	r3, [r3]
 8003ef6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003ef8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003efa:	f043 0301 	orr.w	r3, r3, #1
 8003efe:	657b      	str	r3, [r7, #84]	; 0x54
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	3308      	adds	r3, #8
 8003f06:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003f08:	64ba      	str	r2, [r7, #72]	; 0x48
 8003f0a:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f0c:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003f0e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003f10:	e841 2300 	strex	r3, r2, [r1]
 8003f14:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8003f16:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d1e5      	bne.n	8003ee8 <UART_Start_Receive_IT+0xb4>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	689b      	ldr	r3, [r3, #8]
 8003f20:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003f24:	d107      	bne.n	8003f36 <UART_Start_Receive_IT+0x102>
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	691b      	ldr	r3, [r3, #16]
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d103      	bne.n	8003f36 <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	4a21      	ldr	r2, [pc, #132]	; (8003fb8 <UART_Start_Receive_IT+0x184>)
 8003f32:	669a      	str	r2, [r3, #104]	; 0x68
 8003f34:	e002      	b.n	8003f3c <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	4a20      	ldr	r2, [pc, #128]	; (8003fbc <UART_Start_Receive_IT+0x188>)
 8003f3a:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	691b      	ldr	r3, [r3, #16]
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d019      	beq.n	8003f78 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f4c:	e853 3f00 	ldrex	r3, [r3]
 8003f50:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003f52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f54:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8003f58:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	461a      	mov	r2, r3
 8003f60:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003f62:	637b      	str	r3, [r7, #52]	; 0x34
 8003f64:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f66:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003f68:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003f6a:	e841 2300 	strex	r3, r2, [r1]
 8003f6e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003f70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d1e6      	bne.n	8003f44 <UART_Start_Receive_IT+0x110>
 8003f76:	e018      	b.n	8003faa <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f7e:	697b      	ldr	r3, [r7, #20]
 8003f80:	e853 3f00 	ldrex	r3, [r3]
 8003f84:	613b      	str	r3, [r7, #16]
   return(result);
 8003f86:	693b      	ldr	r3, [r7, #16]
 8003f88:	f043 0320 	orr.w	r3, r3, #32
 8003f8c:	653b      	str	r3, [r7, #80]	; 0x50
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	461a      	mov	r2, r3
 8003f94:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003f96:	623b      	str	r3, [r7, #32]
 8003f98:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f9a:	69f9      	ldr	r1, [r7, #28]
 8003f9c:	6a3a      	ldr	r2, [r7, #32]
 8003f9e:	e841 2300 	strex	r3, r2, [r1]
 8003fa2:	61bb      	str	r3, [r7, #24]
   return(result);
 8003fa4:	69bb      	ldr	r3, [r7, #24]
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d1e6      	bne.n	8003f78 <UART_Start_Receive_IT+0x144>
  }
  return HAL_OK;
 8003faa:	2300      	movs	r3, #0
}
 8003fac:	4618      	mov	r0, r3
 8003fae:	375c      	adds	r7, #92	; 0x5c
 8003fb0:	46bd      	mov	sp, r7
 8003fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb6:	4770      	bx	lr
 8003fb8:	080043e5 	.word	0x080043e5
 8003fbc:	0800427f 	.word	0x0800427f

08003fc0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003fc0:	b480      	push	{r7}
 8003fc2:	b095      	sub	sp, #84	; 0x54
 8003fc4:	af00      	add	r7, sp, #0
 8003fc6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003fd0:	e853 3f00 	ldrex	r3, [r3]
 8003fd4:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003fd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fd8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003fdc:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	461a      	mov	r2, r3
 8003fe4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003fe6:	643b      	str	r3, [r7, #64]	; 0x40
 8003fe8:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fea:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003fec:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003fee:	e841 2300 	strex	r3, r2, [r1]
 8003ff2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003ff4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d1e6      	bne.n	8003fc8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	3308      	adds	r3, #8
 8004000:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004002:	6a3b      	ldr	r3, [r7, #32]
 8004004:	e853 3f00 	ldrex	r3, [r3]
 8004008:	61fb      	str	r3, [r7, #28]
   return(result);
 800400a:	69fb      	ldr	r3, [r7, #28]
 800400c:	f023 0301 	bic.w	r3, r3, #1
 8004010:	64bb      	str	r3, [r7, #72]	; 0x48
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	3308      	adds	r3, #8
 8004018:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800401a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800401c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800401e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004020:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004022:	e841 2300 	strex	r3, r2, [r1]
 8004026:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004028:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800402a:	2b00      	cmp	r3, #0
 800402c:	d1e5      	bne.n	8003ffa <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004032:	2b01      	cmp	r3, #1
 8004034:	d118      	bne.n	8004068 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	e853 3f00 	ldrex	r3, [r3]
 8004042:	60bb      	str	r3, [r7, #8]
   return(result);
 8004044:	68bb      	ldr	r3, [r7, #8]
 8004046:	f023 0310 	bic.w	r3, r3, #16
 800404a:	647b      	str	r3, [r7, #68]	; 0x44
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	461a      	mov	r2, r3
 8004052:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004054:	61bb      	str	r3, [r7, #24]
 8004056:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004058:	6979      	ldr	r1, [r7, #20]
 800405a:	69ba      	ldr	r2, [r7, #24]
 800405c:	e841 2300 	strex	r3, r2, [r1]
 8004060:	613b      	str	r3, [r7, #16]
   return(result);
 8004062:	693b      	ldr	r3, [r7, #16]
 8004064:	2b00      	cmp	r3, #0
 8004066:	d1e6      	bne.n	8004036 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	2220      	movs	r2, #32
 800406c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	2200      	movs	r2, #0
 8004074:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	2200      	movs	r2, #0
 800407a:	669a      	str	r2, [r3, #104]	; 0x68
}
 800407c:	bf00      	nop
 800407e:	3754      	adds	r7, #84	; 0x54
 8004080:	46bd      	mov	sp, r7
 8004082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004086:	4770      	bx	lr

08004088 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004088:	b580      	push	{r7, lr}
 800408a:	b084      	sub	sp, #16
 800408c:	af00      	add	r7, sp, #0
 800408e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004094:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	2200      	movs	r2, #0
 800409a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	2200      	movs	r2, #0
 80040a2:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80040a6:	68f8      	ldr	r0, [r7, #12]
 80040a8:	f7ff faaa 	bl	8003600 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80040ac:	bf00      	nop
 80040ae:	3710      	adds	r7, #16
 80040b0:	46bd      	mov	sp, r7
 80040b2:	bd80      	pop	{r7, pc}

080040b4 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 80040b4:	b480      	push	{r7}
 80040b6:	b08f      	sub	sp, #60	; 0x3c
 80040b8:	af00      	add	r7, sp, #0
 80040ba:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80040c0:	2b21      	cmp	r3, #33	; 0x21
 80040c2:	d14c      	bne.n	800415e <UART_TxISR_8BIT+0xaa>
  {
    if (huart->TxXferCount == 0U)
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80040ca:	b29b      	uxth	r3, r3
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d132      	bne.n	8004136 <UART_TxISR_8BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040d6:	6a3b      	ldr	r3, [r7, #32]
 80040d8:	e853 3f00 	ldrex	r3, [r3]
 80040dc:	61fb      	str	r3, [r7, #28]
   return(result);
 80040de:	69fb      	ldr	r3, [r7, #28]
 80040e0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80040e4:	637b      	str	r3, [r7, #52]	; 0x34
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	461a      	mov	r2, r3
 80040ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80040ee:	62fb      	str	r3, [r7, #44]	; 0x2c
 80040f0:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040f2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80040f4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80040f6:	e841 2300 	strex	r3, r2, [r1]
 80040fa:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80040fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d1e6      	bne.n	80040d0 <UART_TxISR_8BIT+0x1c>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	e853 3f00 	ldrex	r3, [r3]
 800410e:	60bb      	str	r3, [r7, #8]
   return(result);
 8004110:	68bb      	ldr	r3, [r7, #8]
 8004112:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004116:	633b      	str	r3, [r7, #48]	; 0x30
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	461a      	mov	r2, r3
 800411e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004120:	61bb      	str	r3, [r7, #24]
 8004122:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004124:	6979      	ldr	r1, [r7, #20]
 8004126:	69ba      	ldr	r2, [r7, #24]
 8004128:	e841 2300 	strex	r3, r2, [r1]
 800412c:	613b      	str	r3, [r7, #16]
   return(result);
 800412e:	693b      	ldr	r3, [r7, #16]
 8004130:	2b00      	cmp	r3, #0
 8004132:	d1e6      	bne.n	8004102 <UART_TxISR_8BIT+0x4e>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 8004134:	e013      	b.n	800415e <UART_TxISR_8BIT+0xaa>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800413a:	781a      	ldrb	r2, [r3, #0]
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004146:	1c5a      	adds	r2, r3, #1
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004152:	b29b      	uxth	r3, r3
 8004154:	3b01      	subs	r3, #1
 8004156:	b29a      	uxth	r2, r3
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 800415e:	bf00      	nop
 8004160:	373c      	adds	r7, #60	; 0x3c
 8004162:	46bd      	mov	sp, r7
 8004164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004168:	4770      	bx	lr

0800416a <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 800416a:	b480      	push	{r7}
 800416c:	b091      	sub	sp, #68	; 0x44
 800416e:	af00      	add	r7, sp, #0
 8004170:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004176:	2b21      	cmp	r3, #33	; 0x21
 8004178:	d151      	bne.n	800421e <UART_TxISR_16BIT+0xb4>
  {
    if (huart->TxXferCount == 0U)
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004180:	b29b      	uxth	r3, r3
 8004182:	2b00      	cmp	r3, #0
 8004184:	d132      	bne.n	80041ec <UART_TxISR_16BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800418c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800418e:	e853 3f00 	ldrex	r3, [r3]
 8004192:	623b      	str	r3, [r7, #32]
   return(result);
 8004194:	6a3b      	ldr	r3, [r7, #32]
 8004196:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800419a:	63bb      	str	r3, [r7, #56]	; 0x38
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	461a      	mov	r2, r3
 80041a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041a4:	633b      	str	r3, [r7, #48]	; 0x30
 80041a6:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041a8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80041aa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80041ac:	e841 2300 	strex	r3, r2, [r1]
 80041b0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80041b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d1e6      	bne.n	8004186 <UART_TxISR_16BIT+0x1c>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041be:	693b      	ldr	r3, [r7, #16]
 80041c0:	e853 3f00 	ldrex	r3, [r3]
 80041c4:	60fb      	str	r3, [r7, #12]
   return(result);
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80041cc:	637b      	str	r3, [r7, #52]	; 0x34
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	461a      	mov	r2, r3
 80041d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80041d6:	61fb      	str	r3, [r7, #28]
 80041d8:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041da:	69b9      	ldr	r1, [r7, #24]
 80041dc:	69fa      	ldr	r2, [r7, #28]
 80041de:	e841 2300 	strex	r3, r2, [r1]
 80041e2:	617b      	str	r3, [r7, #20]
   return(result);
 80041e4:	697b      	ldr	r3, [r7, #20]
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d1e6      	bne.n	80041b8 <UART_TxISR_16BIT+0x4e>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 80041ea:	e018      	b.n	800421e <UART_TxISR_16BIT+0xb4>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80041f0:	63fb      	str	r3, [r7, #60]	; 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 80041f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80041f4:	881b      	ldrh	r3, [r3, #0]
 80041f6:	461a      	mov	r2, r3
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004200:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004206:	1c9a      	adds	r2, r3, #2
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004212:	b29b      	uxth	r3, r3
 8004214:	3b01      	subs	r3, #1
 8004216:	b29a      	uxth	r2, r3
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 800421e:	bf00      	nop
 8004220:	3744      	adds	r7, #68	; 0x44
 8004222:	46bd      	mov	sp, r7
 8004224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004228:	4770      	bx	lr

0800422a <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800422a:	b580      	push	{r7, lr}
 800422c:	b088      	sub	sp, #32
 800422e:	af00      	add	r7, sp, #0
 8004230:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	e853 3f00 	ldrex	r3, [r3]
 800423e:	60bb      	str	r3, [r7, #8]
   return(result);
 8004240:	68bb      	ldr	r3, [r7, #8]
 8004242:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004246:	61fb      	str	r3, [r7, #28]
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	461a      	mov	r2, r3
 800424e:	69fb      	ldr	r3, [r7, #28]
 8004250:	61bb      	str	r3, [r7, #24]
 8004252:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004254:	6979      	ldr	r1, [r7, #20]
 8004256:	69ba      	ldr	r2, [r7, #24]
 8004258:	e841 2300 	strex	r3, r2, [r1]
 800425c:	613b      	str	r3, [r7, #16]
   return(result);
 800425e:	693b      	ldr	r3, [r7, #16]
 8004260:	2b00      	cmp	r3, #0
 8004262:	d1e6      	bne.n	8004232 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	2220      	movs	r2, #32
 8004268:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	2200      	movs	r2, #0
 800426e:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004270:	6878      	ldr	r0, [r7, #4]
 8004272:	f7fc fb9d 	bl	80009b0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004276:	bf00      	nop
 8004278:	3720      	adds	r7, #32
 800427a:	46bd      	mov	sp, r7
 800427c:	bd80      	pop	{r7, pc}

0800427e <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800427e:	b580      	push	{r7, lr}
 8004280:	b096      	sub	sp, #88	; 0x58
 8004282:	af00      	add	r7, sp, #0
 8004284:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800428c:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004296:	2b22      	cmp	r3, #34	; 0x22
 8004298:	f040 8098 	bne.w	80043cc <UART_RxISR_8BIT+0x14e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042a2:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80042a6:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 80042aa:	b2d9      	uxtb	r1, r3
 80042ac:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80042b0:	b2da      	uxtb	r2, r3
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042b6:	400a      	ands	r2, r1
 80042b8:	b2d2      	uxtb	r2, r2
 80042ba:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042c0:	1c5a      	adds	r2, r3, #1
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80042cc:	b29b      	uxth	r3, r3
 80042ce:	3b01      	subs	r3, #1
 80042d0:	b29a      	uxth	r2, r3
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80042de:	b29b      	uxth	r3, r3
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d17b      	bne.n	80043dc <UART_RxISR_8BIT+0x15e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80042ec:	e853 3f00 	ldrex	r3, [r3]
 80042f0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80042f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80042f4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80042f8:	653b      	str	r3, [r7, #80]	; 0x50
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	461a      	mov	r2, r3
 8004300:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004302:	647b      	str	r3, [r7, #68]	; 0x44
 8004304:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004306:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004308:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800430a:	e841 2300 	strex	r3, r2, [r1]
 800430e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004310:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004312:	2b00      	cmp	r3, #0
 8004314:	d1e6      	bne.n	80042e4 <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	3308      	adds	r3, #8
 800431c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800431e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004320:	e853 3f00 	ldrex	r3, [r3]
 8004324:	623b      	str	r3, [r7, #32]
   return(result);
 8004326:	6a3b      	ldr	r3, [r7, #32]
 8004328:	f023 0301 	bic.w	r3, r3, #1
 800432c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	3308      	adds	r3, #8
 8004334:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004336:	633a      	str	r2, [r7, #48]	; 0x30
 8004338:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800433a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800433c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800433e:	e841 2300 	strex	r3, r2, [r1]
 8004342:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004344:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004346:	2b00      	cmp	r3, #0
 8004348:	d1e5      	bne.n	8004316 <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	2220      	movs	r2, #32
 800434e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	2200      	movs	r2, #0
 8004356:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	2200      	movs	r2, #0
 800435c:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004362:	2b01      	cmp	r3, #1
 8004364:	d12e      	bne.n	80043c4 <UART_RxISR_8BIT+0x146>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	2200      	movs	r2, #0
 800436a:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004372:	693b      	ldr	r3, [r7, #16]
 8004374:	e853 3f00 	ldrex	r3, [r3]
 8004378:	60fb      	str	r3, [r7, #12]
   return(result);
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	f023 0310 	bic.w	r3, r3, #16
 8004380:	64bb      	str	r3, [r7, #72]	; 0x48
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	461a      	mov	r2, r3
 8004388:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800438a:	61fb      	str	r3, [r7, #28]
 800438c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800438e:	69b9      	ldr	r1, [r7, #24]
 8004390:	69fa      	ldr	r2, [r7, #28]
 8004392:	e841 2300 	strex	r3, r2, [r1]
 8004396:	617b      	str	r3, [r7, #20]
   return(result);
 8004398:	697b      	ldr	r3, [r7, #20]
 800439a:	2b00      	cmp	r3, #0
 800439c:	d1e6      	bne.n	800436c <UART_RxISR_8BIT+0xee>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	69db      	ldr	r3, [r3, #28]
 80043a4:	f003 0310 	and.w	r3, r3, #16
 80043a8:	2b10      	cmp	r3, #16
 80043aa:	d103      	bne.n	80043b4 <UART_RxISR_8BIT+0x136>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	2210      	movs	r2, #16
 80043b2:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80043ba:	4619      	mov	r1, r3
 80043bc:	6878      	ldr	r0, [r7, #4]
 80043be:	f7ff f929 	bl	8003614 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80043c2:	e00b      	b.n	80043dc <UART_RxISR_8BIT+0x15e>
        HAL_UART_RxCpltCallback(huart);
 80043c4:	6878      	ldr	r0, [r7, #4]
 80043c6:	f7fc fafd 	bl	80009c4 <HAL_UART_RxCpltCallback>
}
 80043ca:	e007      	b.n	80043dc <UART_RxISR_8BIT+0x15e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	699a      	ldr	r2, [r3, #24]
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	f042 0208 	orr.w	r2, r2, #8
 80043da:	619a      	str	r2, [r3, #24]
}
 80043dc:	bf00      	nop
 80043de:	3758      	adds	r7, #88	; 0x58
 80043e0:	46bd      	mov	sp, r7
 80043e2:	bd80      	pop	{r7, pc}

080043e4 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80043e4:	b580      	push	{r7, lr}
 80043e6:	b096      	sub	sp, #88	; 0x58
 80043e8:	af00      	add	r7, sp, #0
 80043ea:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80043f2:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80043fc:	2b22      	cmp	r3, #34	; 0x22
 80043fe:	f040 8098 	bne.w	8004532 <UART_RxISR_16BIT+0x14e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004408:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004410:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 8004412:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8004416:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800441a:	4013      	ands	r3, r2
 800441c:	b29a      	uxth	r2, r3
 800441e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004420:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004426:	1c9a      	adds	r2, r3, #2
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004432:	b29b      	uxth	r3, r3
 8004434:	3b01      	subs	r3, #1
 8004436:	b29a      	uxth	r2, r3
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004444:	b29b      	uxth	r3, r3
 8004446:	2b00      	cmp	r3, #0
 8004448:	d17b      	bne.n	8004542 <UART_RxISR_16BIT+0x15e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004450:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004452:	e853 3f00 	ldrex	r3, [r3]
 8004456:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004458:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800445a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800445e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	461a      	mov	r2, r3
 8004466:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004468:	643b      	str	r3, [r7, #64]	; 0x40
 800446a:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800446c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800446e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004470:	e841 2300 	strex	r3, r2, [r1]
 8004474:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004476:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004478:	2b00      	cmp	r3, #0
 800447a:	d1e6      	bne.n	800444a <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	3308      	adds	r3, #8
 8004482:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004484:	6a3b      	ldr	r3, [r7, #32]
 8004486:	e853 3f00 	ldrex	r3, [r3]
 800448a:	61fb      	str	r3, [r7, #28]
   return(result);
 800448c:	69fb      	ldr	r3, [r7, #28]
 800448e:	f023 0301 	bic.w	r3, r3, #1
 8004492:	64bb      	str	r3, [r7, #72]	; 0x48
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	3308      	adds	r3, #8
 800449a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800449c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800449e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044a0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80044a2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80044a4:	e841 2300 	strex	r3, r2, [r1]
 80044a8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80044aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d1e5      	bne.n	800447c <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	2220      	movs	r2, #32
 80044b4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	2200      	movs	r2, #0
 80044bc:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	2200      	movs	r2, #0
 80044c2:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80044c8:	2b01      	cmp	r3, #1
 80044ca:	d12e      	bne.n	800452a <UART_RxISR_16BIT+0x146>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	2200      	movs	r2, #0
 80044d0:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	e853 3f00 	ldrex	r3, [r3]
 80044de:	60bb      	str	r3, [r7, #8]
   return(result);
 80044e0:	68bb      	ldr	r3, [r7, #8]
 80044e2:	f023 0310 	bic.w	r3, r3, #16
 80044e6:	647b      	str	r3, [r7, #68]	; 0x44
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	461a      	mov	r2, r3
 80044ee:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80044f0:	61bb      	str	r3, [r7, #24]
 80044f2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044f4:	6979      	ldr	r1, [r7, #20]
 80044f6:	69ba      	ldr	r2, [r7, #24]
 80044f8:	e841 2300 	strex	r3, r2, [r1]
 80044fc:	613b      	str	r3, [r7, #16]
   return(result);
 80044fe:	693b      	ldr	r3, [r7, #16]
 8004500:	2b00      	cmp	r3, #0
 8004502:	d1e6      	bne.n	80044d2 <UART_RxISR_16BIT+0xee>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	69db      	ldr	r3, [r3, #28]
 800450a:	f003 0310 	and.w	r3, r3, #16
 800450e:	2b10      	cmp	r3, #16
 8004510:	d103      	bne.n	800451a <UART_RxISR_16BIT+0x136>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	2210      	movs	r2, #16
 8004518:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8004520:	4619      	mov	r1, r3
 8004522:	6878      	ldr	r0, [r7, #4]
 8004524:	f7ff f876 	bl	8003614 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004528:	e00b      	b.n	8004542 <UART_RxISR_16BIT+0x15e>
        HAL_UART_RxCpltCallback(huart);
 800452a:	6878      	ldr	r0, [r7, #4]
 800452c:	f7fc fa4a 	bl	80009c4 <HAL_UART_RxCpltCallback>
}
 8004530:	e007      	b.n	8004542 <UART_RxISR_16BIT+0x15e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	699a      	ldr	r2, [r3, #24]
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	f042 0208 	orr.w	r2, r2, #8
 8004540:	619a      	str	r2, [r3, #24]
}
 8004542:	bf00      	nop
 8004544:	3758      	adds	r7, #88	; 0x58
 8004546:	46bd      	mov	sp, r7
 8004548:	bd80      	pop	{r7, pc}
	...

0800454c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800454c:	b084      	sub	sp, #16
 800454e:	b580      	push	{r7, lr}
 8004550:	b084      	sub	sp, #16
 8004552:	af00      	add	r7, sp, #0
 8004554:	6078      	str	r0, [r7, #4]
 8004556:	f107 001c 	add.w	r0, r7, #28
 800455a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800455e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004560:	2b01      	cmp	r3, #1
 8004562:	d126      	bne.n	80045b2 <USB_CoreInit+0x66>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004568:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	68da      	ldr	r2, [r3, #12]
 8004574:	4b38      	ldr	r3, [pc, #224]	; (8004658 <USB_CoreInit+0x10c>)
 8004576:	4013      	ands	r3, r2
 8004578:	687a      	ldr	r2, [r7, #4]
 800457a:	60d3      	str	r3, [r2, #12]

#if defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx)
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	68db      	ldr	r3, [r3, #12]
 8004580:	f043 0210 	orr.w	r2, r3, #16
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	60da      	str	r2, [r3, #12]
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	68db      	ldr	r3, [r3, #12]
 800458c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004594:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004596:	2b01      	cmp	r3, #1
 8004598:	d105      	bne.n	80045a6 <USB_CoreInit+0x5a>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	68db      	ldr	r3, [r3, #12]
 800459e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80045a6:	6878      	ldr	r0, [r7, #4]
 80045a8:	f000 fad0 	bl	8004b4c <USB_CoreReset>
 80045ac:	4603      	mov	r3, r0
 80045ae:	73fb      	strb	r3, [r7, #15]
 80045b0:	e03a      	b.n	8004628 <USB_CoreInit+0xdc>
  }
#if defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx)
  else if (cfg.phy_itface == USB_OTG_HS_EMBEDDED_PHY)
 80045b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045b4:	2b03      	cmp	r3, #3
 80045b6:	d126      	bne.n	8004606 <USB_CoreInit+0xba>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045bc:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The UTMI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	68da      	ldr	r2, [r3, #12]
 80045c8:	4b23      	ldr	r3, [pc, #140]	; (8004658 <USB_CoreInit+0x10c>)
 80045ca:	4013      	ands	r3, r2
 80045cc:	687a      	ldr	r2, [r7, #4]
 80045ce:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	68db      	ldr	r3, [r3, #12]
 80045d4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	60da      	str	r2, [r3, #12]

    /* Select UTMI Interface */
    USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	68db      	ldr	r3, [r3, #12]
 80045e0:	f023 0210 	bic.w	r2, r3, #16
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	60da      	str	r2, [r3, #12]
    {
      return HAL_ERROR;
    }
#endif /* USBPHYC */

    if (cfg.use_external_vbus == 1U)
 80045e8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80045ea:	2b01      	cmp	r3, #1
 80045ec:	d105      	bne.n	80045fa <USB_CoreInit+0xae>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	68db      	ldr	r3, [r3, #12]
 80045f2:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80045fa:	6878      	ldr	r0, [r7, #4]
 80045fc:	f000 faa6 	bl	8004b4c <USB_CoreReset>
 8004600:	4603      	mov	r3, r0
 8004602:	73fb      	strb	r3, [r7, #15]
 8004604:	e010      	b.n	8004628 <USB_CoreInit+0xdc>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	68db      	ldr	r3, [r3, #12]
 800460a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004612:	6878      	ldr	r0, [r7, #4]
 8004614:	f000 fa9a 	bl	8004b4c <USB_CoreReset>
 8004618:	4603      	mov	r3, r0
 800461a:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004620:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 8004628:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800462a:	2b01      	cmp	r3, #1
 800462c:	d10b      	bne.n	8004646 <USB_CoreInit+0xfa>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	689b      	ldr	r3, [r3, #8]
 8004632:	f043 0206 	orr.w	r2, r3, #6
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	689b      	ldr	r3, [r3, #8]
 800463e:	f043 0220 	orr.w	r2, r3, #32
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8004646:	7bfb      	ldrb	r3, [r7, #15]
}
 8004648:	4618      	mov	r0, r3
 800464a:	3710      	adds	r7, #16
 800464c:	46bd      	mov	sp, r7
 800464e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004652:	b004      	add	sp, #16
 8004654:	4770      	bx	lr
 8004656:	bf00      	nop
 8004658:	ffbdffbf 	.word	0xffbdffbf

0800465c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800465c:	b480      	push	{r7}
 800465e:	b083      	sub	sp, #12
 8004660:	af00      	add	r7, sp, #0
 8004662:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	689b      	ldr	r3, [r3, #8]
 8004668:	f023 0201 	bic.w	r2, r3, #1
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004670:	2300      	movs	r3, #0
}
 8004672:	4618      	mov	r0, r3
 8004674:	370c      	adds	r7, #12
 8004676:	46bd      	mov	sp, r7
 8004678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800467c:	4770      	bx	lr

0800467e <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800467e:	b580      	push	{r7, lr}
 8004680:	b084      	sub	sp, #16
 8004682:	af00      	add	r7, sp, #0
 8004684:	6078      	str	r0, [r7, #4]
 8004686:	460b      	mov	r3, r1
 8004688:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800468a:	2300      	movs	r3, #0
 800468c:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	68db      	ldr	r3, [r3, #12]
 8004692:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800469a:	78fb      	ldrb	r3, [r7, #3]
 800469c:	2b01      	cmp	r3, #1
 800469e:	d115      	bne.n	80046cc <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	68db      	ldr	r3, [r3, #12]
 80046a4:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80046ac:	2001      	movs	r0, #1
 80046ae:	f7fc fba3 	bl	8000df8 <HAL_Delay>
      ms++;
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	3301      	adds	r3, #1
 80046b6:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80046b8:	6878      	ldr	r0, [r7, #4]
 80046ba:	f000 fa39 	bl	8004b30 <USB_GetMode>
 80046be:	4603      	mov	r3, r0
 80046c0:	2b01      	cmp	r3, #1
 80046c2:	d01e      	beq.n	8004702 <USB_SetCurrentMode+0x84>
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	2b31      	cmp	r3, #49	; 0x31
 80046c8:	d9f0      	bls.n	80046ac <USB_SetCurrentMode+0x2e>
 80046ca:	e01a      	b.n	8004702 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80046cc:	78fb      	ldrb	r3, [r7, #3]
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d115      	bne.n	80046fe <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	68db      	ldr	r3, [r3, #12]
 80046d6:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80046de:	2001      	movs	r0, #1
 80046e0:	f7fc fb8a 	bl	8000df8 <HAL_Delay>
      ms++;
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	3301      	adds	r3, #1
 80046e8:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80046ea:	6878      	ldr	r0, [r7, #4]
 80046ec:	f000 fa20 	bl	8004b30 <USB_GetMode>
 80046f0:	4603      	mov	r3, r0
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d005      	beq.n	8004702 <USB_SetCurrentMode+0x84>
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	2b31      	cmp	r3, #49	; 0x31
 80046fa:	d9f0      	bls.n	80046de <USB_SetCurrentMode+0x60>
 80046fc:	e001      	b.n	8004702 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80046fe:	2301      	movs	r3, #1
 8004700:	e005      	b.n	800470e <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	2b32      	cmp	r3, #50	; 0x32
 8004706:	d101      	bne.n	800470c <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8004708:	2301      	movs	r3, #1
 800470a:	e000      	b.n	800470e <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800470c:	2300      	movs	r3, #0
}
 800470e:	4618      	mov	r0, r3
 8004710:	3710      	adds	r7, #16
 8004712:	46bd      	mov	sp, r7
 8004714:	bd80      	pop	{r7, pc}
	...

08004718 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004718:	b084      	sub	sp, #16
 800471a:	b580      	push	{r7, lr}
 800471c:	b086      	sub	sp, #24
 800471e:	af00      	add	r7, sp, #0
 8004720:	6078      	str	r0, [r7, #4]
 8004722:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8004726:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800472a:	2300      	movs	r3, #0
 800472c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8004732:	2300      	movs	r3, #0
 8004734:	613b      	str	r3, [r7, #16]
 8004736:	e009      	b.n	800474c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8004738:	687a      	ldr	r2, [r7, #4]
 800473a:	693b      	ldr	r3, [r7, #16]
 800473c:	3340      	adds	r3, #64	; 0x40
 800473e:	009b      	lsls	r3, r3, #2
 8004740:	4413      	add	r3, r2
 8004742:	2200      	movs	r2, #0
 8004744:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8004746:	693b      	ldr	r3, [r7, #16]
 8004748:	3301      	adds	r3, #1
 800474a:	613b      	str	r3, [r7, #16]
 800474c:	693b      	ldr	r3, [r7, #16]
 800474e:	2b0e      	cmp	r3, #14
 8004750:	d9f2      	bls.n	8004738 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8004752:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004754:	2b00      	cmp	r3, #0
 8004756:	d11c      	bne.n	8004792 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800475e:	685b      	ldr	r3, [r3, #4]
 8004760:	68fa      	ldr	r2, [r7, #12]
 8004762:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004766:	f043 0302 	orr.w	r3, r3, #2
 800476a:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004770:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	601a      	str	r2, [r3, #0]
 8004790:	e005      	b.n	800479e <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004796:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80047a4:	461a      	mov	r2, r3
 80047a6:	2300      	movs	r3, #0
 80047a8:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80047b0:	4619      	mov	r1, r3
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80047b8:	461a      	mov	r2, r3
 80047ba:	680b      	ldr	r3, [r1, #0]
 80047bc:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80047be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80047c0:	2b01      	cmp	r3, #1
 80047c2:	d10c      	bne.n	80047de <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80047c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d104      	bne.n	80047d4 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80047ca:	2100      	movs	r1, #0
 80047cc:	6878      	ldr	r0, [r7, #4]
 80047ce:	f000 f975 	bl	8004abc <USB_SetDevSpeed>
 80047d2:	e018      	b.n	8004806 <USB_DevInit+0xee>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80047d4:	2101      	movs	r1, #1
 80047d6:	6878      	ldr	r0, [r7, #4]
 80047d8:	f000 f970 	bl	8004abc <USB_SetDevSpeed>
 80047dc:	e013      	b.n	8004806 <USB_DevInit+0xee>
    }
  }
#if defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx)
  else if (cfg.phy_itface == USB_OTG_HS_EMBEDDED_PHY)
 80047de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80047e0:	2b03      	cmp	r3, #3
 80047e2:	d10c      	bne.n	80047fe <USB_DevInit+0xe6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80047e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d104      	bne.n	80047f4 <USB_DevInit+0xdc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80047ea:	2100      	movs	r1, #0
 80047ec:	6878      	ldr	r0, [r7, #4]
 80047ee:	f000 f965 	bl	8004abc <USB_SetDevSpeed>
 80047f2:	e008      	b.n	8004806 <USB_DevInit+0xee>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80047f4:	2101      	movs	r1, #1
 80047f6:	6878      	ldr	r0, [r7, #4]
 80047f8:	f000 f960 	bl	8004abc <USB_SetDevSpeed>
 80047fc:	e003      	b.n	8004806 <USB_DevInit+0xee>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80047fe:	2103      	movs	r1, #3
 8004800:	6878      	ldr	r0, [r7, #4]
 8004802:	f000 f95b 	bl	8004abc <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8004806:	2110      	movs	r1, #16
 8004808:	6878      	ldr	r0, [r7, #4]
 800480a:	f000 f8f3 	bl	80049f4 <USB_FlushTxFifo>
 800480e:	4603      	mov	r3, r0
 8004810:	2b00      	cmp	r3, #0
 8004812:	d001      	beq.n	8004818 <USB_DevInit+0x100>
  {
    ret = HAL_ERROR;
 8004814:	2301      	movs	r3, #1
 8004816:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004818:	6878      	ldr	r0, [r7, #4]
 800481a:	f000 f91f 	bl	8004a5c <USB_FlushRxFifo>
 800481e:	4603      	mov	r3, r0
 8004820:	2b00      	cmp	r3, #0
 8004822:	d001      	beq.n	8004828 <USB_DevInit+0x110>
  {
    ret = HAL_ERROR;
 8004824:	2301      	movs	r3, #1
 8004826:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800482e:	461a      	mov	r2, r3
 8004830:	2300      	movs	r3, #0
 8004832:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800483a:	461a      	mov	r2, r3
 800483c:	2300      	movs	r3, #0
 800483e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004846:	461a      	mov	r2, r3
 8004848:	2300      	movs	r3, #0
 800484a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800484c:	2300      	movs	r3, #0
 800484e:	613b      	str	r3, [r7, #16]
 8004850:	e043      	b.n	80048da <USB_DevInit+0x1c2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004852:	693b      	ldr	r3, [r7, #16]
 8004854:	015a      	lsls	r2, r3, #5
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	4413      	add	r3, r2
 800485a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004864:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004868:	d118      	bne.n	800489c <USB_DevInit+0x184>
    {
      if (i == 0U)
 800486a:	693b      	ldr	r3, [r7, #16]
 800486c:	2b00      	cmp	r3, #0
 800486e:	d10a      	bne.n	8004886 <USB_DevInit+0x16e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8004870:	693b      	ldr	r3, [r7, #16]
 8004872:	015a      	lsls	r2, r3, #5
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	4413      	add	r3, r2
 8004878:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800487c:	461a      	mov	r2, r3
 800487e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004882:	6013      	str	r3, [r2, #0]
 8004884:	e013      	b.n	80048ae <USB_DevInit+0x196>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8004886:	693b      	ldr	r3, [r7, #16]
 8004888:	015a      	lsls	r2, r3, #5
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	4413      	add	r3, r2
 800488e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004892:	461a      	mov	r2, r3
 8004894:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004898:	6013      	str	r3, [r2, #0]
 800489a:	e008      	b.n	80048ae <USB_DevInit+0x196>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800489c:	693b      	ldr	r3, [r7, #16]
 800489e:	015a      	lsls	r2, r3, #5
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	4413      	add	r3, r2
 80048a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80048a8:	461a      	mov	r2, r3
 80048aa:	2300      	movs	r3, #0
 80048ac:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80048ae:	693b      	ldr	r3, [r7, #16]
 80048b0:	015a      	lsls	r2, r3, #5
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	4413      	add	r3, r2
 80048b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80048ba:	461a      	mov	r2, r3
 80048bc:	2300      	movs	r3, #0
 80048be:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80048c0:	693b      	ldr	r3, [r7, #16]
 80048c2:	015a      	lsls	r2, r3, #5
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	4413      	add	r3, r2
 80048c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80048cc:	461a      	mov	r2, r3
 80048ce:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80048d2:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80048d4:	693b      	ldr	r3, [r7, #16]
 80048d6:	3301      	adds	r3, #1
 80048d8:	613b      	str	r3, [r7, #16]
 80048da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048dc:	693a      	ldr	r2, [r7, #16]
 80048de:	429a      	cmp	r2, r3
 80048e0:	d3b7      	bcc.n	8004852 <USB_DevInit+0x13a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80048e2:	2300      	movs	r3, #0
 80048e4:	613b      	str	r3, [r7, #16]
 80048e6:	e043      	b.n	8004970 <USB_DevInit+0x258>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80048e8:	693b      	ldr	r3, [r7, #16]
 80048ea:	015a      	lsls	r2, r3, #5
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	4413      	add	r3, r2
 80048f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80048fa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80048fe:	d118      	bne.n	8004932 <USB_DevInit+0x21a>
    {
      if (i == 0U)
 8004900:	693b      	ldr	r3, [r7, #16]
 8004902:	2b00      	cmp	r3, #0
 8004904:	d10a      	bne.n	800491c <USB_DevInit+0x204>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8004906:	693b      	ldr	r3, [r7, #16]
 8004908:	015a      	lsls	r2, r3, #5
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	4413      	add	r3, r2
 800490e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004912:	461a      	mov	r2, r3
 8004914:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004918:	6013      	str	r3, [r2, #0]
 800491a:	e013      	b.n	8004944 <USB_DevInit+0x22c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800491c:	693b      	ldr	r3, [r7, #16]
 800491e:	015a      	lsls	r2, r3, #5
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	4413      	add	r3, r2
 8004924:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004928:	461a      	mov	r2, r3
 800492a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800492e:	6013      	str	r3, [r2, #0]
 8004930:	e008      	b.n	8004944 <USB_DevInit+0x22c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8004932:	693b      	ldr	r3, [r7, #16]
 8004934:	015a      	lsls	r2, r3, #5
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	4413      	add	r3, r2
 800493a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800493e:	461a      	mov	r2, r3
 8004940:	2300      	movs	r3, #0
 8004942:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8004944:	693b      	ldr	r3, [r7, #16]
 8004946:	015a      	lsls	r2, r3, #5
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	4413      	add	r3, r2
 800494c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004950:	461a      	mov	r2, r3
 8004952:	2300      	movs	r3, #0
 8004954:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8004956:	693b      	ldr	r3, [r7, #16]
 8004958:	015a      	lsls	r2, r3, #5
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	4413      	add	r3, r2
 800495e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004962:	461a      	mov	r2, r3
 8004964:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004968:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800496a:	693b      	ldr	r3, [r7, #16]
 800496c:	3301      	adds	r3, #1
 800496e:	613b      	str	r3, [r7, #16]
 8004970:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004972:	693a      	ldr	r2, [r7, #16]
 8004974:	429a      	cmp	r2, r3
 8004976:	d3b7      	bcc.n	80048e8 <USB_DevInit+0x1d0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800497e:	691b      	ldr	r3, [r3, #16]
 8004980:	68fa      	ldr	r2, [r7, #12]
 8004982:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004986:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800498a:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	2200      	movs	r2, #0
 8004990:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8004998:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800499a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800499c:	2b00      	cmp	r3, #0
 800499e:	d105      	bne.n	80049ac <USB_DevInit+0x294>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	699b      	ldr	r3, [r3, #24]
 80049a4:	f043 0210 	orr.w	r2, r3, #16
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	699a      	ldr	r2, [r3, #24]
 80049b0:	4b0e      	ldr	r3, [pc, #56]	; (80049ec <USB_DevInit+0x2d4>)
 80049b2:	4313      	orrs	r3, r2
 80049b4:	687a      	ldr	r2, [r7, #4]
 80049b6:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80049b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d005      	beq.n	80049ca <USB_DevInit+0x2b2>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	699b      	ldr	r3, [r3, #24]
 80049c2:	f043 0208 	orr.w	r2, r3, #8
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80049ca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80049cc:	2b01      	cmp	r3, #1
 80049ce:	d105      	bne.n	80049dc <USB_DevInit+0x2c4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	699a      	ldr	r2, [r3, #24]
 80049d4:	4b06      	ldr	r3, [pc, #24]	; (80049f0 <USB_DevInit+0x2d8>)
 80049d6:	4313      	orrs	r3, r2
 80049d8:	687a      	ldr	r2, [r7, #4]
 80049da:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80049dc:	7dfb      	ldrb	r3, [r7, #23]
}
 80049de:	4618      	mov	r0, r3
 80049e0:	3718      	adds	r7, #24
 80049e2:	46bd      	mov	sp, r7
 80049e4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80049e8:	b004      	add	sp, #16
 80049ea:	4770      	bx	lr
 80049ec:	803c3800 	.word	0x803c3800
 80049f0:	40000004 	.word	0x40000004

080049f4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80049f4:	b480      	push	{r7}
 80049f6:	b085      	sub	sp, #20
 80049f8:	af00      	add	r7, sp, #0
 80049fa:	6078      	str	r0, [r7, #4]
 80049fc:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80049fe:	2300      	movs	r3, #0
 8004a00:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	3301      	adds	r3, #1
 8004a06:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	4a13      	ldr	r2, [pc, #76]	; (8004a58 <USB_FlushTxFifo+0x64>)
 8004a0c:	4293      	cmp	r3, r2
 8004a0e:	d901      	bls.n	8004a14 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8004a10:	2303      	movs	r3, #3
 8004a12:	e01b      	b.n	8004a4c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	691b      	ldr	r3, [r3, #16]
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	daf2      	bge.n	8004a02 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8004a1c:	2300      	movs	r3, #0
 8004a1e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004a20:	683b      	ldr	r3, [r7, #0]
 8004a22:	019b      	lsls	r3, r3, #6
 8004a24:	f043 0220 	orr.w	r2, r3, #32
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	3301      	adds	r3, #1
 8004a30:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	4a08      	ldr	r2, [pc, #32]	; (8004a58 <USB_FlushTxFifo+0x64>)
 8004a36:	4293      	cmp	r3, r2
 8004a38:	d901      	bls.n	8004a3e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8004a3a:	2303      	movs	r3, #3
 8004a3c:	e006      	b.n	8004a4c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	691b      	ldr	r3, [r3, #16]
 8004a42:	f003 0320 	and.w	r3, r3, #32
 8004a46:	2b20      	cmp	r3, #32
 8004a48:	d0f0      	beq.n	8004a2c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8004a4a:	2300      	movs	r3, #0
}
 8004a4c:	4618      	mov	r0, r3
 8004a4e:	3714      	adds	r7, #20
 8004a50:	46bd      	mov	sp, r7
 8004a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a56:	4770      	bx	lr
 8004a58:	00030d40 	.word	0x00030d40

08004a5c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004a5c:	b480      	push	{r7}
 8004a5e:	b085      	sub	sp, #20
 8004a60:	af00      	add	r7, sp, #0
 8004a62:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004a64:	2300      	movs	r3, #0
 8004a66:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	3301      	adds	r3, #1
 8004a6c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	4a11      	ldr	r2, [pc, #68]	; (8004ab8 <USB_FlushRxFifo+0x5c>)
 8004a72:	4293      	cmp	r3, r2
 8004a74:	d901      	bls.n	8004a7a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8004a76:	2303      	movs	r3, #3
 8004a78:	e018      	b.n	8004aac <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	691b      	ldr	r3, [r3, #16]
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	daf2      	bge.n	8004a68 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8004a82:	2300      	movs	r3, #0
 8004a84:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	2210      	movs	r2, #16
 8004a8a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	3301      	adds	r3, #1
 8004a90:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	4a08      	ldr	r2, [pc, #32]	; (8004ab8 <USB_FlushRxFifo+0x5c>)
 8004a96:	4293      	cmp	r3, r2
 8004a98:	d901      	bls.n	8004a9e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8004a9a:	2303      	movs	r3, #3
 8004a9c:	e006      	b.n	8004aac <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	691b      	ldr	r3, [r3, #16]
 8004aa2:	f003 0310 	and.w	r3, r3, #16
 8004aa6:	2b10      	cmp	r3, #16
 8004aa8:	d0f0      	beq.n	8004a8c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8004aaa:	2300      	movs	r3, #0
}
 8004aac:	4618      	mov	r0, r3
 8004aae:	3714      	adds	r7, #20
 8004ab0:	46bd      	mov	sp, r7
 8004ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ab6:	4770      	bx	lr
 8004ab8:	00030d40 	.word	0x00030d40

08004abc <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8004abc:	b480      	push	{r7}
 8004abe:	b085      	sub	sp, #20
 8004ac0:	af00      	add	r7, sp, #0
 8004ac2:	6078      	str	r0, [r7, #4]
 8004ac4:	460b      	mov	r3, r1
 8004ac6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ad2:	681a      	ldr	r2, [r3, #0]
 8004ad4:	78fb      	ldrb	r3, [r7, #3]
 8004ad6:	68f9      	ldr	r1, [r7, #12]
 8004ad8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004adc:	4313      	orrs	r3, r2
 8004ade:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8004ae0:	2300      	movs	r3, #0
}
 8004ae2:	4618      	mov	r0, r3
 8004ae4:	3714      	adds	r7, #20
 8004ae6:	46bd      	mov	sp, r7
 8004ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aec:	4770      	bx	lr

08004aee <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8004aee:	b480      	push	{r7}
 8004af0:	b085      	sub	sp, #20
 8004af2:	af00      	add	r7, sp, #0
 8004af4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	68fa      	ldr	r2, [r7, #12]
 8004b04:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8004b08:	f023 0303 	bic.w	r3, r3, #3
 8004b0c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b14:	685b      	ldr	r3, [r3, #4]
 8004b16:	68fa      	ldr	r2, [r7, #12]
 8004b18:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004b1c:	f043 0302 	orr.w	r3, r3, #2
 8004b20:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004b22:	2300      	movs	r3, #0
}
 8004b24:	4618      	mov	r0, r3
 8004b26:	3714      	adds	r7, #20
 8004b28:	46bd      	mov	sp, r7
 8004b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b2e:	4770      	bx	lr

08004b30 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8004b30:	b480      	push	{r7}
 8004b32:	b083      	sub	sp, #12
 8004b34:	af00      	add	r7, sp, #0
 8004b36:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	695b      	ldr	r3, [r3, #20]
 8004b3c:	f003 0301 	and.w	r3, r3, #1
}
 8004b40:	4618      	mov	r0, r3
 8004b42:	370c      	adds	r7, #12
 8004b44:	46bd      	mov	sp, r7
 8004b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b4a:	4770      	bx	lr

08004b4c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004b4c:	b480      	push	{r7}
 8004b4e:	b085      	sub	sp, #20
 8004b50:	af00      	add	r7, sp, #0
 8004b52:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004b54:	2300      	movs	r3, #0
 8004b56:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	3301      	adds	r3, #1
 8004b5c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	4a13      	ldr	r2, [pc, #76]	; (8004bb0 <USB_CoreReset+0x64>)
 8004b62:	4293      	cmp	r3, r2
 8004b64:	d901      	bls.n	8004b6a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8004b66:	2303      	movs	r3, #3
 8004b68:	e01b      	b.n	8004ba2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	691b      	ldr	r3, [r3, #16]
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	daf2      	bge.n	8004b58 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8004b72:	2300      	movs	r3, #0
 8004b74:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	691b      	ldr	r3, [r3, #16]
 8004b7a:	f043 0201 	orr.w	r2, r3, #1
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	3301      	adds	r3, #1
 8004b86:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	4a09      	ldr	r2, [pc, #36]	; (8004bb0 <USB_CoreReset+0x64>)
 8004b8c:	4293      	cmp	r3, r2
 8004b8e:	d901      	bls.n	8004b94 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8004b90:	2303      	movs	r3, #3
 8004b92:	e006      	b.n	8004ba2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	691b      	ldr	r3, [r3, #16]
 8004b98:	f003 0301 	and.w	r3, r3, #1
 8004b9c:	2b01      	cmp	r3, #1
 8004b9e:	d0f0      	beq.n	8004b82 <USB_CoreReset+0x36>

  return HAL_OK;
 8004ba0:	2300      	movs	r3, #0
}
 8004ba2:	4618      	mov	r0, r3
 8004ba4:	3714      	adds	r7, #20
 8004ba6:	46bd      	mov	sp, r7
 8004ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bac:	4770      	bx	lr
 8004bae:	bf00      	nop
 8004bb0:	00030d40 	.word	0x00030d40

08004bb4 <memset>:
 8004bb4:	4402      	add	r2, r0
 8004bb6:	4603      	mov	r3, r0
 8004bb8:	4293      	cmp	r3, r2
 8004bba:	d100      	bne.n	8004bbe <memset+0xa>
 8004bbc:	4770      	bx	lr
 8004bbe:	f803 1b01 	strb.w	r1, [r3], #1
 8004bc2:	e7f9      	b.n	8004bb8 <memset+0x4>

08004bc4 <__libc_init_array>:
 8004bc4:	b570      	push	{r4, r5, r6, lr}
 8004bc6:	4d0d      	ldr	r5, [pc, #52]	; (8004bfc <__libc_init_array+0x38>)
 8004bc8:	4c0d      	ldr	r4, [pc, #52]	; (8004c00 <__libc_init_array+0x3c>)
 8004bca:	1b64      	subs	r4, r4, r5
 8004bcc:	10a4      	asrs	r4, r4, #2
 8004bce:	2600      	movs	r6, #0
 8004bd0:	42a6      	cmp	r6, r4
 8004bd2:	d109      	bne.n	8004be8 <__libc_init_array+0x24>
 8004bd4:	4d0b      	ldr	r5, [pc, #44]	; (8004c04 <__libc_init_array+0x40>)
 8004bd6:	4c0c      	ldr	r4, [pc, #48]	; (8004c08 <__libc_init_array+0x44>)
 8004bd8:	f000 f818 	bl	8004c0c <_init>
 8004bdc:	1b64      	subs	r4, r4, r5
 8004bde:	10a4      	asrs	r4, r4, #2
 8004be0:	2600      	movs	r6, #0
 8004be2:	42a6      	cmp	r6, r4
 8004be4:	d105      	bne.n	8004bf2 <__libc_init_array+0x2e>
 8004be6:	bd70      	pop	{r4, r5, r6, pc}
 8004be8:	f855 3b04 	ldr.w	r3, [r5], #4
 8004bec:	4798      	blx	r3
 8004bee:	3601      	adds	r6, #1
 8004bf0:	e7ee      	b.n	8004bd0 <__libc_init_array+0xc>
 8004bf2:	f855 3b04 	ldr.w	r3, [r5], #4
 8004bf6:	4798      	blx	r3
 8004bf8:	3601      	adds	r6, #1
 8004bfa:	e7f2      	b.n	8004be2 <__libc_init_array+0x1e>
 8004bfc:	08004c7c 	.word	0x08004c7c
 8004c00:	08004c7c 	.word	0x08004c7c
 8004c04:	08004c7c 	.word	0x08004c7c
 8004c08:	08004c80 	.word	0x08004c80

08004c0c <_init>:
 8004c0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c0e:	bf00      	nop
 8004c10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004c12:	bc08      	pop	{r3}
 8004c14:	469e      	mov	lr, r3
 8004c16:	4770      	bx	lr

08004c18 <_fini>:
 8004c18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c1a:	bf00      	nop
 8004c1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004c1e:	bc08      	pop	{r3}
 8004c20:	469e      	mov	lr, r3
 8004c22:	4770      	bx	lr
